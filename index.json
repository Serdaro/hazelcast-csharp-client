{
  "404.html": {
    "href": "404.html",
    "title": "Page Not Found | Hazelcast .NET Documentation",
    "keywords": "Page Not Found Unfortunately, we cannot locate that page."
  },
  "api-index.html": {
    "href": "api-index.html",
    "title": "API | Hazelcast .NET Documentation",
    "keywords": "API This section contains the full public API reference documentation, generated from source-code-level comments, and complemented with additional content. Use the navigation to the left to browse namespaces and members. For extra details, including all code comments, you may want to browse the source code itself. API reference is available for the following versions: 4.0.0 development 3.12.3 3.12.2"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.BigIntegerSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.BigIntegerSum.html",
    "title": "BigIntegerSum Method | Hazelcast .NET Documentation",
    "keywords": "BigIntegerSum Method BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum() Returns IAggregator < BigInteger > BigIntegerSumAggregator BigIntegerSum(String) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < BigInteger > BigIntegerSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.Count.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.Count.html",
    "title": "Count Method | Hazelcast .NET Documentation",
    "keywords": "Count Method Count() Counts input values (accepts nulls). Declaration public static IAggregator<long> Count() Returns IAggregator < Int64 > Count(String) Counts input values (accepts nulls). Declaration public static IAggregator<long> Count(string attributePath) Parameters String attributePath An attribute path. Returns IAggregator < Int64 > Remarks Values are extracted from the specified attributePath ."
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.DoubleAvg.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.DoubleAvg.html",
    "title": "DoubleAvg Method | Hazelcast .NET Documentation",
    "keywords": "DoubleAvg Method DoubleAvg() Averages Double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg() Returns IAggregator < Double > DoubleAvg(String) Averages Double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg(string attributePath) Parameters String attributePath An attribute path. Returns IAggregator < Double > Remarks Values are extracted from the specified attributePath ."
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.DoubleSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.DoubleSum.html",
    "title": "DoubleSum Method | Hazelcast .NET Documentation",
    "keywords": "DoubleSum Method DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum() Returns IAggregator < Double > DoubleSumAggregator DoubleSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > DoubleSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.FixedPointSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.FixedPointSum.html",
    "title": "FixedPointSum Method | Hazelcast .NET Documentation",
    "keywords": "FixedPointSum Method FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum() Returns IAggregator < Int64 > FixedSumAggregator FixedPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > FixedSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.FloatingPointSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.FloatingPointSum.html",
    "title": "FloatingPointSum Method | Hazelcast .NET Documentation",
    "keywords": "FloatingPointSum Method FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum() Returns IAggregator < Double > FloatingPointSumAggregator FloatingPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > FloatingPointSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.html",
    "title": "Aggregator Class | Hazelcast .NET Documentation",
    "keywords": "Aggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Creates aggregators. public static class Aggregator Inheritance Object Aggregator Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Min/Max/Average aggregators are type specific, so an IntegerAvg() aggregator expects all elements to be integers. There is no conversion executed while accumulating, so if there is any other type met an exception will be thrown. In order to operate on a generic Number type use the FixedPointSum(String) , FloatingPointSum(String) and NumberAvg(String) aggregators. All of them will convert the given number to either Long or Double during the accumulation phase. It will result in a lot of allocations since each number has to be converted, but it enables the user to operate on the whole family of numbers. It is especially useful if the numbers given to the aggregators may not be of one type only. The attributePath given in the factory method allows the aggregator to operate on the value extracted by navigating to the given attributePath on each object that has been returned from a query. The attribute path may be simple, e.g. \"name\", or nested \"address.city\". If an aggregator does not accept null values pass a predicate to the aggregate call that will filter them out. If the input value or the extracted value is a collection it won't be \"unfolded\" - so for example count aggregation on \"person.postalCodes\" will return 1 for each input object and not the size of the collection. In order to calculate the size of the collection use the [any] operator, e.g. \"person.postalCodes[any]\". Methods BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. BigIntegerSum(String) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Count() Counts input values (accepts nulls). Count(String) Counts input values (accepts nulls). DoubleAvg() Averages Double input values (does not accept nulls). DoubleAvg(String) Averages Double input values (does not accept nulls). DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. DoubleSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FixedPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FloatingPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values IntegerAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. IntegerSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values LongAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. LongSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Max<TResult>(String) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Min<TResult>(String) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. NumberAvg(String) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values."
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.IntegerAvg.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.IntegerAvg.html",
    "title": "IntegerAvg Method | Hazelcast .NET Documentation",
    "keywords": "IntegerAvg Method IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg() Returns IAggregator < Double > IntegerAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > IntegerAverageAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.IntegerSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.IntegerSum.html",
    "title": "IntegerSum Method | Hazelcast .NET Documentation",
    "keywords": "IntegerSum Method IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum() Returns IAggregator < Int64 > IntegerSumAggregator IntegerSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > IntegerSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.LongAvg.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.LongAvg.html",
    "title": "LongAvg Method | Hazelcast .NET Documentation",
    "keywords": "LongAvg Method LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values Declaration public static IAggregator<double> LongAvg() Returns IAggregator < Double > LongAverageAggregator LongAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values Declaration public static IAggregator<double> LongAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > LongAverageAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.LongSum.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.LongSum.html",
    "title": "LongSum Method | Hazelcast .NET Documentation",
    "keywords": "LongSum Method LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. Declaration public static IAggregator<long> LongSum() Returns IAggregator < Int64 > LongSumAggregator LongSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Declaration public static IAggregator<long> LongSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > LongSumAggregator"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.Max.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.Max.html",
    "title": "Max Method | Hazelcast .NET Documentation",
    "keywords": "Max Method Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Declaration public static IAggregator<TResult> Max<TResult>() Returns IAggregator <TResult> MaxAggregator<TResult> Type Parameters TResult Max<TResult>(String) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Max<TResult>(string attributePath) Parameters String attributePath attribute Path Returns IAggregator <TResult> MaxAggregator<TResult> Type Parameters TResult"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.Min.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.Min.html",
    "title": "Min Method | Hazelcast .NET Documentation",
    "keywords": "Min Method Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Declaration public static IAggregator<TResult> Min<TResult>() Returns IAggregator <TResult> MinAggregator<TResult> Type Parameters TResult Min<TResult>(String) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Min<TResult>(string attributePath) Parameters String attributePath attribute Path Returns IAggregator <TResult> MinAggregator<TResult> Type Parameters TResult"
  },
  "dev/api/Hazelcast.Aggregating.Aggregator.NumberAvg.html": {
    "href": "dev/api/Hazelcast.Aggregating.Aggregator.NumberAvg.html",
    "title": "NumberAvg Method | Hazelcast .NET Documentation",
    "keywords": "NumberAvg Method NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg() Returns IAggregator < Double > NumberAverageAggregator NumberAvg(String) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > NumberAverageAggregator"
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.AttributePath.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.AttributePath.html",
    "title": "AttributePath Property | Hazelcast .NET Documentation",
    "keywords": "AttributePath Property AttributePath Declaration public string AttributePath { get; set; } Property Value String Implements IAggregator.AttributePath"
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public abstract int ClassId { get; } Property Value Int32 The identifier of the class. Implements IIdentifiedDataSerializable.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.-ctor.html",
    "title": "AggregatorBase Constructor | Hazelcast .NET Documentation",
    "keywords": "AggregatorBase Constructor AggregatorBase() Initializes a new instance of the AggregatorBase<TResult> class. Declaration protected AggregatorBase() AggregatorBase(String) Initializes a new instance of the AggregatorBase<TResult> class. Declaration protected AggregatorBase(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.FactoryId.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Declaration public int FactoryId { get; } Property Value Int32 The identifier of the factory. Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.html",
    "title": "AggregatorBase<TResult> Class | Hazelcast .NET Documentation",
    "keywords": "AggregatorBase<TResult> Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Provides a base class for all IAggregator<TResult> implementations. public abstract class AggregatorBase<TResult> : IAggregator<TResult>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase<TResult> BigIntegerSumAggregator CountAggregator DoubleAverageAggregator DoubleSumAggregator FixedSumAggregator FloatingPointSumAggregator IntegerAverageAggregator IntegerSumAggregator LongAverageAggregator LongSumAggregator MaxAggregator<TResult> MinAggregator<TResult> NumberAverageAggregator Implements IAggregator <TResult> IAggregator IIdentifiedDataSerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TResult Constructors AggregatorBase() Initializes a new instance of the AggregatorBase<TResult> class. AggregatorBase(String) Initializes a new instance of the AggregatorBase<TResult> class. Properties AttributePath ClassId Gets the identifier of the class. FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected abstract void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ReadData.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected abstract void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.AggregatorBase-1.WriteData.html": {
    "href": "dev/api/Hazelcast.Aggregating.AggregatorBase-1.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Numerics.BigInteger>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.-ctor.html",
    "title": "BigIntegerSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "BigIntegerSumAggregator Constructor BigIntegerSumAggregator() Initializes a new instance of the BigIntegerSumAggregator class. Declaration public BigIntegerSumAggregator() BigIntegerSumAggregator(String) Initializes a new instance of the BigIntegerSumAggregator class. Declaration public BigIntegerSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.html",
    "title": "BigIntegerSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "BigIntegerSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values. public sealed class BigIntegerSumAggregator : AggregatorBase<BigInteger>, IAggregator<BigInteger>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < BigInteger > BigIntegerSumAggregator Implements IAggregator < BigInteger > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<BigInteger>.AttributePath AggregatorBase<BigInteger>.ReadData(IObjectDataInput) AggregatorBase<BigInteger>.WriteData(IObjectDataOutput) AggregatorBase<BigInteger>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values not accepted. Constructors BigIntegerSumAggregator() Initializes a new instance of the BigIntegerSumAggregator class. BigIntegerSumAggregator(String) Initializes a new instance of the BigIntegerSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Numerics.BigInteger>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.BigIntegerSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Numerics.BigInteger>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.CountAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.CountAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public override int ClassId { get; } Property Value Int32 Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ClassId"
  },
  "dev/api/Hazelcast.Aggregating.CountAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.CountAggregator.-ctor.html",
    "title": "CountAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "CountAggregator Constructor CountAggregator() Initializes a new instance of the CountAggregator class. Declaration public CountAggregator() CountAggregator(String) Initializes a new instance of the CountAggregator class. Declaration public CountAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.CountAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.CountAggregator.html",
    "title": "CountAggregator Class | Hazelcast .NET Documentation",
    "keywords": "CountAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that counts the input values. public sealed class CountAggregator : AggregatorBase<long>, IAggregator<long>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Int64 > CountAggregator Implements IAggregator < Int64 > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Int64>.AttributePath AggregatorBase<Int64>.ReadData(IObjectDataInput) AggregatorBase<Int64>.WriteData(IObjectDataOutput) AggregatorBase<Int64>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values are accepted. Constructors CountAggregator() Initializes a new instance of the CountAggregator class. CountAggregator(String) Initializes a new instance of the CountAggregator class. Properties ClassId Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.CountAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.CountAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.CountAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.CountAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.-ctor.html",
    "title": "DoubleAverageAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "DoubleAverageAggregator Constructor DoubleAverageAggregator() Initializes a new instance of the DoubleAverageAggregator class. Declaration public DoubleAverageAggregator() DoubleAverageAggregator(String) Initializes a new instance of the DoubleAverageAggregator class. Declaration public DoubleAverageAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.html",
    "title": "DoubleAverageAggregator Class | Hazelcast .NET Documentation",
    "keywords": "DoubleAverageAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that averages the input values. public sealed class DoubleAverageAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > DoubleAverageAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values are not accepted. Constructors DoubleAverageAggregator() Initializes a new instance of the DoubleAverageAggregator class. DoubleAverageAggregator(String) Initializes a new instance of the DoubleAverageAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleAverageAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.-ctor.html",
    "title": "DoubleSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "DoubleSumAggregator Constructor DoubleSumAggregator() Initializes a new instance of the DoubleSumAggregator class. Declaration public DoubleSumAggregator() DoubleSumAggregator(String) Initializes a new instance of the DoubleSumAggregator class. Declaration public DoubleSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.html",
    "title": "DoubleSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "DoubleSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values. public sealed class DoubleSumAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > DoubleSumAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values not accepted. Constructors DoubleSumAggregator() Initializes a new instance of the DoubleSumAggregator class. DoubleSumAggregator(String) Initializes a new instance of the DoubleSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.DoubleSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.FixedSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.FixedSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.FixedSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.FixedSumAggregator.-ctor.html",
    "title": "FixedSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "FixedSumAggregator Constructor FixedSumAggregator() Initializes a new instance of the FixedSumAggregator class. Declaration public FixedSumAggregator() FixedSumAggregator(String) Initializes a new instance of the FixedSumAggregator class. Declaration public FixedSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.FixedSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.FixedSumAggregator.html",
    "title": "FixedSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "FixedSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values. public sealed class FixedSumAggregator : AggregatorBase<long>, IAggregator<long>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Int64 > FixedSumAggregator Implements IAggregator < Int64 > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Int64>.AttributePath AggregatorBase<Int64>.ReadData(IObjectDataInput) AggregatorBase<Int64>.WriteData(IObjectDataOutput) AggregatorBase<Int64>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values not accepted. Constructors FixedSumAggregator() Initializes a new instance of the FixedSumAggregator class. FixedSumAggregator(String) Initializes a new instance of the FixedSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.FixedSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.FixedSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.FixedSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.FixedSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.-ctor.html",
    "title": "FloatingPointSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "FloatingPointSumAggregator Constructor FloatingPointSumAggregator() Initializes a new instance of the FloatingPointSumAggregator class. Declaration public FloatingPointSumAggregator() FloatingPointSumAggregator(String) Initializes a new instance of the FloatingPointSumAggregator class. Declaration public FloatingPointSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.html",
    "title": "FloatingPointSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "FloatingPointSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values. public sealed class FloatingPointSumAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > FloatingPointSumAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values not accepted. Constructors FloatingPointSumAggregator() Initializes a new instance of the FloatingPointSumAggregator class. FloatingPointSumAggregator(String) Initializes a new instance of the FloatingPointSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.FloatingPointSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.html": {
    "href": "dev/api/Hazelcast.Aggregating.html",
    "title": "Hazelcast.Aggregating Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Aggregating Namespace Classes Aggregator Creates aggregators. AggregatorBase<TResult> Provides a base class for all IAggregator<TResult> implementations. BigIntegerSumAggregator Represents an aggregator that sums the input values. CountAggregator Represents an aggregator that counts the input values. DoubleAverageAggregator Represents an aggregator that averages the input values. DoubleSumAggregator Represents an aggregator that sums the input values. FixedSumAggregator Represents an aggregator that sums the input values. FloatingPointSumAggregator Represents an aggregator that sums the input values. IntegerAverageAggregator Represents an aggregator that averages the input values. IntegerSumAggregator Represents an aggregator that sums the input values, and does *not accept null input values. LongAverageAggregator Represents an aggregator that averages the input values. LongSumAggregator Represents an aggregator that sums the input values. MaxAggregator<TResult> Represents an aggregator that returns the maximum input value. MinAggregator<TResult> Represents an aggregator that returns the minimum input value. NumberAverageAggregator Represents an aggregator that averages the input values. Interfaces IAggregator Defines an aggregator that can transform an object into other objects. IAggregator<TResult> Defines an aggregator that can transform an object into other objects."
  },
  "dev/api/Hazelcast.Aggregating.IAggregator.AttributePath.html": {
    "href": "dev/api/Hazelcast.Aggregating.IAggregator.AttributePath.html",
    "title": "AttributePath Property | Hazelcast .NET Documentation",
    "keywords": "AttributePath Property AttributePath Gets the attribute path. Declaration string AttributePath { get; } Property Value String"
  },
  "dev/api/Hazelcast.Aggregating.IAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.IAggregator.html",
    "title": "IAggregator Interface | Hazelcast .NET Documentation",
    "keywords": "IAggregator Interface Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Defines an aggregator that can transform an object into other objects. public interface IAggregator : IIdentifiedDataSerializable Inherited Members IIdentifiedDataSerializable.ReadData(IObjectDataInput) IIdentifiedDataSerializable.WriteData(IObjectDataOutput) IIdentifiedDataSerializable.FactoryId IIdentifiedDataSerializable.ClassId Remarks Aggregators must have a server-side counterpart. Properties AttributePath Gets the attribute path."
  },
  "dev/api/Hazelcast.Aggregating.IAggregator-1.html": {
    "href": "dev/api/Hazelcast.Aggregating.IAggregator-1.html",
    "title": "IAggregator<TResult> Interface | Hazelcast .NET Documentation",
    "keywords": "IAggregator<TResult> Interface Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Defines an aggregator that can transform an object into other objects. public interface IAggregator<TResult> : IAggregator, IIdentifiedDataSerializable Inherited Members IAggregator.AttributePath IIdentifiedDataSerializable.ReadData(IObjectDataInput) IIdentifiedDataSerializable.WriteData(IObjectDataOutput) IIdentifiedDataSerializable.FactoryId IIdentifiedDataSerializable.ClassId Type Parameters TResult The aggregated result type."
  },
  "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.-ctor.html",
    "title": "IntegerAverageAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "IntegerAverageAggregator Constructor IntegerAverageAggregator() Initializes a new instance of the IntegerAverageAggregator class. Declaration public IntegerAverageAggregator() IntegerAverageAggregator(String) Initializes a new instance of the IntegerAverageAggregator class. Declaration public IntegerAverageAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.html",
    "title": "IntegerAverageAggregator Class | Hazelcast .NET Documentation",
    "keywords": "IntegerAverageAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that averages the input values. public sealed class IntegerAverageAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > IntegerAverageAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values are not accepted. Constructors IntegerAverageAggregator() Initializes a new instance of the IntegerAverageAggregator class. IntegerAverageAggregator(String) Initializes a new instance of the IntegerAverageAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerAverageAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.-ctor.html",
    "title": "IntegerSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "IntegerSumAggregator Constructor IntegerSumAggregator() Initializes a new instance of the IntegerSumAggregator class. Declaration public IntegerSumAggregator() IntegerSumAggregator(String) Initializes a new instance of the IntegerSumAggregator class. Declaration public IntegerSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.html",
    "title": "IntegerSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "IntegerSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values, and does *not accept null input values. public sealed class IntegerSumAggregator : AggregatorBase<long>, IAggregator<long>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Int64 > IntegerSumAggregator Implements IAggregator < Int64 > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Int64>.AttributePath AggregatorBase<Int64>.ReadData(IObjectDataInput) AggregatorBase<Int64>.WriteData(IObjectDataOutput) AggregatorBase<Int64>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors IntegerSumAggregator() Initializes a new instance of the IntegerSumAggregator class. IntegerSumAggregator(String) Initializes a new instance of the IntegerSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.IntegerSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.LongAverageAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongAverageAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.LongAverageAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongAverageAggregator.-ctor.html",
    "title": "LongAverageAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "LongAverageAggregator Constructor LongAverageAggregator() Initializes a new instance of the LongAverageAggregator class. Declaration public LongAverageAggregator() LongAverageAggregator(String) Initializes a new instance of the LongAverageAggregator class. Declaration public LongAverageAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.LongAverageAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongAverageAggregator.html",
    "title": "LongAverageAggregator Class | Hazelcast .NET Documentation",
    "keywords": "LongAverageAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that averages the input values. public sealed class LongAverageAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > LongAverageAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values are not accepted. Constructors LongAverageAggregator() Initializes a new instance of the LongAverageAggregator class. LongAverageAggregator(String) Initializes a new instance of the LongAverageAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.LongAverageAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongAverageAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.LongAverageAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongAverageAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.LongSumAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongSumAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.LongSumAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongSumAggregator.-ctor.html",
    "title": "LongSumAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "LongSumAggregator Constructor LongSumAggregator() Initializes a new instance of the LongSumAggregator class. Declaration public LongSumAggregator() LongSumAggregator(String) Initializes a new instance of the LongSumAggregator class. Declaration public LongSumAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.LongSumAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongSumAggregator.html",
    "title": "LongSumAggregator Class | Hazelcast .NET Documentation",
    "keywords": "LongSumAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that sums the input values. public sealed class LongSumAggregator : AggregatorBase<long>, IAggregator<long>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Int64 > LongSumAggregator Implements IAggregator < Int64 > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Int64>.AttributePath AggregatorBase<Int64>.ReadData(IObjectDataInput) AggregatorBase<Int64>.WriteData(IObjectDataOutput) AggregatorBase<Int64>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values not accepted. Constructors LongSumAggregator() Initializes a new instance of the LongSumAggregator class. LongSumAggregator(String) Initializes a new instance of the LongSumAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.LongSumAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongSumAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.LongSumAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.LongSumAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Int64>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.MaxAggregator-1.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.MaxAggregator-1.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.MaxAggregator-1.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.MaxAggregator-1.-ctor.html",
    "title": "MaxAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "MaxAggregator Constructor MaxAggregator() Initializes a new instance of the MinAggregator<TResult> class. Declaration public MaxAggregator() MaxAggregator(String) Initializes a new instance of the MinAggregator<TResult> class. Declaration public MaxAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.MaxAggregator-1.html": {
    "href": "dev/api/Hazelcast.Aggregating.MaxAggregator-1.html",
    "title": "MaxAggregator<TResult> Class | Hazelcast .NET Documentation",
    "keywords": "MaxAggregator<TResult> Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that returns the maximum input value. public sealed class MaxAggregator<TResult> : AggregatorBase<TResult>, IAggregator<TResult>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase <TResult> MaxAggregator<TResult> Implements IAggregator <TResult> IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<TResult>.AttributePath AggregatorBase<TResult>.ReadData(IObjectDataInput) AggregatorBase<TResult>.WriteData(IObjectDataOutput) AggregatorBase<TResult>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TResult The aggregated result type. Remarks Null input values are accepted. Constructors MaxAggregator() Initializes a new instance of the MinAggregator<TResult> class. MaxAggregator(String) Initializes a new instance of the MinAggregator<TResult> class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.MaxAggregator-1.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.MaxAggregator-1.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.MaxAggregator-1.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.MaxAggregator-1.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.MinAggregator-1.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.MinAggregator-1.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.MinAggregator-1.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.MinAggregator-1.-ctor.html",
    "title": "MinAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "MinAggregator Constructor MinAggregator() Initializes a new instance of the MinAggregator<TResult> class. Declaration public MinAggregator() MinAggregator(String) Initializes a new instance of the MinAggregator<TResult> class. Declaration public MinAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.MinAggregator-1.html": {
    "href": "dev/api/Hazelcast.Aggregating.MinAggregator-1.html",
    "title": "MinAggregator<TResult> Class | Hazelcast .NET Documentation",
    "keywords": "MinAggregator<TResult> Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that returns the minimum input value. public sealed class MinAggregator<TResult> : AggregatorBase<TResult>, IAggregator<TResult>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase <TResult> MinAggregator<TResult> Implements IAggregator <TResult> IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<TResult>.AttributePath AggregatorBase<TResult>.ReadData(IObjectDataInput) AggregatorBase<TResult>.WriteData(IObjectDataOutput) AggregatorBase<TResult>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TResult The aggregated result type. Remarks Null input values are accepted. Constructors MinAggregator() Initializes a new instance of the MinAggregator<TResult> class. MinAggregator(String) Initializes a new instance of the MinAggregator<TResult> class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.MinAggregator-1.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.MinAggregator-1.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.MinAggregator-1.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.MinAggregator-1.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<TResult>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.ClassId.html": {
    "href": "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public override int ClassId { get; } Property Value Int32 The identifier of the class. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.-ctor.html": {
    "href": "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.-ctor.html",
    "title": "NumberAverageAggregator Constructor | Hazelcast .NET Documentation",
    "keywords": "NumberAverageAggregator Constructor NumberAverageAggregator() Initializes a new instance of the NumberAverageAggregator class. Declaration public NumberAverageAggregator() NumberAverageAggregator(String) Initializes a new instance of the NumberAverageAggregator class. Declaration public NumberAverageAggregator(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.html": {
    "href": "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.html",
    "title": "NumberAverageAggregator Class | Hazelcast .NET Documentation",
    "keywords": "NumberAverageAggregator Class Namespace: Hazelcast.Aggregating Assembly: Hazelcast.Net.dll Represents an aggregator that averages the input values. public sealed class NumberAverageAggregator : AggregatorBase<double>, IAggregator<double>, IAggregator, IIdentifiedDataSerializable Inheritance Object AggregatorBase < Double > NumberAverageAggregator Implements IAggregator < Double > IAggregator IIdentifiedDataSerializable Inherited Members AggregatorBase<Double>.AttributePath AggregatorBase<Double>.ReadData(IObjectDataInput) AggregatorBase<Double>.WriteData(IObjectDataOutput) AggregatorBase<Double>.FactoryId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Null input values are not accepted. Constructors NumberAverageAggregator() Initializes a new instance of the NumberAverageAggregator class. NumberAverageAggregator(String) Initializes a new instance of the NumberAverageAggregator class. Properties ClassId Gets the identifier of the class. Methods ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.ReadAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.ReadAggregatorData.html",
    "title": "ReadAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "ReadAggregatorData Method ReadAggregatorData(IObjectDataInput) Deserializes the aggregator by reading from an IObjectDataInput . Declaration protected override void ReadAggregatorData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.ReadAggregatorData(Hazelcast.Serialization.IObjectDataInput) Remarks The attribute path has already been deserialized."
  },
  "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.WriteAggregatorData.html": {
    "href": "dev/api/Hazelcast.Aggregating.NumberAverageAggregator.WriteAggregatorData.html",
    "title": "WriteAggregatorData Method | Hazelcast .NET Documentation",
    "keywords": "WriteAggregatorData Method WriteAggregatorData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration protected override void WriteAggregatorData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Overrides Hazelcast.Aggregating.AggregatorBase<System.Double>.WriteAggregatorData(Hazelcast.Serialization.IObjectDataOutput) Remarks The attribute path has already been serialized."
  },
  "dev/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html",
    "title": "CredentialsFactory Property | Hazelcast .NET Documentation",
    "keywords": "CredentialsFactory Property CredentialsFactory Gets the credentials factory service factory. Declaration public SingletonServiceFactory<ICredentialsFactory> CredentialsFactory { get; } Property Value SingletonServiceFactory < ICredentialsFactory >"
  },
  "dev/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html",
    "title": "AuthenticationOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "AuthenticationOptions Constructor AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Declaration public AuthenticationOptions()"
  },
  "dev/api/Hazelcast.Clustering.AuthenticationOptions.html": {
    "href": "dev/api/Hazelcast.Clustering.AuthenticationOptions.html",
    "title": "AuthenticationOptions Class | Hazelcast .NET Documentation",
    "keywords": "AuthenticationOptions Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents authentication options. public class AuthenticationOptions Inheritance Object AuthenticationOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Properties CredentialsFactory Gets the credentials factory service factory."
  },
  "dev/api/Hazelcast.Clustering.ClusterConnectionState.html": {
    "href": "dev/api/Hazelcast.Clustering.ClusterConnectionState.html",
    "title": "ClusterConnectionState Enum | Hazelcast .NET Documentation",
    "keywords": "ClusterConnectionState Enum Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Defines the possible states if the cluster connection. public enum ClusterConnectionState Fields Connected The cluster is connected. Connecting The cluster is connecting. Disconnected The cluster has disconnected and will not reconnect. NotConnected The cluster has not connected yet. Unknown Unknown (default). Extension Methods EnumExtensions.HasAll<ClusterConnectionState>(ClusterConnectionState) EnumExtensions.HasAny<ClusterConnectionState>(ClusterConnectionState)"
  },
  "dev/api/Hazelcast.Clustering.ClusterInstrumentation.ExceptionsInEventHandlersCount.html": {
    "href": "dev/api/Hazelcast.Clustering.ClusterInstrumentation.ExceptionsInEventHandlersCount.html",
    "title": "ExceptionsInEventHandlersCount Property | Hazelcast .NET Documentation",
    "keywords": "ExceptionsInEventHandlersCount Property ExceptionsInEventHandlersCount Declaration public int ExceptionsInEventHandlersCount { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Clustering.ClusterInstrumentation.html": {
    "href": "dev/api/Hazelcast.Clustering.ClusterInstrumentation.html",
    "title": "ClusterInstrumentation Class | Hazelcast .NET Documentation",
    "keywords": "ClusterInstrumentation Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll public class ClusterInstrumentation Inheritance Object ClusterInstrumentation Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties ExceptionsInEventHandlersCount MissedEventsCount"
  },
  "dev/api/Hazelcast.Clustering.ClusterInstrumentation.MissedEventsCount.html": {
    "href": "dev/api/Hazelcast.Clustering.ClusterInstrumentation.MissedEventsCount.html",
    "title": "MissedEventsCount Property | Hazelcast .NET Documentation",
    "keywords": "MissedEventsCount Property MissedEventsCount Declaration public int MissedEventsCount { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.Exception.html": {
    "href": "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.Exception.html",
    "title": "Exception Property | Hazelcast .NET Documentation",
    "keywords": "Exception Property Exception Gets the exception that was thrown by the event handler. Declaration public Exception Exception { get; } Property Value Exception"
  },
  "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.Handled.html": {
    "href": "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.Handled.html",
    "title": "Handled Property | Hazelcast .NET Documentation",
    "keywords": "Handled Property Handled Whether the exception has been handled by user code. Declaration public bool Handled { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.html": {
    "href": "dev/api/Hazelcast.Clustering.DistributedEventExceptionEventArgs.html",
    "title": "DistributedEventExceptionEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DistributedEventExceptionEventArgs Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents the event data corresponding to an exception thrown while handling a distributed event. public class DistributedEventExceptionEventArgs : EventArgs Inheritance Object EventArgs DistributedEventExceptionEventArgs Inherited Members EventArgs.Empty Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Exception Gets the exception that was thrown by the event handler. Handled Whether the exception has been handled by user code."
  },
  "dev/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html",
    "title": "HeartbeatOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "HeartbeatOptions Constructor HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Declaration public HeartbeatOptions()"
  },
  "dev/api/Hazelcast.Clustering.HeartbeatOptions.html": {
    "href": "dev/api/Hazelcast.Clustering.HeartbeatOptions.html",
    "title": "HeartbeatOptions Class | Hazelcast .NET Documentation",
    "keywords": "HeartbeatOptions Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents the heartbeat options public class HeartbeatOptions Inheritance Object HeartbeatOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Properties PeriodMilliseconds Gets or sets the heartbeat period. PingTimeoutMilliseconds Gets or sets the ping timeout (how long to wait when pinging a member). TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down)."
  },
  "dev/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html": {
    "href": "dev/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html",
    "title": "PeriodMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "PeriodMilliseconds Property PeriodMilliseconds Gets or sets the heartbeat period. Declaration public int PeriodMilliseconds { get; set; } Property Value Int32 Remarks Heartbeat will run periodically, and send a ping request to connections that have not been written to over the previous period."
  },
  "dev/api/Hazelcast.Clustering.HeartbeatOptions.PingTimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Clustering.HeartbeatOptions.PingTimeoutMilliseconds.html",
    "title": "PingTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "PingTimeoutMilliseconds Property PingTimeoutMilliseconds Gets or sets the ping timeout (how long to wait when pinging a member). Declaration public int PingTimeoutMilliseconds { get; set; } Property Value Int32 Remarks The timeout should be shorter that the period."
  },
  "dev/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html",
    "title": "TimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "TimeoutMilliseconds Property TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down). Declaration public int TimeoutMilliseconds { get; set; } Property Value Int32 Remarks Heartbeat will consider that connections that have not received data for the timeout duration, although they should have been pinged, are down. The timeout should be longer than the period."
  },
  "dev/api/Hazelcast.Clustering.html": {
    "href": "dev/api/Hazelcast.Clustering.html",
    "title": "Hazelcast.Clustering Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Clustering Namespace Classes AuthenticationOptions Represents authentication options. ClusterInstrumentation DistributedEventExceptionEventArgs Represents the event data corresponding to an exception thrown while handling a distributed event. HeartbeatOptions Represents the heartbeat options RetryStrategy Represents a retry strategy. Interfaces IClusterOptions Represents cluster-level options. Enums ClusterConnectionState Defines the possible states if the cluster connection."
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Authentication.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Authentication.html",
    "title": "Authentication Property | Hazelcast .NET Documentation",
    "keywords": "Authentication Property Authentication Gets the authentication options. Declaration AuthenticationOptions Authentication { get; } Property Value AuthenticationOptions"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.ClientName.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.ClientName.html",
    "title": "ClientName Property | Hazelcast .NET Documentation",
    "keywords": "ClientName Property ClientName Gets the client name. Declaration string ClientName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.ClientNamePrefix.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.ClientNamePrefix.html",
    "title": "ClientNamePrefix Property | Hazelcast .NET Documentation",
    "keywords": "ClientNamePrefix Property ClientNamePrefix Gets the client name prefix. Declaration string ClientNamePrefix { get; } Property Value String"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.ClusterName.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.ClusterName.html",
    "title": "ClusterName Property | Hazelcast .NET Documentation",
    "keywords": "ClusterName Property ClusterName Gets the cluster name. Declaration string ClusterName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Events.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Events.html",
    "title": "Events Property | Hazelcast .NET Documentation",
    "keywords": "Events Property Events Gets the events options. Declaration EventsOptions Events { get; } Property Value EventsOptions"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Heartbeat.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Heartbeat.html",
    "title": "Heartbeat Property | Hazelcast .NET Documentation",
    "keywords": "Heartbeat Property Heartbeat Gets the heartbeat options. Declaration HeartbeatOptions Heartbeat { get; } Property Value HeartbeatOptions"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.html",
    "title": "IClusterOptions Interface | Hazelcast .NET Documentation",
    "keywords": "IClusterOptions Interface Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents cluster-level options. public interface IClusterOptions Properties Authentication Gets the authentication options. ClientName Gets the client name. ClientNamePrefix Gets the client name prefix. ClusterName Gets the cluster name. Events Gets the events options. Heartbeat Gets the heartbeat options. Labels Gets the client labels. LoadBalancing Gets the load balancing options. Messaging Gets the messaging options. Networking Gets the networking options."
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Labels.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Labels.html",
    "title": "Labels Property | Hazelcast .NET Documentation",
    "keywords": "Labels Property Labels Gets the client labels. Declaration ISet<string> Labels { get; } Property Value ISet < String >"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.LoadBalancing.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.LoadBalancing.html",
    "title": "LoadBalancing Property | Hazelcast .NET Documentation",
    "keywords": "LoadBalancing Property LoadBalancing Gets the load balancing options. Declaration LoadBalancingOptions LoadBalancing { get; } Property Value LoadBalancingOptions"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Messaging.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Messaging.html",
    "title": "Messaging Property | Hazelcast .NET Documentation",
    "keywords": "Messaging Property Messaging Gets the messaging options. Declaration MessagingOptions Messaging { get; } Property Value MessagingOptions"
  },
  "dev/api/Hazelcast.Clustering.IClusterOptions.Networking.html": {
    "href": "dev/api/Hazelcast.Clustering.IClusterOptions.Networking.html",
    "title": "Networking Property | Hazelcast .NET Documentation",
    "keywords": "Networking Property Networking Gets the networking options. Declaration NetworkingOptions Networking { get; } Property Value NetworkingOptions"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.html",
    "title": "Hazelcast.Clustering.LoadBalancing Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Clustering.LoadBalancing Namespace Classes LoadBalancerBase Provides a base class for load balancers. LoadBalancingOptions Represents the load balancing options. RandomLoadBalancer Represents a random load balancer. RoundRobinLoadBalancer Represents a round-robin load balancer. StaticLoadBalancer Represents a static load balancer. Interfaces ILoadBalancer Defines a service that can load-balance requests to different members of a cluster."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration int Count { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration Guid GetMember() Returns Guid The unique identifier of the selected member."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html",
    "title": "ILoadBalancer Interface | Hazelcast .NET Documentation",
    "keywords": "ILoadBalancer Interface Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Defines a service that can load-balance requests to different members of a cluster. public interface ILoadBalancer Properties Count Gets the number of members. Methods GetMember() Selects a member. NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.NotifyMembers.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.NotifyMembers.html",
    "title": "NotifyMembers Method | Hazelcast .NET Documentation",
    "keywords": "NotifyMembers Method NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members. Declaration void NotifyMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Remarks The new set of members fully replace existing members."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration public virtual int Count { get; } Property Value Int32 Implements ILoadBalancer.Count"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public abstract Guid GetMember() Returns Guid The unique identifier of the selected member. Implements ILoadBalancer.GetMember()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html",
    "title": "LoadBalancerBase Class | Hazelcast .NET Documentation",
    "keywords": "LoadBalancerBase Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Provides a base class for load balancers. public abstract class LoadBalancerBase : ILoadBalancer Inheritance Object LoadBalancerBase RandomLoadBalancer RoundRobinLoadBalancer StaticLoadBalancer Implements ILoadBalancer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Count Gets the number of members. Members Gets the members. Methods GetMember() Selects a member. NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html",
    "title": "Members Property | Hazelcast .NET Documentation",
    "keywords": "Members Property Members Gets the members. Declaration protected List<Guid> Members { get; } Property Value List < Guid >"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.NotifyMembers.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.NotifyMembers.html",
    "title": "NotifyMembers Method | Hazelcast .NET Documentation",
    "keywords": "NotifyMembers Method NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members. Declaration public virtual void NotifyMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Implements ILoadBalancer.NotifyMembers(IEnumerable<Guid>) Remarks The new set of members fully replace existing members."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.-ctor.html",
    "title": "LoadBalancingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "LoadBalancingOptions Constructor LoadBalancingOptions() Initializes a new instance of the LoadBalancingOptions class. Declaration public LoadBalancingOptions()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.html",
    "title": "LoadBalancingOptions Class | Hazelcast .NET Documentation",
    "keywords": "LoadBalancingOptions Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents the load balancing options. public class LoadBalancingOptions Inheritance Object LoadBalancingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors LoadBalancingOptions() Initializes a new instance of the LoadBalancingOptions class. Properties LoadBalancer Gets the service factory for ILoadBalancer ."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.LoadBalancer.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.LoadBalancingOptions.LoadBalancer.html",
    "title": "LoadBalancer Property | Hazelcast .NET Documentation",
    "keywords": "LoadBalancer Property LoadBalancer Gets the service factory for ILoadBalancer . Declaration public SingletonServiceFactory<ILoadBalancer> LoadBalancer { get; } Property Value SingletonServiceFactory < ILoadBalancer >"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html",
    "title": "RandomLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "RandomLoadBalancer Constructor RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Declaration public RandomLoadBalancer()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member. Overrides LoadBalancerBase.GetMember()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html",
    "title": "RandomLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "RandomLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a random load balancer. public class RandomLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase RandomLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.NotifyMembers(IEnumerable<Guid>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A random load balancer returns random members. Constructors RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Methods GetMember() Selects a member."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html",
    "title": "RoundRobinLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "RoundRobinLoadBalancer Constructor RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Declaration public RoundRobinLoadBalancer()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member. Overrides LoadBalancerBase.GetMember()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html",
    "title": "RoundRobinLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "RoundRobinLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a round-robin load balancer. public class RoundRobinLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase RoundRobinLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.NotifyMembers(IEnumerable<Guid>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A round-robin load balancer returns members one after another. Constructors RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Methods GetMember() Selects a member."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration public override int Count { get; } Property Value Int32 Overrides LoadBalancerBase.Count"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html",
    "title": "StaticLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "StaticLoadBalancer Constructor StaticLoadBalancer(IReadOnlyDictionary<String, String>) Initializes a new instance of the RandomLoadBalancer class. Declaration public StaticLoadBalancer(IReadOnlyDictionary<string, string> args) Parameters IReadOnlyDictionary < String , String > args Arguments. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Declaration public StaticLoadBalancer(Guid memberId) Parameters Guid memberId The member identifier."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member. Overrides LoadBalancerBase.GetMember()"
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html",
    "title": "StaticLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "StaticLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a static load balancer. public class StaticLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase StaticLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A static load balancer knows only one member and always return that member. Constructors StaticLoadBalancer(IReadOnlyDictionary<String, String>) Initializes a new instance of the RandomLoadBalancer class. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Properties Count Gets the number of members. Methods GetMember() Selects a member. NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members."
  },
  "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.NotifyMembers.html": {
    "href": "dev/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.NotifyMembers.html",
    "title": "NotifyMembers Method | Hazelcast .NET Documentation",
    "keywords": "NotifyMembers Method NotifyMembers(IEnumerable<Guid>) Notifies the load balancer of a new set of members. Declaration public override void NotifyMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Overrides LoadBalancerBase.NotifyMembers(IEnumerable<Guid>) Remarks The new set of members fully replace existing members."
  },
  "dev/api/Hazelcast.Clustering.RetryStrategy.-ctor.html": {
    "href": "dev/api/Hazelcast.Clustering.RetryStrategy.-ctor.html",
    "title": "RetryStrategy Constructor | Hazelcast .NET Documentation",
    "keywords": "RetryStrategy Constructor RetryStrategy(String, RetryOptions, ILoggerFactory) Initializes a new instance of the RetryStrategy class. Declaration public RetryStrategy(string action, RetryOptions options, ILoggerFactory loggerFactory) Parameters String action The description of the action. RetryOptions options Configuration. ILoggerFactory loggerFactory A logger factory. RetryStrategy(String, Int32, Int32, Double, Int64, Double, ILoggerFactory) Initializes a new instance of the RetryStrategy class. Declaration public RetryStrategy(string action, int initialBackOff, int maxBackOff, double multiplier, long timeout, double jitter, ILoggerFactory loggerFactory) Parameters String action The description of the action. Int32 initialBackOff The initial back-off value in milliseconds. Int32 maxBackOff The maximum back-off value in milliseconds. Double multiplier The multiplier. Int64 timeout The timeout in milliseconds. Double jitter A jitter factor. ILoggerFactory loggerFactory A logger factory."
  },
  "dev/api/Hazelcast.Clustering.RetryStrategy.html": {
    "href": "dev/api/Hazelcast.Clustering.RetryStrategy.html",
    "title": "RetryStrategy Class | Hazelcast .NET Documentation",
    "keywords": "RetryStrategy Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents a retry strategy. public class RetryStrategy : IRetryStrategy Inheritance Object RetryStrategy Implements IRetryStrategy Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Controls retries with a back-off mechanism. Constructors RetryStrategy(String, RetryOptions, ILoggerFactory) Initializes a new instance of the RetryStrategy class. RetryStrategy(String, Int32, Int32, Double, Int64, Double, ILoggerFactory) Initializes a new instance of the RetryStrategy class. Methods Restart() Restarts the strategy. WaitAsync(CancellationToken) Waits before retrying."
  },
  "dev/api/Hazelcast.Clustering.RetryStrategy.Restart.html": {
    "href": "dev/api/Hazelcast.Clustering.RetryStrategy.Restart.html",
    "title": "Restart Method | Hazelcast .NET Documentation",
    "keywords": "Restart Method Restart() Restarts the strategy. Declaration public void Restart() Implements IRetryStrategy.Restart()"
  },
  "dev/api/Hazelcast.Clustering.RetryStrategy.WaitAsync.html": {
    "href": "dev/api/Hazelcast.Clustering.RetryStrategy.WaitAsync.html",
    "title": "WaitAsync Method | Hazelcast .NET Documentation",
    "keywords": "WaitAsync Method WaitAsync(CancellationToken) Waits before retrying. Declaration public ValueTask<bool> WaitAsync(CancellationToken cancellationToken) Parameters CancellationToken cancellationToken A cancellation token. Returns ValueTask < Boolean > Whether it is ok to retry. Implements IRetryStrategy.WaitAsync(CancellationToken) Remarks Returns false when the timeout has been reached."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddDefaults.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddDefaults.html",
    "title": "AddDefaults Method | Hazelcast .NET Documentation",
    "keywords": "AddDefaults Method AddDefaults(IConfigurationBuilder, String[], String) Adds the default IConfigurationProvider instances. Declaration public static IConfigurationBuilder AddDefaults(this IConfigurationBuilder configurationBuilder, string[] args, string environmentName = null) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args The command line args. String environmentName An optional environment name. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for appsettings.json, environment variables and command line arguments. This is only useful in non-hosted environments where a configuration builder is created from scratch. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production ."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html",
    "title": "AddHazelcast Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcast Method AddHazelcast(IConfigurationBuilder, String[], IEnumerable<KeyValuePair<String, String>>, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration values from various sources. Declaration public static IConfigurationBuilder AddHazelcast(this IConfigurationBuilder configurationBuilder, string[] args, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args The command line args. IEnumerable < KeyValuePair < String , String >> keyValues The optional key-value configuration pairs. String optionsFilePath The optional path to the options file. String optionsFileName String environmentName An optional environment name. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for hazelcast-specific sources. Does not add default support for other sources. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production ."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html",
    "title": "AddHazelcastCommandLine Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastCommandLine Method AddHazelcastCommandLine(IConfigurationBuilder, String[]) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. Declaration public static IConfigurationBuilder AddHazelcastCommandLine(this IConfigurationBuilder configurationBuilder, string[] args) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for hazelcast.x.y arguments that do not respect the standard hazelcast ❌ y pattern. Does not add default support for command line arguments."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html",
    "title": "AddHazelcastEnvironmentVariables Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastEnvironmentVariables Method AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. Declaration public static IConfigurationBuilder AddHazelcastEnvironmentVariables(this IConfigurationBuilder configurationBuilder) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for the hazelcast.x.y variables that do not respect the standard hazelcast__x__y pattern. Does not add default support for environment variables."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html",
    "title": "AddHazelcastFile Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastFile Method AddHazelcastFile(IConfigurationBuilder, String, String, String) Declaration public static IConfigurationBuilder AddHazelcastFile(this IConfigurationBuilder configurationBuilder, string filePath, string fileName, string environmentName) Parameters IConfigurationBuilder configurationBuilder String filePath String fileName String environmentName Returns IConfigurationBuilder"
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html",
    "title": "AddHazelcastInMemoryCollection Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastInMemoryCollection Method AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<String, String>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection. Declaration public static IConfigurationBuilder AddHazelcastInMemoryCollection(this IConfigurationBuilder configurationBuilder, IEnumerable<KeyValuePair<string, string>> initialData) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. IEnumerable < KeyValuePair < String , String >> initialData Returns IConfigurationBuilder The IConfigurationBuilder ."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html",
    "title": "ConfigurationBuilderExtensions Class | Hazelcast .NET Documentation",
    "keywords": "ConfigurationBuilderExtensions Class Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Provides extension methods for the IConfigurationBuilder interface. public static class ConfigurationBuilderExtensions Inheritance Object ConfigurationBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods AddDefaults(IConfigurationBuilder, String[], String) Adds the default IConfigurationProvider instances. AddHazelcast(IConfigurationBuilder, String[], IEnumerable<KeyValuePair<String, String>>, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration values from various sources. AddHazelcastCommandLine(IConfigurationBuilder, String[]) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. AddHazelcastFile(IConfigurationBuilder, String, String, String) AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<String, String>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationException.-ctor.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationException.-ctor.html",
    "title": "ConfigurationException Constructor | Hazelcast .NET Documentation",
    "keywords": "ConfigurationException Constructor ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() ConfigurationException(String) Initializes a new instance of the ConfigurationException class with a specified error message. Declaration public ConfigurationException(string message) Parameters String message The message that describes the error. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Configuration.ConfigurationException.html": {
    "href": "dev/api/Hazelcast.Configuration.ConfigurationException.html",
    "title": "ConfigurationException Class | Hazelcast .NET Documentation",
    "keywords": "ConfigurationException Class Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Represents the exception that is throw when the Hazelcast configuration is incorrect. [Serializable] public sealed class ConfigurationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ConfigurationException() Initializes a new instance of the ConfigurationException class. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. ConfigurationException(String) Initializes a new instance of the ConfigurationException class with a specified error message. ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Configuration.html": {
    "href": "dev/api/Hazelcast.Configuration.html",
    "title": "Hazelcast.Configuration Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Configuration Namespace Classes ConfigurationBuilderExtensions Provides extension methods for the IConfigurationBuilder interface. ConfigurationException Represents the exception that is throw when the Hazelcast configuration is incorrect."
  },
  "dev/api/Hazelcast.Core.AsyncContext.CurrentContext.html": {
    "href": "dev/api/Hazelcast.Core.AsyncContext.CurrentContext.html",
    "title": "CurrentContext Property | Hazelcast .NET Documentation",
    "keywords": "CurrentContext Property CurrentContext Gets the current context. Declaration public static AsyncContext CurrentContext { get; } Property Value AsyncContext"
  },
  "dev/api/Hazelcast.Core.AsyncContext.html": {
    "href": "dev/api/Hazelcast.Core.AsyncContext.html",
    "title": "AsyncContext Class | Hazelcast .NET Documentation",
    "keywords": "AsyncContext Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. public sealed class AsyncContext Inheritance Object AsyncContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties CurrentContext Gets the current context. Id Gets the unique identifier for the current context. InTransaction Gets or sets a value indicating whether the current asynchronous context is in a transaction."
  },
  "dev/api/Hazelcast.Core.AsyncContext.Id.html": {
    "href": "dev/api/Hazelcast.Core.AsyncContext.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the unique identifier for the current context. Declaration public long Id { get; } Property Value Int64"
  },
  "dev/api/Hazelcast.Core.AsyncContext.InTransaction.html": {
    "href": "dev/api/Hazelcast.Core.AsyncContext.InTransaction.html",
    "title": "InTransaction Property | Hazelcast .NET Documentation",
    "keywords": "InTransaction Property InTransaction Gets or sets a value indicating whether the current asynchronous context is in a transaction. Declaration public bool InTransaction { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Core.Attempt.-ctor.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.-ctor.html",
    "title": "Attempt Constructor | Hazelcast .NET Documentation",
    "keywords": "Attempt Constructor Attempt(Boolean) Initializes a new instance of the Attempt struct. Declaration public Attempt(bool success) Parameters Boolean success Whether the attempt succeeded."
  },
  "dev/api/Hazelcast.Core.Attempt.Fail.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.Fail.html",
    "title": "Fail Method | Hazelcast .NET Documentation",
    "keywords": "Fail Method Fail<TResult>(TResult, Exception) Creates a failed attempt. Declaration public static Attempt<TResult> Fail<TResult>(TResult value, Exception exception = null) Parameters TResult value The value of the result. Exception exception An optional captured exception. Returns Attempt <TResult> A failed attempt. Type Parameters TResult The type of the result. Fail<TResult>(Exception) Creates a failed attempt. Declaration public static Attempt<TResult> Fail<TResult>(Exception exception) Parameters Exception exception A captured exception. Returns Attempt <TResult> A failed attempt. Type Parameters TResult The type of the result. Fail<TResult>() Creates a failed attempt. Declaration public static Attempt<TResult> Fail<TResult>() Returns Attempt <TResult> A failed attempt. Type Parameters TResult The type of the result."
  },
  "dev/api/Hazelcast.Core.Attempt.Failed.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.Failed.html",
    "title": "Failed Property | Hazelcast .NET Documentation",
    "keywords": "Failed Property Failed Represents a failed attempt. Declaration public static Attempt Failed { get; } Property Value Attempt"
  },
  "dev/api/Hazelcast.Core.Attempt.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.html",
    "title": "Attempt Struct | Hazelcast .NET Documentation",
    "keywords": "Attempt Struct Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Creates instances of the Attempt<TResult> struct. public struct Attempt Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Constructors Attempt(Boolean) Initializes a new instance of the Attempt struct. Properties Failed Represents a failed attempt. Success Gets a value indicating whether the attempt succeeded. Methods Fail<TResult>() Creates a failed attempt. Fail<TResult>(TResult, Exception) Creates a failed attempt. Fail<TResult>(Exception) Creates a failed attempt. If<TResult>(Boolean, TResult) Creates an attempt based on a condition. If<TResult>(Boolean, TResult, TResult) Creates an attempt based on a condition. Succeed<TResult>(TResult) Creates a successful attempt with a result."
  },
  "dev/api/Hazelcast.Core.Attempt.If.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.If.html",
    "title": "If Method | Hazelcast .NET Documentation",
    "keywords": "If Method If<TResult>(Boolean, TResult) Creates an attempt based on a condition. Declaration public static Attempt<TResult> If<TResult>(bool condition, TResult value) Parameters Boolean condition Whether the attempt is successful. TResult value The value of the result. Returns Attempt <TResult> A successful attempt, if condition is true ; otherwise a failed attempt. Type Parameters TResult The type of the result. If<TResult>(Boolean, TResult, TResult) Creates an attempt based on a condition. Declaration public static Attempt<TResult> If<TResult>(bool condition, TResult value, TResult failedValue) Parameters Boolean condition Whether the attempt is successful. TResult value The value of the result when the attempt is successful. TResult failedValue The value of the result when the attempt failed. Returns Attempt <TResult> A successful attempt, if condition is true ; otherwise a failed attempt. Type Parameters TResult The type of the result."
  },
  "dev/api/Hazelcast.Core.Attempt.Succeed.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.Succeed.html",
    "title": "Succeed Method | Hazelcast .NET Documentation",
    "keywords": "Succeed Method Succeed<TResult>(TResult) Creates a successful attempt with a result. Declaration public static Attempt<TResult> Succeed<TResult>(TResult value) Parameters TResult value The value of the result. Returns Attempt <TResult> A successful attempt. Type Parameters TResult The type of the result."
  },
  "dev/api/Hazelcast.Core.Attempt.Success.html": {
    "href": "dev/api/Hazelcast.Core.Attempt.Success.html",
    "title": "Success Property | Hazelcast .NET Documentation",
    "keywords": "Success Property Success Gets a value indicating whether the attempt succeeded. Declaration public bool Success { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Core.Attempt-1.Deconstruct.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.Deconstruct.html",
    "title": "Deconstruct Method | Hazelcast .NET Documentation",
    "keywords": "Deconstruct Method Deconstruct(out Boolean, out TResult) Deconstruct an attempt. Declaration public void Deconstruct(out bool success, out TResult value) Parameters Boolean success Whether the attempt succeeded. TResult value The value of the result."
  },
  "dev/api/Hazelcast.Core.Attempt-1.Exception.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.Exception.html",
    "title": "Exception Property | Hazelcast .NET Documentation",
    "keywords": "Exception Property Exception Gets a captured exception. Declaration public Exception Exception { get; } Property Value Exception"
  },
  "dev/api/Hazelcast.Core.Attempt-1.Failed.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.Failed.html",
    "title": "Failed Property | Hazelcast .NET Documentation",
    "keywords": "Failed Property Failed Represents a failed attempt with no result and no exception. Declaration public static Attempt<TResult> Failed { get; } Property Value Attempt <TResult>"
  },
  "dev/api/Hazelcast.Core.Attempt-1.HasException.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.HasException.html",
    "title": "HasException Property | Hazelcast .NET Documentation",
    "keywords": "HasException Property HasException Gets a value indicating whether the attempt contains an exception. Declaration public bool HasException { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Core.Attempt-1.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.html",
    "title": "Attempt<TResult> Struct | Hazelcast .NET Documentation",
    "keywords": "Attempt<TResult> Struct Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the result of attempting an operation to produce a result. public struct Attempt<TResult> Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Type Parameters TResult The type of the result. Remarks An Attempt<TResult> is either successful or failed, it carries a TResult result, and an exception. Properties Exception Gets a captured exception. Failed Represents a failed attempt with no result and no exception. HasException Gets a value indicating whether the attempt contains an exception. Success Gets a value indicating whether the attempt succeeded. Value Gets the value of the result. Methods Deconstruct(out Boolean, out TResult) Deconstruct an attempt. ValueOr(TResult) Gets the value of the result, if successful, else another value. ValueOrDefault() Gets the value of the result, if successful, else the default value for TResult . Operators Implicit(TResult to Attempt<TResult>) Implicitly converts a result value into a successful attempts. Implicit(Attempt to Attempt<TResult>) Implicitly converts a non-generic attempt into a generic one. Implicit(Attempt<TResult> to TResult) Implicitly converts an attempt into its result. Implicit(Attempt<TResult> to Boolean) Implicitly converts an attempt into a boolean."
  },
  "dev/api/Hazelcast.Core.Attempt-1.op_Implicit.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.op_Implicit.html",
    "title": "Implicit Operator | Hazelcast .NET Documentation",
    "keywords": "Implicit Operator Implicit(Attempt<TResult> to Boolean) Implicitly converts an attempt into a boolean. Declaration public static implicit operator bool (Attempt<TResult> attempt) Parameters Attempt <TResult> attempt The attempt. Returns Boolean Implicit(Attempt<TResult> to TResult) Implicitly converts an attempt into its result. Declaration public static implicit operator TResult(Attempt<TResult> attempt) Parameters Attempt <TResult> attempt The attempt. Returns TResult Implicit(Attempt to Attempt<TResult>) Implicitly converts a non-generic attempt into a generic one. Declaration public static implicit operator Attempt<TResult>(Attempt attempt) Parameters Attempt attempt The attempt. Returns Attempt <TResult> Implicit(TResult to Attempt<TResult>) Implicitly converts a result value into a successful attempts. Declaration public static implicit operator Attempt<TResult>(TResult result) Parameters TResult result The result value. Returns Attempt <TResult>"
  },
  "dev/api/Hazelcast.Core.Attempt-1.Success.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.Success.html",
    "title": "Success Property | Hazelcast .NET Documentation",
    "keywords": "Success Property Success Gets a value indicating whether the attempt succeeded. Declaration public bool Success { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Core.Attempt-1.Value.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value of the result. Declaration public TResult Value { get; } Property Value TResult"
  },
  "dev/api/Hazelcast.Core.Attempt-1.ValueOr.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.ValueOr.html",
    "title": "ValueOr Method | Hazelcast .NET Documentation",
    "keywords": "ValueOr Method ValueOr(TResult) Gets the value of the result, if successful, else another value. Declaration public TResult ValueOr(TResult other) Parameters TResult other The other value. Returns TResult The value of the result, if successful, else the specified value. Remarks If not successful, the attempt may still carry a value, but this method does not return it. To check the value, regardless of success, use the Value property."
  },
  "dev/api/Hazelcast.Core.Attempt-1.ValueOrDefault.html": {
    "href": "dev/api/Hazelcast.Core.Attempt-1.ValueOrDefault.html",
    "title": "ValueOrDefault Method | Hazelcast .NET Documentation",
    "keywords": "ValueOrDefault Method ValueOrDefault() Gets the value of the result, if successful, else the default value for TResult . Declaration public TResult ValueOrDefault() Returns TResult The value of the result, if successful, else the default value for TResult . Remarks If not successful, the attempt may still carry a value, but this method does not return it. To check the value, regardless of success, use the Value property."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.Fill.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.Fill.html",
    "title": "Fill Method | Hazelcast .NET Documentation",
    "keywords": "Fill Method Fill<T>(ref ReadOnlySequence<T>, Span<T>) Copies a sequence of T to a span of T . Declaration public static void Fill<T>(this ref ReadOnlySequence<T> source, Span<T> destination) Parameters ReadOnlySequence <T> source The sequence of T to copy from. Span <T> destination The span of T to copy to. Type Parameters T The type of the items in the sequence and span. Remarks There must be enough items in the sequence to fill the span. There can be more items in the sequence than in the span, and extra items will be ignored. Slices the sequence of the used items. Fill<T>(Span<T>, ref ReadOnlySequence<T>) Fills a span of T from a sequence. Declaration public static void Fill<T>(this Span<T> destination, ref ReadOnlySequence<T> source) Parameters Span <T> destination The span of T to copy to. ReadOnlySequence <T> source The sequence of T to copy from. Type Parameters T The type of the items in the sequence and span. Remarks There must be enough items in the sequence to fill the span. There can be more items in the sequence than in the span, and extra items will be ignored. Slices the sequence of the used items."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.html",
    "title": "BytesExtensions Class | Hazelcast .NET Documentation",
    "keywords": "BytesExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods to byte buffers. public static class BytesExtensions Inheritance Object BytesExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields SizeOfBool Gets the size of a Boolean value in arrays or sequences of bytes. SizeOfByte Gets the size of a Byte value in arrays or sequences of bytes. SizeOfChar Gets the size of a Char value in arrays or sequences of bytes. SizeOfDecimal Gets the size of a Decimal value in arrays or sequences of bytes. SizeOfDouble Gets the size of a Double value in arrays or sequences of bytes. SizeOfFloat Gets the size of a Single value in arrays or sequences of bytes. SizeOfGuid Gets the size of a Guid value in arrays or sequences of bytes. SizeOfInt Gets the size of an Int32 value in arrays or sequences of bytes. SizeOfLong Gets the size of a Int64 value in arrays or sequences of bytes. SizeOfShort Gets the size of a Int16 value in arrays or sequences of bytes. SizeOfUnsignedInt Gets the size of an UInt32 value in arrays or sequences of bytes. SizeOfUnsignedLong Gets the size of an UInt64 value in arrays or sequences of bytes. SizeOfUnsignedShort Gets the size of an UInt16 value in arrays or sequences of bytes. Methods Fill<T>(ref ReadOnlySequence<T>, Span<T>) Copies a sequence of T to a span of T . Fill<T>(Span<T>, ref ReadOnlySequence<T>) Fills a span of T from a sequence. ReadBool(Byte[], Int32) Reads a Boolean value from an array of bytes. ReadBoolL(Byte[], Int32) ReadByte(Byte[], Int32) Reads a Byte value from an array of bytes. ReadByteL(Byte[], Int32) ReadChar(Byte[], Int32, Endianness) Reads a Char value from an array of bytes. ReadDouble(Byte[], Int32, Endianness) Reads a Double value from an array of bytes. ReadFloat(Byte[], Int32, Endianness) Reads a Single value from an array of bytes. ReadGuid(Byte[], Int32) Reads a Guid value from an array of bytes. ReadGuidL(Byte[], Int32) ReadInt(ref ReadOnlySequence<Byte>, Endianness) Reads an Int32 value from a sequence of bytes, and slices the sequence accordingly. ReadInt(Byte[], Int32, Endianness) Reads an Int32 value from an array of bytes. ReadInt(ReadOnlySpan<Byte>, Endianness) Reads an Int32 value from a span of bytes. ReadIntL(Byte[], Int32) ReadLong(Byte[], Int32, Endianness) Reads a Int64 value from an array of bytes. ReadLongL(Byte[], Int32) ReadShort(Byte[], Int32, Endianness) Reads a Int16 value from an array of bytes. ReadShort(ReadOnlySpan<Byte>, Endianness) Reads a Int16 value from a span of bytes. ReadUShort(ref ReadOnlySequence<Byte>, Endianness) Reads an UInt16 value from a sequence of bytes, and slices the sequence accordingly. ReadUShort(Byte[], Int32, Endianness) Reads an UInt16 value from an array of bytes. ReadUShort(ReadOnlySpan<Byte>, Endianness) Reads an UInt16 value from a span of bytes. ReadUtf8Char(Byte[], ref Int32) Reads a Char value encoded on 1, 2 or 3 bytes from an array of bytes. WriteBool(Byte[], Int32, Boolean) Writes a Boolean value to an array of bytes. WriteBoolL(Byte[], Int32, Boolean) WriteByte(Byte[], Int32, Byte) Writes a Byte value to an array of bytes. WriteByteL(Byte[], Int32, Byte) WriteChar(Byte[], Int32, Char, Endianness) Writes a Char value to an array of bytes. WriteDouble(Byte[], Int32, Double, Endianness) Writes a Double value to an array of bytes. WriteFloat(Byte[], Int32, Single, Endianness) Writes a Single value to an array of bytes. WriteGuid(Byte[], Int32, Guid) Writes a Guid value to an array of bytes. WriteGuidL(Byte[], Int32, Guid) WriteInt(Byte[], Int32, Enum, Endianness) Writes an Int32 enum value to an array of bytes. WriteInt(Byte[], Int32, Int32, Endianness) Writes an Int32 value to an array of bytes. WriteIntL(Byte[], Int32, Enum) WriteIntL(Byte[], Int32, Int32) WriteLong(Byte[], Int32, Int64, Endianness) Writes a Int64 value to an array of bytes. WriteLongL(Byte[], Int32, Int64) WriteShort(Byte[], Int32, Int16, Endianness) Writes a Int16 value to an array of bytes. WriteUShort(Byte[], Int32, UInt16, Endianness) Writes an UInt16 value to an array of bytes. WriteUtf8Char(Byte[], ref Int32, Char) Writes a Char value to an array of bytes, encoded on 1, 2 or 3 bytes."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadBool.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadBool.html",
    "title": "ReadBool Method | Hazelcast .NET Documentation",
    "keywords": "ReadBool Method ReadBool(Byte[], Int32) Reads a Boolean value from an array of bytes. Declaration public static bool ReadBool(this byte[] bytes, int position) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Returns Boolean The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadBoolL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadBoolL.html",
    "title": "ReadBoolL Method | Hazelcast .NET Documentation",
    "keywords": "ReadBoolL Method ReadBoolL(Byte[], Int32) Declaration public static bool ReadBoolL(this byte[] bytes, int position) Parameters Byte [] bytes Int32 position Returns Boolean"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadByte.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte(Byte[], Int32) Reads a Byte value from an array of bytes. Declaration public static byte ReadByte(this byte[] bytes, int position) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Returns Byte The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadByteL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadByteL.html",
    "title": "ReadByteL Method | Hazelcast .NET Documentation",
    "keywords": "ReadByteL Method ReadByteL(Byte[], Int32) Declaration public static byte ReadByteL(this byte[] bytes, int position) Parameters Byte [] bytes Int32 position Returns Byte"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadChar.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar(Byte[], Int32, Endianness) Reads a Char value from an array of bytes. Declaration public static char ReadChar(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Char The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadDouble.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble(Byte[], Int32, Endianness) Reads a Double value from an array of bytes. Declaration public static double ReadDouble(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Double The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadFloat.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat(Byte[], Int32, Endianness) Reads a Single value from an array of bytes. Declaration public static float ReadFloat(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Single The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadGuid.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadGuid.html",
    "title": "ReadGuid Method | Hazelcast .NET Documentation",
    "keywords": "ReadGuid Method ReadGuid(Byte[], Int32) Reads a Guid value from an array of bytes. Declaration public static Guid ReadGuid(this byte[] bytes, int position) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Returns Guid"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadGuidL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadGuidL.html",
    "title": "ReadGuidL Method | Hazelcast .NET Documentation",
    "keywords": "ReadGuidL Method ReadGuidL(Byte[], Int32) Declaration public static Guid ReadGuidL(this byte[] bytes, int position) Parameters Byte [] bytes Int32 position Returns Guid"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadInt.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt(Byte[], Int32, Endianness) Reads an Int32 value from an array of bytes. Declaration public static int ReadInt(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Int32 The value. ReadInt(ref ReadOnlySequence<Byte>, Endianness) Reads an Int32 value from a sequence of bytes, and slices the sequence accordingly. Declaration public static int ReadInt(ref ReadOnlySequence<byte> bytes, Endianness endianness = Endianness.Unspecified) Parameters ReadOnlySequence < Byte > bytes The sequence of bytes to read from. Endianness endianness The endianness. Returns Int32 The value. ReadInt(ReadOnlySpan<Byte>, Endianness) Reads an Int32 value from a span of bytes. Declaration public static int ReadInt(this ReadOnlySpan<byte> bytes, Endianness endianness = Endianness.Unspecified) Parameters ReadOnlySpan < Byte > bytes The span of bytes to read from. Endianness endianness The endianness. Returns Int32 The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadIntL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadIntL.html",
    "title": "ReadIntL Method | Hazelcast .NET Documentation",
    "keywords": "ReadIntL Method ReadIntL(Byte[], Int32) Declaration public static int ReadIntL(this byte[] bytes, int position) Parameters Byte [] bytes Int32 position Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadLong.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong(Byte[], Int32, Endianness) Reads a Int64 value from an array of bytes. Declaration public static long ReadLong(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Int64 The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadLongL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadLongL.html",
    "title": "ReadLongL Method | Hazelcast .NET Documentation",
    "keywords": "ReadLongL Method ReadLongL(Byte[], Int32) Declaration public static long ReadLongL(this byte[] bytes, int position) Parameters Byte [] bytes Int32 position Returns Int64"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort(Byte[], Int32, Endianness) Reads a Int16 value from an array of bytes. Declaration public static short ReadShort(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns Int16 The value. ReadShort(ReadOnlySpan<Byte>, Endianness) Reads a Int16 value from a span of bytes. Declaration public static short ReadShort(this ReadOnlySpan<byte> bytes, Endianness endianness = Endianness.Unspecified) Parameters ReadOnlySpan < Byte > bytes The span of bytes to read from. Endianness endianness The endianness. Returns Int16 The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadUShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadUShort.html",
    "title": "ReadUShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadUShort Method ReadUShort(Byte[], Int32, Endianness) Reads an UInt16 value from an array of bytes. Declaration public static ushort ReadUShort(this byte[] bytes, int position, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Endianness endianness The endianness. Returns UInt16 The value. ReadUShort(ref ReadOnlySequence<Byte>, Endianness) Reads an UInt16 value from a sequence of bytes, and slices the sequence accordingly. Declaration public static ushort ReadUShort(ref ReadOnlySequence<byte> bytes, Endianness endianness = Endianness.Unspecified) Parameters ReadOnlySequence < Byte > bytes The sequence of bytes to read from. Endianness endianness The endianness. Returns UInt16 The value. ReadUShort(ReadOnlySpan<Byte>, Endianness) Reads an UInt16 value from a span of bytes. Declaration public static ushort ReadUShort(this ReadOnlySpan<byte> bytes, Endianness endianness = Endianness.Unspecified) Parameters ReadOnlySpan < Byte > bytes The span of bytes to read from. Endianness endianness The endianness. Returns UInt16 The value."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.ReadUtf8Char.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.ReadUtf8Char.html",
    "title": "ReadUtf8Char Method | Hazelcast .NET Documentation",
    "keywords": "ReadUtf8Char Method ReadUtf8Char(Byte[], ref Int32) Reads a Char value encoded on 1, 2 or 3 bytes from an array of bytes. Declaration public static char ReadUtf8Char(this byte[] bytes, ref int position) Parameters Byte [] bytes The array of bytes to read from. Int32 position The position in the array where the value should be read. Returns Char The value. Remarks The position is incremented with the number of bytes read."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfBool.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfBool.html",
    "title": "SizeOfBool Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfBool Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Boolean value in arrays or sequences of bytes. public const int SizeOfBool = 1 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfByte.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfByte.html",
    "title": "SizeOfByte Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfByte Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Byte value in arrays or sequences of bytes. public const int SizeOfByte = 1 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfChar.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfChar.html",
    "title": "SizeOfChar Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfChar Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Char value in arrays or sequences of bytes. public const int SizeOfChar = 2 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfDecimal.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfDecimal.html",
    "title": "SizeOfDecimal Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfDecimal Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Decimal value in arrays or sequences of bytes. public const int SizeOfDecimal = 16 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfDouble.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfDouble.html",
    "title": "SizeOfDouble Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfDouble Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Double value in arrays or sequences of bytes. public const int SizeOfDouble = 8 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfFloat.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfFloat.html",
    "title": "SizeOfFloat Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfFloat Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Single value in arrays or sequences of bytes. public const int SizeOfFloat = 4 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfGuid.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfGuid.html",
    "title": "SizeOfGuid Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfGuid Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Guid value in arrays or sequences of bytes. public const int SizeOfGuid = 17 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfInt.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfInt.html",
    "title": "SizeOfInt Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfInt Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of an Int32 value in arrays or sequences of bytes. public const int SizeOfInt = 4 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfLong.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfLong.html",
    "title": "SizeOfLong Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfLong Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Int64 value in arrays or sequences of bytes. public const int SizeOfLong = 8 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfShort.html",
    "title": "SizeOfShort Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfShort Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of a Int16 value in arrays or sequences of bytes. public const int SizeOfShort = 2 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedInt.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedInt.html",
    "title": "SizeOfUnsignedInt Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfUnsignedInt Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of an UInt32 value in arrays or sequences of bytes. public const int SizeOfUnsignedInt = 4 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedLong.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedLong.html",
    "title": "SizeOfUnsignedLong Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfUnsignedLong Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of an UInt64 value in arrays or sequences of bytes. public const int SizeOfUnsignedLong = 8 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.SizeOfUnsignedShort.html",
    "title": "SizeOfUnsignedShort Field | Hazelcast .NET Documentation",
    "keywords": "SizeOfUnsignedShort Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Gets the size of an UInt16 value in arrays or sequences of bytes. public const int SizeOfUnsignedShort = 2 Returns Int32"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteBool.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteBool.html",
    "title": "WriteBool Method | Hazelcast .NET Documentation",
    "keywords": "WriteBool Method WriteBool(Byte[], Int32, Boolean) Writes a Boolean value to an array of bytes. Declaration public static void WriteBool(this byte[] bytes, int position, bool value) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Boolean value The value to write."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteBoolL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteBoolL.html",
    "title": "WriteBoolL Method | Hazelcast .NET Documentation",
    "keywords": "WriteBoolL Method WriteBoolL(Byte[], Int32, Boolean) Declaration public static void WriteBoolL(this byte[] bytes, int position, bool value) Parameters Byte [] bytes Int32 position Boolean value"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteByte.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteByte.html",
    "title": "WriteByte Method | Hazelcast .NET Documentation",
    "keywords": "WriteByte Method WriteByte(Byte[], Int32, Byte) Writes a Byte value to an array of bytes. Declaration public static void WriteByte(this byte[] bytes, int position, byte value) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Byte value The value to write."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteByteL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteByteL.html",
    "title": "WriteByteL Method | Hazelcast .NET Documentation",
    "keywords": "WriteByteL Method WriteByteL(Byte[], Int32, Byte) Declaration public static void WriteByteL(this byte[] bytes, int position, byte value) Parameters Byte [] bytes Int32 position Byte value"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteChar.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteChar.html",
    "title": "WriteChar Method | Hazelcast .NET Documentation",
    "keywords": "WriteChar Method WriteChar(Byte[], Int32, Char, Endianness) Writes a Char value to an array of bytes. Declaration public static void WriteChar(this byte[] bytes, int position, char value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Char value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteDouble.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteDouble.html",
    "title": "WriteDouble Method | Hazelcast .NET Documentation",
    "keywords": "WriteDouble Method WriteDouble(Byte[], Int32, Double, Endianness) Writes a Double value to an array of bytes. Declaration public static void WriteDouble(this byte[] bytes, int position, double value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Double value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteFloat.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteFloat.html",
    "title": "WriteFloat Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloat Method WriteFloat(Byte[], Int32, Single, Endianness) Writes a Single value to an array of bytes. Declaration public static void WriteFloat(this byte[] bytes, int position, float value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Single value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteGuid.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteGuid.html",
    "title": "WriteGuid Method | Hazelcast .NET Documentation",
    "keywords": "WriteGuid Method WriteGuid(Byte[], Int32, Guid) Writes a Guid value to an array of bytes. Declaration public static void WriteGuid(this byte[] bytes, int position, Guid value) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Guid value The value to write."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteGuidL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteGuidL.html",
    "title": "WriteGuidL Method | Hazelcast .NET Documentation",
    "keywords": "WriteGuidL Method WriteGuidL(Byte[], Int32, Guid) Declaration public static void WriteGuidL(this byte[] bytes, int position, Guid value) Parameters Byte [] bytes Int32 position Guid value"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteInt.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteInt.html",
    "title": "WriteInt Method | Hazelcast .NET Documentation",
    "keywords": "WriteInt Method WriteInt(Byte[], Int32, Enum, Endianness) Writes an Int32 enum value to an array of bytes. Declaration public static void WriteInt(this byte[] bytes, int position, Enum value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Enum value The value to write. Endianness endianness The endianness. WriteInt(Byte[], Int32, Int32, Endianness) Writes an Int32 value to an array of bytes. Declaration public static void WriteInt(this byte[] bytes, int position, int value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Int32 value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteIntL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteIntL.html",
    "title": "WriteIntL Method | Hazelcast .NET Documentation",
    "keywords": "WriteIntL Method WriteIntL(Byte[], Int32, Int32) Declaration public static void WriteIntL(this byte[] bytes, int position, int value) Parameters Byte [] bytes Int32 position Int32 value WriteIntL(Byte[], Int32, Enum) Declaration public static void WriteIntL(this byte[] bytes, int position, Enum value) Parameters Byte [] bytes Int32 position Enum value"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteLong.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteLong.html",
    "title": "WriteLong Method | Hazelcast .NET Documentation",
    "keywords": "WriteLong Method WriteLong(Byte[], Int32, Int64, Endianness) Writes a Int64 value to an array of bytes. Declaration public static void WriteLong(this byte[] bytes, int position, long value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Int64 value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteLongL.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteLongL.html",
    "title": "WriteLongL Method | Hazelcast .NET Documentation",
    "keywords": "WriteLongL Method WriteLongL(Byte[], Int32, Int64) Declaration public static void WriteLongL(this byte[] bytes, int position, long value) Parameters Byte [] bytes Int32 position Int64 value"
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteShort.html",
    "title": "WriteShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteShort Method WriteShort(Byte[], Int32, Int16, Endianness) Writes a Int16 value to an array of bytes. Declaration public static void WriteShort(this byte[] bytes, int position, short value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Int16 value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteUShort.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteUShort.html",
    "title": "WriteUShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteUShort Method WriteUShort(Byte[], Int32, UInt16, Endianness) Writes an UInt16 value to an array of bytes. Declaration public static void WriteUShort(this byte[] bytes, int position, ushort value, Endianness endianness = Endianness.Unspecified) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. UInt16 value The value to write. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Core.BytesExtensions.WriteUtf8Char.html": {
    "href": "dev/api/Hazelcast.Core.BytesExtensions.WriteUtf8Char.html",
    "title": "WriteUtf8Char Method | Hazelcast .NET Documentation",
    "keywords": "WriteUtf8Char Method WriteUtf8Char(Byte[], ref Int32, Char) Writes a Char value to an array of bytes, encoded on 1, 2 or 3 bytes. Declaration public static void WriteUtf8Char(this byte[] bytes, ref int position, char value) Parameters Byte [] bytes The array of bytes to write to. Int32 position The position in the array where the value should be written. Char value The value to write. Remarks The position is incremented with the number of bytes written."
  },
  "dev/api/Hazelcast.Core.Clock.html": {
    "href": "dev/api/Hazelcast.Core.Clock.html",
    "title": "Clock Class | Hazelcast .NET Documentation",
    "keywords": "Clock Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the system clock. public static class Clock Inheritance Object Clock Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Milliseconds Gets the epoch time in milliseconds, i.e. the number of milliseconds that have elapsed since the epoch (00:00:00 UTC on January 1st, 1970). Never Gets a number (-1) representing 'never'. Origin Gets the origin date and time. Methods ToDateTime(Int64) Gets the UTC DateTime corresponding to an epoch time. ToEpoch(DateTime) Gets the epoch time in milliseconds corresponding to an UTC DateTime ."
  },
  "dev/api/Hazelcast.Core.Clock.Milliseconds.html": {
    "href": "dev/api/Hazelcast.Core.Clock.Milliseconds.html",
    "title": "Milliseconds Property | Hazelcast .NET Documentation",
    "keywords": "Milliseconds Property Milliseconds Gets the epoch time in milliseconds, i.e. the number of milliseconds that have elapsed since the epoch (00:00:00 UTC on January 1st, 1970). Declaration public static long Milliseconds { get; } Property Value Int64 Remarks The epoch time in milliseconds."
  },
  "dev/api/Hazelcast.Core.Clock.Never.html": {
    "href": "dev/api/Hazelcast.Core.Clock.Never.html",
    "title": "Never Property | Hazelcast .NET Documentation",
    "keywords": "Never Property Never Gets a number (-1) representing 'never'. Declaration public static long Never { get; } Property Value Int64"
  },
  "dev/api/Hazelcast.Core.Clock.Origin.html": {
    "href": "dev/api/Hazelcast.Core.Clock.Origin.html",
    "title": "Origin Property | Hazelcast .NET Documentation",
    "keywords": "Origin Property Origin Gets the origin date and time. Declaration public static DateTime Origin { get; } Property Value DateTime"
  },
  "dev/api/Hazelcast.Core.Clock.ToDateTime.html": {
    "href": "dev/api/Hazelcast.Core.Clock.ToDateTime.html",
    "title": "ToDateTime Method | Hazelcast .NET Documentation",
    "keywords": "ToDateTime Method ToDateTime(Int64) Gets the UTC DateTime corresponding to an epoch time. Declaration public static DateTime ToDateTime(long epochMilliseconds) Parameters Int64 epochMilliseconds The epoch time in milliseconds. Returns DateTime The corresponding UTC DateTime ."
  },
  "dev/api/Hazelcast.Core.Clock.ToEpoch.html": {
    "href": "dev/api/Hazelcast.Core.Clock.ToEpoch.html",
    "title": "ToEpoch Method | Hazelcast .NET Documentation",
    "keywords": "ToEpoch Method ToEpoch(DateTime) Gets the epoch time in milliseconds corresponding to an UTC DateTime . Declaration public static long ToEpoch(DateTime dateTime) Parameters DateTime dateTime The DateTime . Returns Int64 The epoch time in milliseconds corresponding to the DateTime ."
  },
  "dev/api/Hazelcast.Core.ClockOptions.html": {
    "href": "dev/api/Hazelcast.Core.ClockOptions.html",
    "title": "ClockOptions Class | Hazelcast .NET Documentation",
    "keywords": "ClockOptions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the clock options. public class ClockOptions Inheritance Object ClockOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties OffsetMilliseconds Gets or sets the clock offset."
  },
  "dev/api/Hazelcast.Core.ClockOptions.OffsetMilliseconds.html": {
    "href": "dev/api/Hazelcast.Core.ClockOptions.OffsetMilliseconds.html",
    "title": "OffsetMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "OffsetMilliseconds Property OffsetMilliseconds Gets or sets the clock offset. Declaration public long OffsetMilliseconds { get; set; } Property Value Int64"
  },
  "dev/api/Hazelcast.Core.CollectionExtensions.html": {
    "href": "dev/api/Hazelcast.Core.CollectionExtensions.html",
    "title": "CollectionExtensions Class | Hazelcast .NET Documentation",
    "keywords": "CollectionExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll public static class CollectionExtensions Inheritance Object CollectionExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods TryRemove<TKey, TValue>(ICollection<KeyValuePair<TKey, TValue>>, TKey, TValue) Removes the first occurrence of a specific key-value pair from a collection of key-value pairs."
  },
  "dev/api/Hazelcast.Core.CollectionExtensions.TryRemove.html": {
    "href": "dev/api/Hazelcast.Core.CollectionExtensions.TryRemove.html",
    "title": "TryRemove Method | Hazelcast .NET Documentation",
    "keywords": "TryRemove Method TryRemove<TKey, TValue>(ICollection<KeyValuePair<TKey, TValue>>, TKey, TValue) Removes the first occurrence of a specific key-value pair from a collection of key-value pairs. Declaration public static bool TryRemove<TKey, TValue>(this ICollection<KeyValuePair<TKey, TValue>> source, TKey key, TValue value) Parameters ICollection < KeyValuePair <TKey, TValue>> source The collection. TKey key The key. TValue value The value. Returns Boolean true if an occurrence was removed; otherwise false . Type Parameters TKey The type of the key. TValue The type of the value."
  },
  "dev/api/Hazelcast.Core.CoreOptions.Clock.html": {
    "href": "dev/api/Hazelcast.Core.CoreOptions.Clock.html",
    "title": "Clock Property | Hazelcast .NET Documentation",
    "keywords": "Clock Property Clock Gets the clock options. Declaration public ClockOptions Clock { get; } Property Value ClockOptions"
  },
  "dev/api/Hazelcast.Core.CoreOptions.html": {
    "href": "dev/api/Hazelcast.Core.CoreOptions.html",
    "title": "CoreOptions Class | Hazelcast .NET Documentation",
    "keywords": "CoreOptions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the core options. public class CoreOptions Inheritance Object CoreOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Clock Gets the clock options."
  },
  "dev/api/Hazelcast.Core.Endianness.html": {
    "href": "dev/api/Hazelcast.Core.Endianness.html",
    "title": "Endianness Enum | Hazelcast .NET Documentation",
    "keywords": "Endianness Enum Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the order of the bytes within a binary representation of a number. public enum Endianness Fields BigEndian Big-endian. LittleEndian Little-endian. Native The native endianness. Unspecified Endianness is not specified (this is the default value). Extension Methods EndiannessExtensions.IsBigEndian() EndiannessExtensions.IsLittleEndian() EndiannessExtensions.Resolve(Endianness) EnumExtensions.HasAll<Endianness>(Endianness) EnumExtensions.HasAny<Endianness>(Endianness)"
  },
  "dev/api/Hazelcast.Core.EndiannessExtensions.html": {
    "href": "dev/api/Hazelcast.Core.EndiannessExtensions.html",
    "title": "EndiannessExtensions Class | Hazelcast .NET Documentation",
    "keywords": "EndiannessExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods to the Endianness enumeration. public static class EndiannessExtensions Inheritance Object EndiannessExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Methods IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'. Resolve(Endianness, Endianness) Resolves an endianness."
  },
  "dev/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html": {
    "href": "dev/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html",
    "title": "IsBigEndian Method | Hazelcast .NET Documentation",
    "keywords": "IsBigEndian Method IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. Declaration public static bool IsBigEndian(this Endianness endianness) Parameters Endianness endianness The endianness. Returns Boolean true if this endianness is 'big-endian'; otherwise false."
  },
  "dev/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html": {
    "href": "dev/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html",
    "title": "IsLittleEndian Method | Hazelcast .NET Documentation",
    "keywords": "IsLittleEndian Method IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'. Declaration public static bool IsLittleEndian(this Endianness endianness) Parameters Endianness endianness The endianness. Returns Boolean true if this endianness is 'little-endian'; otherwise false."
  },
  "dev/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html": {
    "href": "dev/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html",
    "title": "NativeEndianness Property | Hazelcast .NET Documentation",
    "keywords": "NativeEndianness Property NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Declaration public static Endianness NativeEndianness { get; } Property Value Endianness"
  },
  "dev/api/Hazelcast.Core.EndiannessExtensions.Resolve.html": {
    "href": "dev/api/Hazelcast.Core.EndiannessExtensions.Resolve.html",
    "title": "Resolve Method | Hazelcast .NET Documentation",
    "keywords": "Resolve Method Resolve(Endianness, Endianness) Resolves an endianness. Declaration public static Endianness Resolve(this Endianness endianness, Endianness defaultValue = Endianness.BigEndian) Parameters Endianness endianness The endianness. Endianness defaultValue An optional default value. Returns Endianness The endianness if it is specified, else the defaultValue ."
  },
  "dev/api/Hazelcast.Core.EnumerableExtensions.Combine.html": {
    "href": "dev/api/Hazelcast.Core.EnumerableExtensions.Combine.html",
    "title": "Combine Method | Hazelcast .NET Documentation",
    "keywords": "Combine Method Combine<T1, T2>((IEnumerable<T1> Source1, IEnumerable<T2> Source2)) Combine multiple IEnumerable<T> instances. Declaration public static IEnumerable<(T1, T2)> Combine<T1, T2>(this (IEnumerable<T1> Source1, IEnumerable<T2> Source2) source) Parameters ValueTuple < IEnumerable <T1>, IEnumerable <T2>> source The instances to combine. Returns IEnumerable < ValueTuple <T1, T2>> One single IEnumerable<T> combining the multiple instances. Type Parameters T1 The first enumerated type. T2 The second enumerated type. Combine<T1, T2, T3, T4>((IEnumerable<T1> Source1, IEnumerable<T2> Source2, IEnumerable<T3> Source3, IEnumerable<T4> Source4)) Combine IEnumerable<T> . Declaration public static IEnumerable<(T1, T2, T3, T4)> Combine<T1, T2, T3, T4>(this (IEnumerable<T1> Source1, IEnumerable<T2> Source2, IEnumerable<T3> Source3, IEnumerable<T4> Source4) source) Parameters ValueTuple < IEnumerable <T1>, IEnumerable <T2>, IEnumerable <T3>, IEnumerable <T4>> source The instances to combine. Returns IEnumerable < ValueTuple <T1, T2, T3, T4>> One single IEnumerable<T> combining the multiple instances. Type Parameters T1 The first enumerated type. T2 The second enumerated type. T3 The third enumerated type. T4 The fourth enumerated type."
  },
  "dev/api/Hazelcast.Core.EnumerableExtensions.html": {
    "href": "dev/api/Hazelcast.Core.EnumerableExtensions.html",
    "title": "EnumerableExtensions Class | Hazelcast .NET Documentation",
    "keywords": "EnumerableExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods to the IEnumerable<T> interface. public static class EnumerableExtensions Inheritance Object EnumerableExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods Combine<T1, T2>((IEnumerable<T1> Source1, IEnumerable<T2> Source2)) Combine multiple IEnumerable<T> instances. Combine<T1, T2, T3, T4>((IEnumerable<T1> Source1, IEnumerable<T2> Source2, IEnumerable<T3> Source3, IEnumerable<T4> Source4)) Combine IEnumerable<T> . Shuffle<T>(IEnumerable<T>) Shuffles an enumerable. ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a Dictionary<TKey,TValue> from an IEnumerable<T> of KeyValuePair<TKey,TValue> . ToDictionary<TKey, TValue>(IEnumerable<(TKey Key, TValue Value)>) Creates a Dictionary<TKey,TValue> from an IEnumerable<T> of (key, value) pairs."
  },
  "dev/api/Hazelcast.Core.EnumerableExtensions.Shuffle.html": {
    "href": "dev/api/Hazelcast.Core.EnumerableExtensions.Shuffle.html",
    "title": "Shuffle Method | Hazelcast .NET Documentation",
    "keywords": "Shuffle Method Shuffle<T>(IEnumerable<T>) Shuffles an enumerable. Declaration public static IEnumerable<T> Shuffle<T>(this IEnumerable<T> source) Parameters IEnumerable <T> source The original enumerable. Returns IEnumerable <T> The original enumerable items, in random order. Type Parameters T The enumerated type."
  },
  "dev/api/Hazelcast.Core.EnumerableExtensions.ToDictionary.html": {
    "href": "dev/api/Hazelcast.Core.EnumerableExtensions.ToDictionary.html",
    "title": "ToDictionary Method | Hazelcast .NET Documentation",
    "keywords": "ToDictionary Method ToDictionary<TKey, TValue>(IEnumerable<KeyValuePair<TKey, TValue>>) Creates a Dictionary<TKey,TValue> from an IEnumerable<T> of KeyValuePair<TKey,TValue> . Declaration public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<KeyValuePair<TKey, TValue>> source) Parameters IEnumerable < KeyValuePair <TKey, TValue>> source An IEnumerable<T> to create a IDictionary<TKey,TValue> from. Returns IDictionary <TKey, TValue> A Dictionary<TKey,TValue> that contains values provided by source . Type Parameters TKey The type of the keys. TValue The type of the values. ToDictionary<TKey, TValue>(IEnumerable<(TKey Key, TValue Value)>) Creates a Dictionary<TKey,TValue> from an IEnumerable<T> of (key, value) pairs. Declaration public static IDictionary<TKey, TValue> ToDictionary<TKey, TValue>(this IEnumerable<(TKey Key, TValue Value)> source) Parameters IEnumerable < ValueTuple <TKey, TValue>> source An IEnumerable<T> to create a IDictionary<TKey,TValue> from. Returns IDictionary <TKey, TValue> A Dictionary<TKey,TValue> that contains values provided by source . Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "dev/api/Hazelcast.Core.EnumExtensions.HasAll.html": {
    "href": "dev/api/Hazelcast.Core.EnumExtensions.HasAll.html",
    "title": "HasAll Method | Hazelcast .NET Documentation",
    "keywords": "HasAll Method HasAll<T>(T, T) Determines whether one or more bit fields are set in the current instance. Declaration public static bool HasAll<T>(this T value, T flags) where T : Enum Parameters T value This instance value. T flags An enumeration value. Returns Boolean true if all the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false . Type Parameters T The type of the enumeration. Remarks This extension methods works for enumerations backed by an Int32 value, or any smaller value. No test is performed on value.GetTypeCode() and therefore results for enumerations backed, by example, by a Int64 are unspecified. This is a convenient replacement for HasFlag(Enum) which is way slower."
  },
  "dev/api/Hazelcast.Core.EnumExtensions.HasAny.html": {
    "href": "dev/api/Hazelcast.Core.EnumExtensions.HasAny.html",
    "title": "HasAny Method | Hazelcast .NET Documentation",
    "keywords": "HasAny Method HasAny<T>(T, T) Determines whether one or more bit fields are set in the current instance. Declaration public static bool HasAny<T>(this T value, T flags) where T : Enum Parameters T value This instance value. T flags An enumeration value. Returns Boolean true if any of the bit field or bit fields that are set in flag are also set in the current instance; otherwise, false . Type Parameters T The type of the enumeration. Remarks This extension methods works for enumerations backed by an Int32 value, or any smaller value. No test is performed on value.GetTypeCode() and therefore results for enumerations backed, by example, by a Int64 are unspecified."
  },
  "dev/api/Hazelcast.Core.EnumExtensions.html": {
    "href": "dev/api/Hazelcast.Core.EnumExtensions.html",
    "title": "EnumExtensions Class | Hazelcast .NET Documentation",
    "keywords": "EnumExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods for Enum . public static class EnumExtensions Inheritance Object EnumExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods HasAll<T>(T, T) Determines whether one or more bit fields are set in the current instance. HasAny<T>(T, T) Determines whether one or more bit fields are set in the current instance."
  },
  "dev/api/Hazelcast.Core.EventHandlersBase-1.Add.html": {
    "href": "dev/api/Hazelcast.Core.EventHandlersBase-1.Add.html",
    "title": "Add Method | Hazelcast .NET Documentation",
    "keywords": "Add Method Add(TEventHandler) Adds a handler. Declaration protected void Add(TEventHandler handler) Parameters TEventHandler handler The handler."
  },
  "dev/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html": {
    "href": "dev/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html",
    "title": "GetEnumerator Method | Hazelcast .NET Documentation",
    "keywords": "GetEnumerator Method GetEnumerator() Declaration public IEnumerator<TEventHandler> GetEnumerator() Returns IEnumerator <TEventHandler> Implements IEnumerable<T>.GetEnumerator()"
  },
  "dev/api/Hazelcast.Core.EventHandlersBase-1.html": {
    "href": "dev/api/Hazelcast.Core.EventHandlersBase-1.html",
    "title": "EventHandlersBase<TEventHandler> Class | Hazelcast .NET Documentation",
    "keywords": "EventHandlersBase<TEventHandler> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides a base class for classes containing event handlers. public abstract class EventHandlersBase<TEventHandler> : IEnumerable<TEventHandler>, IEnumerable Inheritance Object EventHandlersBase<TEventHandler> CollectionItemEventHandlers<T> DictionaryEventHandlers<TKey, TValue> MultiDictionaryEventHandlers<TKey, TValue> ReplicatedDictionaryEventHandlers<TKey, TValue> TopicEventHandlers<T> HazelcastClientEventHandlers Implements IEnumerable <TEventHandler> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TEventHandler The type of the event handlers. Methods Add(TEventHandler) Adds a handler. GetEnumerator() Remove(TEventHandler) Removes a handler. Explicit Interface Implementations IEnumerable.GetEnumerator() Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.Core.EventHandlersBase-1.Remove.html": {
    "href": "dev/api/Hazelcast.Core.EventHandlersBase-1.Remove.html",
    "title": "Remove Method | Hazelcast .NET Documentation",
    "keywords": "Remove Method Remove(TEventHandler) Removes a handler. Declaration public void Remove(TEventHandler handler) Parameters TEventHandler handler The handler to remove."
  },
  "dev/api/Hazelcast.Core.EventHandlersBase-1.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "dev/api/Hazelcast.Core.EventHandlersBase-1.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "IEnumerable.GetEnumerator Method | Hazelcast .NET Documentation",
    "keywords": "IEnumerable.GetEnumerator Method IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns IEnumerator Implements IEnumerable.GetEnumerator()"
  },
  "dev/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html": {
    "href": "dev/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html",
    "title": "HazelcastJsonValue Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastJsonValue Constructor HazelcastJsonValue(String) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Declaration public HazelcastJsonValue(string json) Parameters String json The string containing JSON."
  },
  "dev/api/Hazelcast.Core.HazelcastJsonValue.Equals.html": {
    "href": "dev/api/Hazelcast.Core.HazelcastJsonValue.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Core.HazelcastJsonValue.html": {
    "href": "dev/api/Hazelcast.Core.HazelcastJsonValue.html",
    "title": "HazelcastJsonValue Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastJsonValue Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a JSON formatted string. public sealed class HazelcastJsonValue Inheritance Object HazelcastJsonValue Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Remarks It is preferred to store HazelcastJsonValue instead of String for JSON formatted strings. Users can then run predicates and aggregations and use indexes on the attributes of the underlying JSON content. Note that the string is not validated and may be invalid JSON. Constructors HazelcastJsonValue(String) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Methods Equals(Object) GetHashCode() ToString()"
  },
  "dev/api/Hazelcast.Core.HazelcastJsonValue.ToString.html": {
    "href": "dev/api/Hazelcast.Core.HazelcastJsonValue.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Core.html": {
    "href": "dev/api/Hazelcast.Core.html",
    "title": "Hazelcast.Core Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Core Namespace Classes AsyncContext Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. BytesExtensions Provides extension methods to byte buffers. Clock Represents the system clock. ClockOptions Represents the clock options. CollectionExtensions CoreOptions Represents the core options. EndiannessExtensions Provides extension methods to the Endianness enumeration. EnumerableExtensions Provides extension methods to the IEnumerable<T> interface. EnumExtensions Provides extension methods for Enum . EventHandlersBase<TEventHandler> Provides a base class for classes containing event handlers. HazelcastJsonValue Represents a JSON formatted string. Int32Sequence Implements an ISequence<T> . Int64Sequence Implements an ISequence<T> . LeaseTime Utilities for managing time-to-live. Murmur3HashCode Computes Murmur3 hash codes. RandomProvider Provides safe random numbers. ReadOnlyDictionaryConfigurationExtensions Provides extension methods for the IReadOnlyDictionary<TKey,TValue> interface. RetryOptions Represents a RetryStrategy configuration. ServiceFactory Provides methods to create instances of services. ServiceFactory<TService> Represents a service factory. ServiceFactoryException SingletonServiceFactory<TService> Represents a singleton service factory. SocketExtensions Provides extension methods for the Socket class. TaskEx Provides utility methods for running Task . TimeToLive Utilities for managing time-to-live. TimeToWait Utilities for managing time-to-wait. ValueTaskEx Provides utility methods for running ValueTask . Structs Attempt Creates instances of the Attempt<TResult> struct. Attempt<TResult> Represents the result of attempting an operation to produce a result. MaybeNone Interfaces IPatternMatcher The IConfigPatternMatcher provides a strategy to match an item name to a configuration pattern. IRetryStrategy Defines a retry strategy. ISequence<T> Defines a sequence of elements. Enums Endianness Represents the order of the bytes within a binary representation of a number. InMemoryFormat Specifies the storage format types of values stored in the cluster."
  },
  "dev/api/Hazelcast.Core.InMemoryFormat.html": {
    "href": "dev/api/Hazelcast.Core.InMemoryFormat.html",
    "title": "InMemoryFormat Enum | Hazelcast .NET Documentation",
    "keywords": "InMemoryFormat Enum Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Specifies the storage format types of values stored in the cluster. public enum InMemoryFormat Fields Binary Binary (serialized ) format. Object Object (de-serialized) format. Extension Methods EnumExtensions.HasAll<InMemoryFormat>(InMemoryFormat) EnumExtensions.HasAny<InMemoryFormat>(InMemoryFormat)"
  },
  "dev/api/Hazelcast.Core.Int32Sequence.GetNext.html": {
    "href": "dev/api/Hazelcast.Core.Int32Sequence.GetNext.html",
    "title": "GetNext Method | Hazelcast .NET Documentation",
    "keywords": "GetNext Method GetNext() Gets the next element of the sequence. Declaration public int GetNext() Returns Int32 Implements ISequence<T>.GetNext()"
  },
  "dev/api/Hazelcast.Core.Int32Sequence.html": {
    "href": "dev/api/Hazelcast.Core.Int32Sequence.html",
    "title": "Int32Sequence Class | Hazelcast .NET Documentation",
    "keywords": "Int32Sequence Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Implements an ISequence<T> . public class Int32Sequence : ISequence<int> Inheritance Object Int32Sequence Implements ISequence < Int32 > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods GetNext() Gets the next element of the sequence."
  },
  "dev/api/Hazelcast.Core.Int64Sequence.GetNext.html": {
    "href": "dev/api/Hazelcast.Core.Int64Sequence.GetNext.html",
    "title": "GetNext Method | Hazelcast .NET Documentation",
    "keywords": "GetNext Method GetNext() Gets the next element of the sequence. Declaration public long GetNext() Returns Int64 Implements ISequence<T>.GetNext()"
  },
  "dev/api/Hazelcast.Core.Int64Sequence.html": {
    "href": "dev/api/Hazelcast.Core.Int64Sequence.html",
    "title": "Int64Sequence Class | Hazelcast .NET Documentation",
    "keywords": "Int64Sequence Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Implements an ISequence<T> . public class Int64Sequence : ISequence<long> Inheritance Object Int64Sequence Implements ISequence < Int64 > Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods GetNext() Gets the next element of the sequence."
  },
  "dev/api/Hazelcast.Core.IPatternMatcher.html": {
    "href": "dev/api/Hazelcast.Core.IPatternMatcher.html",
    "title": "IPatternMatcher Interface | Hazelcast .NET Documentation",
    "keywords": "IPatternMatcher Interface Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll The IConfigPatternMatcher provides a strategy to match an item name to a configuration pattern. public interface IPatternMatcher Remarks The IConfigPatternMatcher provides a strategy to match an item name to a configuration pattern. It is used on each Config.getXXXConfig() and ClientConfig.getXXXConfig() call for map, list, queue, set, executor, topic, semaphore etc., so for example itemName is the name of a map and configPatterns are all defined map configurations. If no configuration is found by the matcher it should return null . In this case the default config will be used for this item then. If multiple configurations are found by the matcher a should be thrown. Since Hazelcast 3.5 the default matcher is Hazelcast.Core.MatchingPointPatternMatcher . Methods Matches(IEnumerable<String>, String) Returns the best match for an item name out of a list of configuration patterns."
  },
  "dev/api/Hazelcast.Core.IPatternMatcher.Matches.html": {
    "href": "dev/api/Hazelcast.Core.IPatternMatcher.Matches.html",
    "title": "Matches Method | Hazelcast .NET Documentation",
    "keywords": "Matches Method Matches(IEnumerable<String>, String) Returns the best match for an item name out of a list of configuration patterns. Declaration string Matches(IEnumerable<string> configPatterns, string itemName) Parameters IEnumerable < String > configPatterns list of configuration patterns String itemName item name to match Returns String a key of configPatterns which matches the item name or null if nothing matches"
  },
  "dev/api/Hazelcast.Core.IRetryStrategy.html": {
    "href": "dev/api/Hazelcast.Core.IRetryStrategy.html",
    "title": "IRetryStrategy Interface | Hazelcast .NET Documentation",
    "keywords": "IRetryStrategy Interface Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Defines a retry strategy. public interface IRetryStrategy Methods Restart() Restarts the strategy. WaitAsync(CancellationToken) Waits before retrying."
  },
  "dev/api/Hazelcast.Core.IRetryStrategy.Restart.html": {
    "href": "dev/api/Hazelcast.Core.IRetryStrategy.Restart.html",
    "title": "Restart Method | Hazelcast .NET Documentation",
    "keywords": "Restart Method Restart() Restarts the strategy. Declaration void Restart()"
  },
  "dev/api/Hazelcast.Core.IRetryStrategy.WaitAsync.html": {
    "href": "dev/api/Hazelcast.Core.IRetryStrategy.WaitAsync.html",
    "title": "WaitAsync Method | Hazelcast .NET Documentation",
    "keywords": "WaitAsync Method WaitAsync(CancellationToken) Waits before retrying. Declaration ValueTask<bool> WaitAsync(CancellationToken cancellationToken) Parameters CancellationToken cancellationToken A cancellation token. Returns ValueTask < Boolean > Whether it is ok to retry. Remarks Returns false when the timeout has been reached."
  },
  "dev/api/Hazelcast.Core.ISequence-1.GetNext.html": {
    "href": "dev/api/Hazelcast.Core.ISequence-1.GetNext.html",
    "title": "GetNext Method | Hazelcast .NET Documentation",
    "keywords": "GetNext Method GetNext() Gets the next element of the sequence. Declaration T GetNext() Returns T"
  },
  "dev/api/Hazelcast.Core.ISequence-1.html": {
    "href": "dev/api/Hazelcast.Core.ISequence-1.html",
    "title": "ISequence<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ISequence<T> Interface Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Defines a sequence of elements. public interface ISequence<out T> Type Parameters T The type of the sequence. Methods GetNext() Gets the next element of the sequence."
  },
  "dev/api/Hazelcast.Core.LeaseTime.html": {
    "href": "dev/api/Hazelcast.Core.LeaseTime.html",
    "title": "LeaseTime Class | Hazelcast .NET Documentation",
    "keywords": "LeaseTime Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Utilities for managing time-to-live. public static class LeaseTime Inheritance Object LeaseTime Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields InfiniteTimeSpan A constants used to specify an infinite lease time. Zero A constants used to specify a zero lease time (expire immediately)."
  },
  "dev/api/Hazelcast.Core.LeaseTime.InfiniteTimeSpan.html": {
    "href": "dev/api/Hazelcast.Core.LeaseTime.InfiniteTimeSpan.html",
    "title": "InfiniteTimeSpan Field | Hazelcast .NET Documentation",
    "keywords": "InfiniteTimeSpan Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify an infinite lease time. public static readonly TimeSpan InfiniteTimeSpan Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.LeaseTime.Zero.html": {
    "href": "dev/api/Hazelcast.Core.LeaseTime.Zero.html",
    "title": "Zero Field | Hazelcast .NET Documentation",
    "keywords": "Zero Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify a zero lease time (expire immediately). public static readonly TimeSpan Zero Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.MaybeNone.html": {
    "href": "dev/api/Hazelcast.Core.MaybeNone.html",
    "title": "MaybeNone Struct | Hazelcast .NET Documentation",
    "keywords": "MaybeNone Struct Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll public struct MaybeNone Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object)"
  },
  "dev/api/Hazelcast.Core.Murmur3HashCode.Hash.html": {
    "href": "dev/api/Hazelcast.Core.Murmur3HashCode.Hash.html",
    "title": "Hash Method | Hazelcast .NET Documentation",
    "keywords": "Hash Method Hash(Byte[], Int32, Int32, Int32) Computes the hash code of an array of bytes. Declaration public static int Hash(byte[] data, int offset, int count, int seed = 16777619) Parameters Byte [] data An array of bytes. Int32 offset The offset at which hashing begins. Int32 count The number of bytes to hash. Int32 seed An optional hash seed. Returns Int32 The hash code of the array of bytes."
  },
  "dev/api/Hazelcast.Core.Murmur3HashCode.html": {
    "href": "dev/api/Hazelcast.Core.Murmur3HashCode.html",
    "title": "Murmur3HashCode Class | Hazelcast .NET Documentation",
    "keywords": "Murmur3HashCode Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Computes Murmur3 hash codes. public static class Murmur3HashCode Inheritance Object Murmur3HashCode Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods Hash(Byte[], Int32, Int32, Int32) Computes the hash code of an array of bytes."
  },
  "dev/api/Hazelcast.Core.RandomProvider.html": {
    "href": "dev/api/Hazelcast.Core.RandomProvider.html",
    "title": "RandomProvider Class | Hazelcast .NET Documentation",
    "keywords": "RandomProvider Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides safe random numbers. public static class RandomProvider Inheritance Object RandomProvider Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Random Gets a thread-safe Random instance (do not cache this instance)."
  },
  "dev/api/Hazelcast.Core.RandomProvider.Random.html": {
    "href": "dev/api/Hazelcast.Core.RandomProvider.Random.html",
    "title": "Random Property | Hazelcast .NET Documentation",
    "keywords": "Random Property Random Gets a thread-safe Random instance (do not cache this instance). Declaration public static Random Random { get; } Property Value Random Remarks The instance is thread-safe because it is local to the thread. Do not store the instance in a variable as that may break thread safety. Instead, retrieve it each time it is required."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetGuidValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetGuidValue.html",
    "title": "GetGuidValue Method | Hazelcast .NET Documentation",
    "keywords": "GetGuidValue Method GetGuidValue(IReadOnlyDictionary<String, String>, String) Gets a Guid value. Declaration public static Guid GetGuidValue(this IReadOnlyDictionary<string, string> keyValues, string key) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. Returns Guid The value."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetIntValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetIntValue.html",
    "title": "GetIntValue Method | Hazelcast .NET Documentation",
    "keywords": "GetIntValue Method GetIntValue(IReadOnlyDictionary<String, String>, String) Gets an integer value. Declaration public static int GetIntValue(this IReadOnlyDictionary<string, string> keyValues, string key) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. Returns Int32 The value."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetStringValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.GetStringValue.html",
    "title": "GetStringValue Method | Hazelcast .NET Documentation",
    "keywords": "GetStringValue Method GetStringValue(IReadOnlyDictionary<String, String>, String) Gets a string value. Declaration public static string GetStringValue(this IReadOnlyDictionary<string, string> keyValues, string key) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. Returns String The value."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.html",
    "title": "ReadOnlyDictionaryConfigurationExtensions Class | Hazelcast .NET Documentation",
    "keywords": "ReadOnlyDictionaryConfigurationExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods for the IReadOnlyDictionary<TKey,TValue> interface. public static class ReadOnlyDictionaryConfigurationExtensions Inheritance Object ReadOnlyDictionaryConfigurationExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods GetGuidValue(IReadOnlyDictionary<String, String>, String) Gets a Guid value. GetIntValue(IReadOnlyDictionary<String, String>, String) Gets an integer value. GetStringValue(IReadOnlyDictionary<String, String>, String) Gets a string value. TryGetGuidValue(IReadOnlyDictionary<String, String>, String, out Guid) Tries to get a Guid value. TryGetIntValue(IReadOnlyDictionary<String, String>, String, out Int32) Tries to get an integer value. TryGetStringValue(IReadOnlyDictionary<String, String>, String, out String) Tries to get a string value."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetGuidValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetGuidValue.html",
    "title": "TryGetGuidValue Method | Hazelcast .NET Documentation",
    "keywords": "TryGetGuidValue Method TryGetGuidValue(IReadOnlyDictionary<String, String>, String, out Guid) Tries to get a Guid value. Declaration public static bool TryGetGuidValue(this IReadOnlyDictionary<string, string> keyValues, string key, out Guid value) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. Guid value The value. Returns Boolean true if a value was found; otherwise false."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetIntValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetIntValue.html",
    "title": "TryGetIntValue Method | Hazelcast .NET Documentation",
    "keywords": "TryGetIntValue Method TryGetIntValue(IReadOnlyDictionary<String, String>, String, out Int32) Tries to get an integer value. Declaration public static bool TryGetIntValue(this IReadOnlyDictionary<string, string> keyValues, string key, out int value) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. Int32 value The value. Returns Boolean true if a value was found; otherwise false."
  },
  "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetStringValue.html": {
    "href": "dev/api/Hazelcast.Core.ReadOnlyDictionaryConfigurationExtensions.TryGetStringValue.html",
    "title": "TryGetStringValue Method | Hazelcast .NET Documentation",
    "keywords": "TryGetStringValue Method TryGetStringValue(IReadOnlyDictionary<String, String>, String, out String) Tries to get a string value. Declaration public static bool TryGetStringValue(this IReadOnlyDictionary<string, string> keyValues, string key, out string value) Parameters IReadOnlyDictionary < String , String > keyValues Key-values. String key The key. String value The value. Returns Boolean true if a value was found; otherwise false."
  },
  "dev/api/Hazelcast.Core.RetryOptions.ClusterConnectionTimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.ClusterConnectionTimeoutMilliseconds.html",
    "title": "ClusterConnectionTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "ClusterConnectionTimeoutMilliseconds Property ClusterConnectionTimeoutMilliseconds Gets or sets the cluster connection timeout in milliseconds. Declaration public long ClusterConnectionTimeoutMilliseconds { get; set; } Property Value Int64"
  },
  "dev/api/Hazelcast.Core.RetryOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.-ctor.html",
    "title": "RetryOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "RetryOptions Constructor RetryOptions() Initializes a new instance of the RetryOptions class. Declaration public RetryOptions()"
  },
  "dev/api/Hazelcast.Core.RetryOptions.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.html",
    "title": "RetryOptions Class | Hazelcast .NET Documentation",
    "keywords": "RetryOptions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a RetryStrategy configuration. public class RetryOptions Inheritance Object RetryOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors RetryOptions() Initializes a new instance of the RetryOptions class. Properties ClusterConnectionTimeoutMilliseconds Gets or sets the cluster connection timeout in milliseconds. InitialBackoffMilliseconds Gets or sets the back-off time in milliseconds. Jitter Gets or sets the jitter. MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Multiplier Gets or sets the multiplier."
  },
  "dev/api/Hazelcast.Core.RetryOptions.InitialBackoffMilliseconds.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.InitialBackoffMilliseconds.html",
    "title": "InitialBackoffMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "InitialBackoffMilliseconds Property InitialBackoffMilliseconds Gets or sets the back-off time in milliseconds. Declaration public int InitialBackoffMilliseconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Core.RetryOptions.Jitter.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.Jitter.html",
    "title": "Jitter Property | Hazelcast .NET Documentation",
    "keywords": "Jitter Property Jitter Gets or sets the jitter. Declaration public double Jitter { get; set; } Property Value Double"
  },
  "dev/api/Hazelcast.Core.RetryOptions.MaxBackoffMilliseconds.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.MaxBackoffMilliseconds.html",
    "title": "MaxBackoffMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "MaxBackoffMilliseconds Property MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Declaration public int MaxBackoffMilliseconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Core.RetryOptions.Multiplier.html": {
    "href": "dev/api/Hazelcast.Core.RetryOptions.Multiplier.html",
    "title": "Multiplier Property | Hazelcast .NET Documentation",
    "keywords": "Multiplier Property Multiplier Gets or sets the multiplier. Declaration public double Multiplier { get; set; } Property Value Double"
  },
  "dev/api/Hazelcast.Core.ServiceFactory.CreateInstance.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory.CreateInstance.html",
    "title": "CreateInstance Method | Hazelcast .NET Documentation",
    "keywords": "CreateInstance Method CreateInstance<T>(IDictionary<String, String>, Object[]) Creates a new instance of type T . Declaration public static T CreateInstance<T>(IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type T . Type Parameters T The type of the instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<T>(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type as T . Declaration public static T CreateInstance<T>(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type type The type of the created instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type type as T . Type Parameters T The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<T>(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName as T . Declaration public static T CreateInstance<T>(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters String typeName The name of the type of the created instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type typeName as T . Type Parameters T The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type . Declaration public static object CreateInstance(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type type The type of the instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns Object A new instance of type type . Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName . Declaration public static object CreateInstance(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters String typeName The name of the type of the instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns Object A new instance of type typeName . Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects."
  },
  "dev/api/Hazelcast.Core.ServiceFactory.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory.html",
    "title": "ServiceFactory Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactory Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides methods to create instances of services. public static class ServiceFactory Inheritance Object ServiceFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks The provided methods rely on the Activator.CreateInstance method to create the new instances and are not optimized for performance. It is fine to use them for e.g. creating singletons when the application starts, but they should not be used for intensive creation of objects. Methods CreateInstance(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName . CreateInstance(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type . CreateInstance<T>(IDictionary<String, String>, Object[]) Creates a new instance of type T . CreateInstance<T>(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName as T . CreateInstance<T>(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type as T ."
  },
  "dev/api/Hazelcast.Core.ServiceFactory-1.Clone.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory-1.Clone.html",
    "title": "Clone Method | Hazelcast .NET Documentation",
    "keywords": "Clone Method Clone() Clones this service factory. Declaration public ServiceFactory<TService> Clone() Returns ServiceFactory <TService> A clone of the service factory."
  },
  "dev/api/Hazelcast.Core.ServiceFactory-1.Create.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory-1.Create.html",
    "title": "Create Method | Hazelcast .NET Documentation",
    "keywords": "Create Method Create() Creates a new instance of the service. Declaration public TService Create() Returns TService A new instance of the service, or null if no creator has been set."
  },
  "dev/api/Hazelcast.Core.ServiceFactory-1.Creator.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory-1.Creator.html",
    "title": "Creator Property | Hazelcast .NET Documentation",
    "keywords": "Creator Property Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Func <TService> Remarks Do not set the creator after a service has been created, as that could have unspecified consequences."
  },
  "dev/api/Hazelcast.Core.ServiceFactory-1.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactory-1.html",
    "title": "ServiceFactory<TService> Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactory<TService> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a service factory. public class ServiceFactory<TService> where TService : class Inheritance Object ServiceFactory<TService> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TService The type of the service. Remarks The ServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then creates new instances of that service via its Create() method. Properties Creator Gets or sets the service creator. Methods Clone() Clones this service factory. Create() Creates a new instance of the service."
  },
  "dev/api/Hazelcast.Core.ServiceFactoryException.-ctor.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactoryException.-ctor.html",
    "title": "ServiceFactoryException Constructor | Hazelcast .NET Documentation",
    "keywords": "ServiceFactoryException Constructor ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. Declaration public ServiceFactoryException() ServiceFactoryException(String) Initializes a new instance of the ServiceFactoryException class with a specified error message. Declaration public ServiceFactoryException(string message) Parameters String message The message that describes the error. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ServiceFactoryException(String, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Core.ServiceFactoryException.html": {
    "href": "dev/api/Hazelcast.Core.ServiceFactoryException.html",
    "title": "ServiceFactoryException Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactoryException Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll [Serializable] public sealed class ServiceFactoryException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ServiceFactoryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. ServiceFactoryException(String) Initializes a new instance of the ServiceFactoryException class with a specified error message. ServiceFactoryException(String, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Clone.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Clone.html",
    "title": "Clone Method | Hazelcast .NET Documentation",
    "keywords": "Clone Method Clone(Boolean) Clones this service factory. Declaration public SingletonServiceFactory<TService> Clone(bool shallow = true) Parameters Boolean shallow Returns SingletonServiceFactory <TService> A clone of the service factory. Remarks When cloning a singleton service factory, a shallow clones is performed by default, meaning that the (lazy) service instance is cloned too. In other words, the singleton remains a singleton across clones. If shallow is set to false, a deep clone is created, which would create an entirely new singleton."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html",
    "title": "Creator Property | Hazelcast .NET Documentation",
    "keywords": "Creator Property Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Func <TService> Remarks Do not set the creator after the service has been created, as that could have unspecified consequences."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html",
    "title": "SingletonServiceFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "SingletonServiceFactory Constructor SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration public SingletonServiceFactory() SingletonServiceFactory(SingletonServiceFactory<TService>, Boolean) Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration protected SingletonServiceFactory(SingletonServiceFactory<TService> other, bool shallow) Parameters SingletonServiceFactory <TService> other Boolean shallow"
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html",
    "title": "Dispose Method | Hazelcast .NET Documentation",
    "keywords": "Dispose Method Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(Boolean) Frees, releases or resets managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing true when invoked from Dispose() ; otherwise false ."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.html",
    "title": "SingletonServiceFactory<TService> Class | Hazelcast .NET Documentation",
    "keywords": "SingletonServiceFactory<TService> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a singleton service factory. public class SingletonServiceFactory<TService> : IDisposable where TService : class Inheritance Object SingletonServiceFactory<TService> FactoryOptions<T> SerializerOptions Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TService The type of the service. Remarks The SingletonServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then provides a unique instance of that service via its Service property. Constructors SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. SingletonServiceFactory(SingletonServiceFactory<TService>, Boolean) Initializes a new instance of the SingletonServiceFactory<TService> class. Properties Creator Gets or sets the service creator. OwnsService Whether the factory owns the service. Service Gets the singleton instance of the service. ServiceProvider Gets or sets the service provider. Methods Clone(Boolean) Clones this service factory. Dispose() Dispose(Boolean) Frees, releases or resets managed resources."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html",
    "title": "OwnsService Property | Hazelcast .NET Documentation",
    "keywords": "OwnsService Property OwnsService Whether the factory owns the service. Declaration public bool OwnsService { get; set; } Property Value Boolean Remarks By default, services created via Creator are owned by the factory while services created via ServiceProvider are not, but this property can be used to force a different behavior."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html",
    "title": "Service Property | Hazelcast .NET Documentation",
    "keywords": "Service Property Service Gets the singleton instance of the service. Declaration public TService Service { get; } Property Value TService The singleton instance of the service, or null if no creator has been set."
  },
  "dev/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html": {
    "href": "dev/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html",
    "title": "ServiceProvider Property | Hazelcast .NET Documentation",
    "keywords": "ServiceProvider Property ServiceProvider Gets or sets the service provider. Declaration public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider Remarks Do not set the service provider after the service has been created, as that could have unspecified consequences."
  },
  "dev/api/Hazelcast.Core.SocketExtensions.ConnectAsync.html": {
    "href": "dev/api/Hazelcast.Core.SocketExtensions.ConnectAsync.html",
    "title": "ConnectAsync Method | Hazelcast .NET Documentation",
    "keywords": "ConnectAsync Method ConnectAsync(Socket, EndPoint, Int32) Declaration public static Task ConnectAsync(this Socket socket, EndPoint endPoint, int timeoutMilliseconds) Parameters Socket socket EndPoint endPoint Int32 timeoutMilliseconds Returns Task ConnectAsync(Socket, EndPoint, CancellationToken) Declaration public static Task ConnectAsync(this Socket socket, EndPoint endPoint, CancellationToken cancellationToken) Parameters Socket socket EndPoint endPoint CancellationToken cancellationToken Returns Task ConnectAsync(Socket, EndPoint, Int32, CancellationToken) Declaration public static Task ConnectAsync(this Socket socket, EndPoint endPoint, int timeoutMilliseconds, CancellationToken cancellationToken) Parameters Socket socket EndPoint endPoint Int32 timeoutMilliseconds CancellationToken cancellationToken Returns Task"
  },
  "dev/api/Hazelcast.Core.SocketExtensions.html": {
    "href": "dev/api/Hazelcast.Core.SocketExtensions.html",
    "title": "SocketExtensions Class | Hazelcast .NET Documentation",
    "keywords": "SocketExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods for the Socket class. public static class SocketExtensions Inheritance Object SocketExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods ConnectAsync(Socket, EndPoint, Int32) ConnectAsync(Socket, EndPoint, Int32, CancellationToken) ConnectAsync(Socket, EndPoint, CancellationToken)"
  },
  "dev/api/Hazelcast.Core.TaskEx.AwaitCanceled.html": {
    "href": "dev/api/Hazelcast.Core.TaskEx.AwaitCanceled.html",
    "title": "AwaitCanceled Method | Hazelcast .NET Documentation",
    "keywords": "AwaitCanceled Method AwaitCanceled(Task) Awaits a task that is expected to be canceled. Declaration public static ValueTask AwaitCanceled(Task task) Parameters Task task The task. Returns ValueTask A task that will complete when the task has completed. Remarks If the task throws a OperationCanceledException , that exception is swallowed, as the task is expected to have been canceled. Any other exception is rethrown."
  },
  "dev/api/Hazelcast.Core.TaskEx.html": {
    "href": "dev/api/Hazelcast.Core.TaskEx.html",
    "title": "TaskEx Class | Hazelcast .NET Documentation",
    "keywords": "TaskEx Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides utility methods for running Task . public static class TaskEx Inheritance Object TaskEx Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods AwaitCanceled(Task) Awaits a task that is expected to be canceled. RunWithNewContext(Func<CancellationToken, Task>, CancellationToken) Starts an asynchronous task with a new AsyncContext . RunWithNewContext(Func<Task>) Starts an asynchronous task with a new AsyncContext . RunWithNewContext<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Starts an asynchronous task with a new AsyncContext . RunWithNewContext<TResult>(Func<Task<TResult>>) Starts an asynchronous task with a new AsyncContext ."
  },
  "dev/api/Hazelcast.Core.TaskEx.RunWithNewContext.html": {
    "href": "dev/api/Hazelcast.Core.TaskEx.RunWithNewContext.html",
    "title": "RunWithNewContext Method | Hazelcast .NET Documentation",
    "keywords": "RunWithNewContext Method RunWithNewContext(Func<Task>) Starts an asynchronous task with a new AsyncContext . Declaration public static Task RunWithNewContext(Func<Task> function) Parameters Func < Task > function A function starting and returning an asynchronous task. Returns Task The asynchronous task that was started. Remarks This is equivalent to doing return function(); except that the task starts with a new AsyncContext RunWithNewContext(Func<CancellationToken, Task>, CancellationToken) Starts an asynchronous task with a new AsyncContext . Declaration public static Task RunWithNewContext(Func<CancellationToken, Task> function, CancellationToken cancellationToken) Parameters Func < CancellationToken , Task > function A function starting and returning an asynchronous task. CancellationToken cancellationToken A cancellation token. Returns Task The asynchronous task that was started. Remarks This is equivalent to doing return function(cancellationToken); except that the task starts with a new AsyncContext RunWithNewContext<TResult>(Func<Task<TResult>>) Starts an asynchronous task with a new AsyncContext . Declaration public static Task<TResult> RunWithNewContext<TResult>(Func<Task<TResult>> function) Parameters Func < Task <TResult>> function A function starting and returning an asynchronous task. Returns Task <TResult> The asynchronous task that was started. Type Parameters TResult Remarks This is equivalent to doing return function(); except that the task starts with a new AsyncContext RunWithNewContext<TResult>(Func<CancellationToken, Task<TResult>>, CancellationToken) Starts an asynchronous task with a new AsyncContext . Declaration public static Task<TResult> RunWithNewContext<TResult>(Func<CancellationToken, Task<TResult>> function, CancellationToken cancellationToken) Parameters Func < CancellationToken , Task <TResult>> function A function starting and returning an asynchronous task. CancellationToken cancellationToken A cancellation token. Returns Task <TResult> The asynchronous task that was started. Type Parameters TResult Remarks This is equivalent to doing return function(cancellationToken); except that the task starts with a new AsyncContext"
  },
  "dev/api/Hazelcast.Core.TimeToLive.html": {
    "href": "dev/api/Hazelcast.Core.TimeToLive.html",
    "title": "TimeToLive Class | Hazelcast .NET Documentation",
    "keywords": "TimeToLive Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Utilities for managing time-to-live. public static class TimeToLive Inheritance Object TimeToLive Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields InfiniteTimeSpan A constants used to specify an infinite time-to-live (never expire). Zero A constants used to specify a zero time-to-live (expire immediately)."
  },
  "dev/api/Hazelcast.Core.TimeToLive.InfiniteTimeSpan.html": {
    "href": "dev/api/Hazelcast.Core.TimeToLive.InfiniteTimeSpan.html",
    "title": "InfiniteTimeSpan Field | Hazelcast .NET Documentation",
    "keywords": "InfiniteTimeSpan Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify an infinite time-to-live (never expire). public static readonly TimeSpan InfiniteTimeSpan Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.TimeToLive.Zero.html": {
    "href": "dev/api/Hazelcast.Core.TimeToLive.Zero.html",
    "title": "Zero Field | Hazelcast .NET Documentation",
    "keywords": "Zero Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify a zero time-to-live (expire immediately). public static readonly TimeSpan Zero Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.TimeToWait.html": {
    "href": "dev/api/Hazelcast.Core.TimeToWait.html",
    "title": "TimeToWait Class | Hazelcast .NET Documentation",
    "keywords": "TimeToWait Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Utilities for managing time-to-wait. public static class TimeToWait Inheritance Object TimeToWait Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields InfiniteTimeSpan A constants used to specify an infinite time-to-wait (wait forever). Zero A constants used to specify a zero time-to-wait (do not wait)."
  },
  "dev/api/Hazelcast.Core.TimeToWait.InfiniteTimeSpan.html": {
    "href": "dev/api/Hazelcast.Core.TimeToWait.InfiniteTimeSpan.html",
    "title": "InfiniteTimeSpan Field | Hazelcast .NET Documentation",
    "keywords": "InfiniteTimeSpan Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify an infinite time-to-wait (wait forever). public static readonly TimeSpan InfiniteTimeSpan Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.TimeToWait.Zero.html": {
    "href": "dev/api/Hazelcast.Core.TimeToWait.Zero.html",
    "title": "Zero Field | Hazelcast .NET Documentation",
    "keywords": "Zero Field Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll A constants used to specify a zero time-to-wait (do not wait). public static readonly TimeSpan Zero Returns TimeSpan"
  },
  "dev/api/Hazelcast.Core.ValueTaskEx.html": {
    "href": "dev/api/Hazelcast.Core.ValueTaskEx.html",
    "title": "ValueTaskEx Class | Hazelcast .NET Documentation",
    "keywords": "ValueTaskEx Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides utility methods for running ValueTask . public static class ValueTaskEx Inheritance Object ValueTaskEx Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods WithNewContext(Func<CancellationToken, ValueTask>, CancellationToken) Starts an asynchronous task with a new AsyncContext . WithNewContext(Func<ValueTask>) Starts an asynchronous task with a new AsyncContext . WithNewContext<TResult>(Func<CancellationToken, ValueTask<TResult>>, CancellationToken) Starts an asynchronous task with a new AsyncContext . WithNewContext<TResult>(Func<ValueTask<TResult>>) Starts an asynchronous task with a new AsyncContext ."
  },
  "dev/api/Hazelcast.Core.ValueTaskEx.WithNewContext.html": {
    "href": "dev/api/Hazelcast.Core.ValueTaskEx.WithNewContext.html",
    "title": "WithNewContext Method | Hazelcast .NET Documentation",
    "keywords": "WithNewContext Method WithNewContext(Func<ValueTask>) Starts an asynchronous task with a new AsyncContext . Declaration public static ValueTask WithNewContext(Func<ValueTask> function) Parameters Func < ValueTask > function A function starting and returning an asynchronous task. Returns ValueTask The asynchronous task that was started. Remarks This is equivalent to doing return function(); except that the task starts with a new AsyncContext WithNewContext(Func<CancellationToken, ValueTask>, CancellationToken) Starts an asynchronous task with a new AsyncContext . Declaration public static ValueTask WithNewContext(Func<CancellationToken, ValueTask> function, CancellationToken cancellationToken) Parameters Func < CancellationToken , ValueTask > function A function starting and returning an asynchronous task. CancellationToken cancellationToken A cancellation token. Returns ValueTask The asynchronous task that was started. Remarks This is equivalent to doing return function(cancellationToken); except that the task starts with a new AsyncContext WithNewContext<TResult>(Func<ValueTask<TResult>>) Starts an asynchronous task with a new AsyncContext . Declaration public static ValueTask<TResult> WithNewContext<TResult>(Func<ValueTask<TResult>> function) Parameters Func < ValueTask <TResult>> function A function starting and returning an asynchronous task. Returns ValueTask <TResult> The asynchronous task that was started. Type Parameters TResult Remarks This is equivalent to doing return function(); except that the task starts with a new AsyncContext WithNewContext<TResult>(Func<CancellationToken, ValueTask<TResult>>, CancellationToken) Starts an asynchronous task with a new AsyncContext . Declaration public static ValueTask<TResult> WithNewContext<TResult>(Func<CancellationToken, ValueTask<TResult>> function, CancellationToken cancellationToken) Parameters Func < CancellationToken , ValueTask <TResult>> function A function starting and returning an asynchronous task. CancellationToken cancellationToken A cancellation token. Returns ValueTask <TResult> The asynchronous task that was started. Type Parameters TResult Remarks This is equivalent to doing return function(cancellationToken); except that the task starts with a new AsyncContext"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.ClusterId.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.ClusterId.html",
    "title": "ClusterId Property | Hazelcast .NET Documentation",
    "keywords": "ClusterId Property ClusterId Gets the unique identifier of the cluster. Declaration public Guid ClusterId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.-ctor.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.-ctor.html",
    "title": "AuthenticationResult Constructor | Hazelcast .NET Documentation",
    "keywords": "AuthenticationResult Constructor AuthenticationResult(Guid, Guid, NetworkAddress, String, Boolean, Int32, Byte) Initializes a new instance of the AuthenticationResult class. Declaration public AuthenticationResult(Guid clusterId, Guid memberId, NetworkAddress memberAddress, string serverVersion, bool failoverSupported, int partitionCount, byte serializationVersion) Parameters Guid clusterId The unique identifier of the cluster. Guid memberId The unique identifier of the member. NetworkAddress memberAddress The network address of the member. String serverVersion The version of the server running the member. Boolean failoverSupported Whether fail-over is supported. Int32 partitionCount The partition count. Byte serializationVersion The serialization version."
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.FailoverSupported.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.FailoverSupported.html",
    "title": "FailoverSupported Property | Hazelcast .NET Documentation",
    "keywords": "FailoverSupported Property FailoverSupported Determines whether fail-over is supported. Declaration public bool FailoverSupported { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.html",
    "title": "AuthenticationResult Class | Hazelcast .NET Documentation",
    "keywords": "AuthenticationResult Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Represents the result of the client authentication. public class AuthenticationResult Inheritance Object AuthenticationResult Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors AuthenticationResult(Guid, Guid, NetworkAddress, String, Boolean, Int32, Byte) Initializes a new instance of the AuthenticationResult class. Properties ClusterId Gets the unique identifier of the cluster. FailoverSupported Determines whether fail-over is supported. MemberAddress Gets the network address of the member. MemberId Gets the unique identifier of the member. PartitionCount Gets the partition count. SerializationVersion Gets the serialization version. ServerVersion Gets the version of the server running the member."
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.MemberAddress.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.MemberAddress.html",
    "title": "MemberAddress Property | Hazelcast .NET Documentation",
    "keywords": "MemberAddress Property MemberAddress Gets the network address of the member. Declaration public NetworkAddress MemberAddress { get; } Property Value NetworkAddress"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.MemberId.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.MemberId.html",
    "title": "MemberId Property | Hazelcast .NET Documentation",
    "keywords": "MemberId Property MemberId Gets the unique identifier of the member. Declaration public Guid MemberId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.PartitionCount.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.PartitionCount.html",
    "title": "PartitionCount Property | Hazelcast .NET Documentation",
    "keywords": "PartitionCount Property PartitionCount Gets the partition count. Declaration public int PartitionCount { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.SerializationVersion.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.SerializationVersion.html",
    "title": "SerializationVersion Property | Hazelcast .NET Documentation",
    "keywords": "SerializationVersion Property SerializationVersion Gets the serialization version. Declaration public byte SerializationVersion { get; } Property Value Byte"
  },
  "dev/api/Hazelcast.Data.AuthenticationResult.ServerVersion.html": {
    "href": "dev/api/Hazelcast.Data.AuthenticationResult.ServerVersion.html",
    "title": "ServerVersion Property | Hazelcast .NET Documentation",
    "keywords": "ServerVersion Property ServerVersion Gets the version of the server running the member. Declaration public string ServerVersion { get; } Property Value String"
  },
  "dev/api/Hazelcast.Data.BitmapIndexOptions.html": {
    "href": "dev/api/Hazelcast.Data.BitmapIndexOptions.html",
    "title": "BitmapIndexOptions Class | Hazelcast .NET Documentation",
    "keywords": "BitmapIndexOptions Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public class BitmapIndexOptions Inheritance Object BitmapIndexOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties UniqueKey UniqueKeyTransformation"
  },
  "dev/api/Hazelcast.Data.BitmapIndexOptions.UniqueKey.html": {
    "href": "dev/api/Hazelcast.Data.BitmapIndexOptions.UniqueKey.html",
    "title": "UniqueKey Property | Hazelcast .NET Documentation",
    "keywords": "UniqueKey Property UniqueKey Declaration public string UniqueKey { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Data.BitmapIndexOptions.UniqueKeyTransformation.html": {
    "href": "dev/api/Hazelcast.Data.BitmapIndexOptions.UniqueKeyTransformation.html",
    "title": "UniqueKeyTransformation Property | Hazelcast .NET Documentation",
    "keywords": "UniqueKeyTransformation Property UniqueKeyTransformation Declaration public UniqueKeyTransformation UniqueKeyTransformation { get; set; } Property Value UniqueKeyTransformation"
  },
  "dev/api/Hazelcast.Data.CollectionItemEventTypes.html": {
    "href": "dev/api/Hazelcast.Data.CollectionItemEventTypes.html",
    "title": "CollectionItemEventTypes Enum | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventTypes Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Specifies the collection item event types. [Flags] public enum CollectionItemEventTypes Fields Added The item was added. Nothing Nothing (default value). Removed The item was removed. Extension Methods EnumExtensions.HasAll<CollectionItemEventTypes>(CollectionItemEventTypes) EnumExtensions.HasAny<CollectionItemEventTypes>(CollectionItemEventTypes)"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.ClassId.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.-ctor.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.-ctor.html",
    "title": "EndpointQualifier Constructor | Hazelcast .NET Documentation",
    "keywords": "EndpointQualifier Constructor EndpointQualifier(ProtocolType, String) Declaration public EndpointQualifier(ProtocolType type, string identifier) Parameters ProtocolType type String identifier"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.Equals.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(EndpointQualifier) Declaration public bool Equals(EndpointQualifier other) Parameters EndpointQualifier other Returns Boolean Implements IEquatable<T>.Equals(T) Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.FactoryId.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.html",
    "title": "EndpointQualifier Class | Hazelcast .NET Documentation",
    "keywords": "EndpointQualifier Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public class EndpointQualifier : IIdentifiedDataSerializable, IEquatable<EndpointQualifier> Inheritance Object EndpointQualifier Implements IIdentifiedDataSerializable IEquatable < EndpointQualifier > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors EndpointQualifier(ProtocolType, String) Properties ClassId FactoryId Identifier Type Methods Equals(EndpointQualifier) Equals(Object) GetHashCode() ReadData(IObjectDataInput) WriteData(IObjectDataOutput) Operators Equality(EndpointQualifier, EndpointQualifier) Inequality(EndpointQualifier, EndpointQualifier)"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.Identifier.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.Identifier.html",
    "title": "Identifier Property | Hazelcast .NET Documentation",
    "keywords": "Identifier Property Identifier Declaration public string Identifier { get; } Property Value String"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.op_Equality.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.op_Equality.html",
    "title": "Equality Operator | Hazelcast .NET Documentation",
    "keywords": "Equality Operator Equality(EndpointQualifier, EndpointQualifier) Declaration public static bool operator ==(EndpointQualifier left, EndpointQualifier right) Parameters EndpointQualifier left EndpointQualifier right Returns Boolean"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.op_Inequality.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.op_Inequality.html",
    "title": "Inequality Operator | Hazelcast .NET Documentation",
    "keywords": "Inequality Operator Inequality(EndpointQualifier, EndpointQualifier) Declaration public static bool operator !=(EndpointQualifier left, EndpointQualifier right) Parameters EndpointQualifier left EndpointQualifier right Returns Boolean"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.ReadData.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.Type.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Declaration public ProtocolType Type { get; } Property Value ProtocolType"
  },
  "dev/api/Hazelcast.Data.EndpointQualifier.WriteData.html": {
    "href": "dev/api/Hazelcast.Data.EndpointQualifier.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Data.HDictionaryEventTypes.html": {
    "href": "dev/api/Hazelcast.Data.HDictionaryEventTypes.html",
    "title": "HDictionaryEventTypes Enum | Hazelcast .NET Documentation",
    "keywords": "HDictionaryEventTypes Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Specifies the map and entries event types. [Flags] public enum HDictionaryEventTypes Fields Added The entry was added. AllCleared All entries were cleared. AllEvicted All entries were evicted. Evicted The entry was evicted. Expired The entry has expired. Invalidated The entry was invalidated. Loaded The entry was loaded. Merged The entry was merged. Nothing Nothing (default value). Removed The entry was removed. Updated The entry was updated. Extension Methods EnumExtensions.HasAll<HDictionaryEventTypes>(HDictionaryEventTypes) EnumExtensions.HasAny<HDictionaryEventTypes>(HDictionaryEventTypes)"
  },
  "dev/api/Hazelcast.Data.html": {
    "href": "dev/api/Hazelcast.Data.html",
    "title": "Hazelcast.Data Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Data Namespace Classes AuthenticationResult Represents the result of the client authentication. BitmapIndexOptions EndpointQualifier IndexConfig MemberInfo Represents a member of a cluster. MemberVersion Represents the version of a cluster member. Interfaces IHDictionaryEntryStats<TKey, TValue> Represents statistics for an entry in an IHDictionary<TKey, TValue> . Enums CollectionItemEventTypes Specifies the collection item event types. HDictionaryEventTypes Specifies the map and entries event types. IndexType Type of the index. ProtocolType TopicEventTypes Specifies the topic event types. UniqueKeyTransformation"
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Cost.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Cost.html",
    "title": "Cost Property | Hazelcast .NET Documentation",
    "keywords": "Cost Property Cost Gets the cost in bytes of the entry. Declaration long Cost { get; } Property Value Int64 The cost in bytes, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.CreationTime.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.CreationTime.html",
    "title": "CreationTime Property | Hazelcast .NET Documentation",
    "keywords": "CreationTime Property CreationTime Gets the creation epoch time of the entry. Declaration long CreationTime { get; } Property Value Int64 The creation epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.ExpirationTime.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.ExpirationTime.html",
    "title": "ExpirationTime Property | Hazelcast .NET Documentation",
    "keywords": "ExpirationTime Property ExpirationTime Gets the expiration epoch time of the entry. Declaration long ExpirationTime { get; } Property Value Int64 The expiration epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Hits.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Hits.html",
    "title": "Hits Property | Hazelcast .NET Documentation",
    "keywords": "Hits Property Hits Gets number of hits of the entry. Declaration long Hits { get; } Property Value Int64 The number of hits of the entry, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.html",
    "title": "IHDictionaryEntryStats<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHDictionaryEntryStats<TKey, TValue> Interface Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Represents statistics for an entry in an IHDictionary<TKey, TValue> . public interface IHDictionaryEntryStats<out TKey, out TValue> Type Parameters TKey TValue Properties Cost Gets the cost in bytes of the entry. CreationTime Gets the creation epoch time of the entry. ExpirationTime Gets the expiration epoch time of the entry. Hits Gets number of hits of the entry. Key Gets the key of the entry. LastAccessTime Gets the last access epoch time to the entry. LastStoredTime Gets the last epoch time the value was flushed to MapStore. LastUpdateTime Gets the last epoch time the value was updated. Value Gets the value of the entry. Version Gets the version of the entry."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Key.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Key.html",
    "title": "Key Property | Hazelcast .NET Documentation",
    "keywords": "Key Property Key Gets the key of the entry. Declaration TKey Key { get; } Property Value TKey The key of the entry."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastAccessTime.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastAccessTime.html",
    "title": "LastAccessTime Property | Hazelcast .NET Documentation",
    "keywords": "LastAccessTime Property LastAccessTime Gets the last access epoch time to the entry. Declaration long LastAccessTime { get; } Property Value Int64 The last access epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastStoredTime.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastStoredTime.html",
    "title": "LastStoredTime Property | Hazelcast .NET Documentation",
    "keywords": "LastStoredTime Property LastStoredTime Gets the last epoch time the value was flushed to MapStore. Declaration long LastStoredTime { get; } Property Value Int64 The last epoch time the value was flushed to MapStore, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastUpdateTime.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.LastUpdateTime.html",
    "title": "LastUpdateTime Property | Hazelcast .NET Documentation",
    "keywords": "LastUpdateTime Property LastUpdateTime Gets the last epoch time the value was updated. Declaration long LastUpdateTime { get; } Property Value Int64 The last epoch time the value was updated, if statistics are enabled; otherwise -1 ."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Value.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value of the entry. Declaration TValue Value { get; } Property Value TValue The value of the entry."
  },
  "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Version.html": {
    "href": "dev/api/Hazelcast.Data.IHDictionaryEntryStats-2.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Gets the version of the entry. Declaration long Version { get; } Property Value Int64 The version of the entry."
  },
  "dev/api/Hazelcast.Data.IndexConfig.AddAttribute.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.AddAttribute.html",
    "title": "AddAttribute Method | Hazelcast .NET Documentation",
    "keywords": "AddAttribute Method AddAttribute(String) Adds an index attribute with the given. Declaration public IndexConfig AddAttribute(string attribute) Parameters String attribute Attribute name. Returns IndexConfig This instance for chaining."
  },
  "dev/api/Hazelcast.Data.IndexConfig.AddAttributes.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.AddAttributes.html",
    "title": "AddAttributes Method | Hazelcast .NET Documentation",
    "keywords": "AddAttributes Method AddAttributes(String[]) Declaration public IndexConfig AddAttributes(params string[] attributes) Parameters String [] attributes Returns IndexConfig"
  },
  "dev/api/Hazelcast.Data.IndexConfig.Attributes.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.Attributes.html",
    "title": "Attributes Property | Hazelcast .NET Documentation",
    "keywords": "Attributes Property Attributes Indexed attributes. Declaration public IList<string> Attributes { get; } Property Value IList < String >"
  },
  "dev/api/Hazelcast.Data.IndexConfig.BitmapIndexOptions.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.BitmapIndexOptions.html",
    "title": "BitmapIndexOptions Property | Hazelcast .NET Documentation",
    "keywords": "BitmapIndexOptions Property BitmapIndexOptions Declaration public BitmapIndexOptions BitmapIndexOptions { get; set; } Property Value BitmapIndexOptions"
  },
  "dev/api/Hazelcast.Data.IndexConfig.-ctor.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.-ctor.html",
    "title": "IndexConfig Constructor | Hazelcast .NET Documentation",
    "keywords": "IndexConfig Constructor IndexConfig() Initializes a new instance of the IndexConfig class. Declaration public IndexConfig() IndexConfig(IEnumerable<String>) Initializes a new instance of the IndexConfig class. Declaration public IndexConfig(IEnumerable<string> attributes) Parameters IEnumerable < String > attributes"
  },
  "dev/api/Hazelcast.Data.IndexConfig.DefaultType.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.DefaultType.html",
    "title": "DefaultType Field | Hazelcast .NET Documentation",
    "keywords": "DefaultType Field Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public static readonly IndexType DefaultType Returns IndexType"
  },
  "dev/api/Hazelcast.Data.IndexConfig.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.html",
    "title": "IndexConfig Class | Hazelcast .NET Documentation",
    "keywords": "IndexConfig Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public class IndexConfig Inheritance Object IndexConfig Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors IndexConfig() Initializes a new instance of the IndexConfig class. IndexConfig(IEnumerable<String>) Initializes a new instance of the IndexConfig class. Fields DefaultType Properties Attributes Indexed attributes. BitmapIndexOptions Name Name of the index. Type Type of the index. Methods AddAttribute(String) Adds an index attribute with the given. AddAttributes(String[]) ToString() ValidateAttribute(IndexConfig, String) Extension Methods IndexConfigExtensions.ValidateAndNormalize(IndexConfig, String)"
  },
  "dev/api/Hazelcast.Data.IndexConfig.Name.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Name of the index. Declaration public string Name { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Data.IndexConfig.ToString.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Data.IndexConfig.Type.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Type of the index. Declaration public IndexType Type { get; set; } Property Value IndexType"
  },
  "dev/api/Hazelcast.Data.IndexConfig.ValidateAttribute.html": {
    "href": "dev/api/Hazelcast.Data.IndexConfig.ValidateAttribute.html",
    "title": "ValidateAttribute Method | Hazelcast .NET Documentation",
    "keywords": "ValidateAttribute Method ValidateAttribute(IndexConfig, String) Declaration public static void ValidateAttribute(IndexConfig config, string attributeName) Parameters IndexConfig config String attributeName"
  },
  "dev/api/Hazelcast.Data.IndexType.html": {
    "href": "dev/api/Hazelcast.Data.IndexType.html",
    "title": "IndexType Enum | Hazelcast .NET Documentation",
    "keywords": "IndexType Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Type of the index. public enum IndexType Fields Hashed Hash index. Can be used with equality predicates. Sorted Sorted index. Can be used with equality and range predicates. Extension Methods EnumExtensions.HasAll<IndexType>(IndexType) EnumExtensions.HasAny<IndexType>(IndexType)"
  },
  "dev/api/Hazelcast.Data.MemberInfo.Address.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.Address.html",
    "title": "Address Property | Hazelcast .NET Documentation",
    "keywords": "Address Property Address Gets the network address of the member. Declaration public NetworkAddress Address { get; } Property Value NetworkAddress"
  },
  "dev/api/Hazelcast.Data.MemberInfo.AddressMap.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.AddressMap.html",
    "title": "AddressMap Property | Hazelcast .NET Documentation",
    "keywords": "AddressMap Property AddressMap Gets the address map. Declaration public IDictionary<EndpointQualifier, NetworkAddress> AddressMap { get; } Property Value IDictionary < EndpointQualifier , NetworkAddress >"
  },
  "dev/api/Hazelcast.Data.MemberInfo.Attributes.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.Attributes.html",
    "title": "Attributes Property | Hazelcast .NET Documentation",
    "keywords": "Attributes Property Attributes Gets the attributes of the member. Declaration public IReadOnlyDictionary<string, string> Attributes { get; } Property Value IReadOnlyDictionary < String , String >"
  },
  "dev/api/Hazelcast.Data.MemberInfo.-ctor.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.-ctor.html",
    "title": "MemberInfo Constructor | Hazelcast .NET Documentation",
    "keywords": "MemberInfo Constructor MemberInfo(Guid, NetworkAddress, MemberVersion, Boolean, IDictionary<String, String>) Initializes a new instance of the MemberInfo class. Declaration public MemberInfo(Guid id, NetworkAddress address, MemberVersion version, bool isLite, IDictionary<string, string> attributes) Parameters Guid id The unique identifier of the member. NetworkAddress address The network address of the member. MemberVersion version The version of the server running the member. Boolean isLite Whether the member is a \"lite\" member. IDictionary < String , String > attributes Attributes of the member."
  },
  "dev/api/Hazelcast.Data.MemberInfo.Equals.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) Equals(MemberInfo) Declaration public bool Equals(MemberInfo other) Parameters MemberInfo other Returns Boolean Implements IEquatable<T>.Equals(T)"
  },
  "dev/api/Hazelcast.Data.MemberInfo.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Data.MemberInfo.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.html",
    "title": "MemberInfo Class | Hazelcast .NET Documentation",
    "keywords": "MemberInfo Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Represents a member of a cluster. public class MemberInfo : IEquatable<MemberInfo> Inheritance Object MemberInfo Implements IEquatable < MemberInfo > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors MemberInfo(Guid, NetworkAddress, MemberVersion, Boolean, IDictionary<String, String>) Initializes a new instance of the MemberInfo class. Properties Address Gets the network address of the member. AddressMap Gets the address map. Attributes Gets the attributes of the member. Id Gets the unique identifier of the member. IsLite Determines whether the member is a \"lite\" member. Version Gets the version of the server running the member. Methods Equals(MemberInfo) Equals(Object) GetHashCode() ToString() Operators Equality(MemberInfo, MemberInfo) Inequality(MemberInfo, MemberInfo)"
  },
  "dev/api/Hazelcast.Data.MemberInfo.Id.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the unique identifier of the member. Declaration public Guid Id { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.Data.MemberInfo.IsLite.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.IsLite.html",
    "title": "IsLite Property | Hazelcast .NET Documentation",
    "keywords": "IsLite Property IsLite Determines whether the member is a \"lite\" member. Declaration public bool IsLite { get; } Property Value Boolean Remarks Lite members do not own partitions."
  },
  "dev/api/Hazelcast.Data.MemberInfo.op_Equality.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.op_Equality.html",
    "title": "Equality Operator | Hazelcast .NET Documentation",
    "keywords": "Equality Operator Equality(MemberInfo, MemberInfo) Declaration public static bool operator ==(MemberInfo left, MemberInfo right) Parameters MemberInfo left MemberInfo right Returns Boolean"
  },
  "dev/api/Hazelcast.Data.MemberInfo.op_Inequality.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.op_Inequality.html",
    "title": "Inequality Operator | Hazelcast .NET Documentation",
    "keywords": "Inequality Operator Inequality(MemberInfo, MemberInfo) Declaration public static bool operator !=(MemberInfo left, MemberInfo right) Parameters MemberInfo left MemberInfo right Returns Boolean"
  },
  "dev/api/Hazelcast.Data.MemberInfo.ToString.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Data.MemberInfo.Version.html": {
    "href": "dev/api/Hazelcast.Data.MemberInfo.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Gets the version of the server running the member. Declaration public MemberVersion Version { get; } Property Value MemberVersion"
  },
  "dev/api/Hazelcast.Data.MemberVersion.-ctor.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.-ctor.html",
    "title": "MemberVersion Constructor | Hazelcast .NET Documentation",
    "keywords": "MemberVersion Constructor MemberVersion(Byte, Byte, Byte) Initializes a new instance of the MemberVersion class. Declaration public MemberVersion(byte major, byte minor, byte patch) Parameters Byte major The major version number. Byte minor The minor version number. Byte patch The patch version number."
  },
  "dev/api/Hazelcast.Data.MemberVersion.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.html",
    "title": "MemberVersion Class | Hazelcast .NET Documentation",
    "keywords": "MemberVersion Class Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Represents the version of a cluster member. public class MemberVersion Inheritance Object MemberVersion Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors MemberVersion(Byte, Byte, Byte) Initializes a new instance of the MemberVersion class. Properties Major Gets the major version number. Minor Gets the minor version number. Patch Gets the patch version number. Methods ToString()"
  },
  "dev/api/Hazelcast.Data.MemberVersion.Major.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.Major.html",
    "title": "Major Property | Hazelcast .NET Documentation",
    "keywords": "Major Property Major Gets the major version number. Declaration public byte Major { get; } Property Value Byte"
  },
  "dev/api/Hazelcast.Data.MemberVersion.Minor.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.Minor.html",
    "title": "Minor Property | Hazelcast .NET Documentation",
    "keywords": "Minor Property Minor Gets the minor version number. Declaration public byte Minor { get; } Property Value Byte"
  },
  "dev/api/Hazelcast.Data.MemberVersion.Patch.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.Patch.html",
    "title": "Patch Property | Hazelcast .NET Documentation",
    "keywords": "Patch Property Patch Gets the patch version number. Declaration public byte Patch { get; } Property Value Byte"
  },
  "dev/api/Hazelcast.Data.MemberVersion.ToString.html": {
    "href": "dev/api/Hazelcast.Data.MemberVersion.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Data.ProtocolType.html": {
    "href": "dev/api/Hazelcast.Data.ProtocolType.html",
    "title": "ProtocolType Enum | Hazelcast .NET Documentation",
    "keywords": "ProtocolType Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public enum ProtocolType Fields Client Member MemCache Rest Wan Extension Methods EnumExtensions.HasAll<ProtocolType>(ProtocolType) EnumExtensions.HasAny<ProtocolType>(ProtocolType)"
  },
  "dev/api/Hazelcast.Data.TopicEventTypes.html": {
    "href": "dev/api/Hazelcast.Data.TopicEventTypes.html",
    "title": "TopicEventTypes Enum | Hazelcast .NET Documentation",
    "keywords": "TopicEventTypes Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll Specifies the topic event types. [Flags] public enum TopicEventTypes Fields Message A message was received. Nothing Nothing (default value). Extension Methods EnumExtensions.HasAll<TopicEventTypes>(TopicEventTypes) EnumExtensions.HasAny<TopicEventTypes>(TopicEventTypes)"
  },
  "dev/api/Hazelcast.Data.UniqueKeyTransformation.html": {
    "href": "dev/api/Hazelcast.Data.UniqueKeyTransformation.html",
    "title": "UniqueKeyTransformation Enum | Hazelcast .NET Documentation",
    "keywords": "UniqueKeyTransformation Enum Namespace: Hazelcast.Data Assembly: Hazelcast.Net.dll public enum UniqueKeyTransformation Fields Long Object Raw Extension Methods EnumExtensions.HasAll<UniqueKeyTransformation>(UniqueKeyTransformation) EnumExtensions.HasAny<UniqueKeyTransformation>(UniqueKeyTransformation)"
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html",
    "title": "CollectionItemEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventArgs Constructor CollectionItemEventArgs(MemberInfo, Lazy<T>, Object) Initializes a new instance of the CollectionItemEventArgs<T> class. Declaration public CollectionItemEventArgs(MemberInfo member, Lazy<T> item, object state) Parameters MemberInfo member The member. Lazy <T> item The item. Object state A state object."
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html",
    "title": "CollectionItemEventArgs<T> Class | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventArgs<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for the CollectionItemEventTypes events. public sealed class CollectionItemEventArgs<T> : EventArgsBase Inheritance Object EventArgsBase CollectionItemEventArgs<T> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic object type. Constructors CollectionItemEventArgs(MemberInfo, Lazy<T>, Object) Initializes a new instance of the CollectionItemEventArgs<T> class. Properties Item Gets the item. Member Gets the member."
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html",
    "title": "Item Property | Hazelcast .NET Documentation",
    "keywords": "Item Property Item Gets the item. Declaration public T Item { get; } Property Value T"
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html",
    "title": "CollectionItemEventHandlers<T> Class | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventHandlers<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represent collection item event handlers. public sealed class CollectionItemEventHandlers<T> : EventHandlersBase<ICollectionItemEventHandler<T>>, IEnumerable<ICollectionItemEventHandler<T>>, IEnumerable Inheritance Object EventHandlersBase < ICollectionItemEventHandler <T>> CollectionItemEventHandlers<T> Implements IEnumerable < ICollectionItemEventHandler <T>> IEnumerable Inherited Members EventHandlersBase<ICollectionItemEventHandler<T>>.Add(ICollectionItemEventHandler<T>) EventHandlersBase<ICollectionItemEventHandler<T>>.GetEnumerator() EventHandlersBase<ICollectionItemEventHandler<T>>.IEnumerable.GetEnumerator() EventHandlersBase<ICollectionItemEventHandler<T>>.Remove(ICollectionItemEventHandler<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The collection item type. Methods ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html",
    "title": "ItemAdded Method | Hazelcast .NET Documentation",
    "keywords": "ItemAdded Method ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Action < IHCollection <T>, CollectionItemEventArgs <T>> handler The handler. Returns CollectionItemEventHandlers <T> The handlers. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Func < IHCollection <T>, CollectionItemEventArgs <T>, ValueTask > handler The handler. Returns CollectionItemEventHandlers <T> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html",
    "title": "ItemRemoved Method | Hazelcast .NET Documentation",
    "keywords": "ItemRemoved Method ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Action < IHCollection <T>, CollectionItemEventArgs <T>> handler The handler. Returns CollectionItemEventHandlers <T> The handlers. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Func < IHCollection <T>, CollectionItemEventArgs <T>, ValueTask > handler The handler. Returns CollectionItemEventHandlers <T> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryClearedEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryClearedEventArgs.-ctor.html",
    "title": "DictionaryClearedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryClearedEventArgs Constructor DictionaryClearedEventArgs(MemberInfo, Int32, Object) Declaration public DictionaryClearedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member Int32 numberOfAffectedEntries Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryClearedEventArgs.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryClearedEventArgs.html",
    "title": "DictionaryClearedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryClearedEventArgs Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryClearedEventArgs : DictionaryEventArgsBase Inheritance Object DictionaryEventArgsBase DictionaryClearedEventArgs Inherited Members DictionaryEventArgsBase.Member DictionaryEventArgsBase.NumberOfAffectedEntries DictionaryEventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DictionaryClearedEventArgs(MemberInfo, Int32, Object)"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryAddedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryAddedEventArgs Constructor DictionaryEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public DictionaryEntryAddedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.html",
    "title": "DictionaryEntryAddedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryAddedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryAddedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryAddedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties Value Gets the added value."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.Value.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryAddedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the added value. Declaration public TValue Value { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.-ctor.html",
    "title": "DictionaryEntryEventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryEventArgsBase Constructor DictionaryEntryEventArgsBase(MemberInfo, Lazy<TKey>, Object) Initializes a new instance of the DictionaryEntryEventArgsBase<TKey> class. Declaration protected DictionaryEntryEventArgsBase(MemberInfo member, Lazy<TKey> key, object state) Parameters MemberInfo member The member. Lazy <TKey> key The key. Object state A state object."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.html",
    "title": "DictionaryEntryEventArgsBase<TKey> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryEventArgsBase<TKey> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for map entry events. public abstract class DictionaryEntryEventArgsBase<TKey> : EventArgsBase Inheritance Object EventArgsBase DictionaryEntryEventArgsBase<TKey> DictionaryEntryAddedEventArgs<TKey, TValue> DictionaryEntryEvictedEventArgs<TKey, TValue> DictionaryEntryExpiredEventArgs<TKey, TValue> DictionaryEntryInvalidatedEventArgs<TKey, TValue> DictionaryEntryLoadedEventArgs<TKey, TValue> DictionaryEntryMergedEventArgs<TKey, TValue> DictionaryEntryRemovedEventArgs<TKey, TValue> DictionaryEntryUpdatedEventArgs<TKey, TValue> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. Constructors DictionaryEntryEventArgsBase(MemberInfo, Lazy<TKey>, Object) Initializes a new instance of the DictionaryEntryEventArgsBase<TKey> class. Properties Key Gets the key. Member Gets the member that originated the event."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.Key.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.Key.html",
    "title": "Key Property | Hazelcast .NET Documentation",
    "keywords": "Key Property Key Gets the key. Declaration public TKey Key { get; } Property Value TKey"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.Member.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEventArgsBase-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryEvictedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryEvictedEventArgs Constructor DictionaryEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public DictionaryEntryEvictedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.html",
    "title": "DictionaryEntryEvictedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryEvictedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryEvictedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryEvictedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that was evicted."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryEvictedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that was evicted. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.-ctor.html",
    "title": "DictionaryEntryExpiredEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryExpiredEventArgs Constructor DictionaryEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public DictionaryEntryExpiredEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.html",
    "title": "DictionaryEntryExpiredEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryExpiredEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryExpiredEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryExpiredEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that expired."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryExpiredEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that expired. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryInvalidatedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryInvalidatedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryInvalidatedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryInvalidatedEventArgs Constructor DictionaryEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, Object) Declaration public DictionaryEntryInvalidatedEventArgs(MemberInfo member, Lazy<TKey> key, object state) Parameters MemberInfo member Lazy <TKey> key Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryInvalidatedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryInvalidatedEventArgs-2.html",
    "title": "DictionaryEntryInvalidatedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryInvalidatedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryInvalidatedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryInvalidatedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, Object)"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryLoadedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryLoadedEventArgs Constructor DictionaryEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public DictionaryEntryLoadedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Lazy <TValue> oldValue Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.html",
    "title": "DictionaryEntryLoadedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryLoadedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryLoadedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryLoadedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Properties OldValue Gets the value before load, if the entry existed. Value Gets the value that was loaded."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before load, if the entry existed. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.Value.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryLoadedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value that was loaded. Declaration public TValue Value { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryMergedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryMergedEventArgs Constructor DictionaryEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public DictionaryEntryMergedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Lazy <TValue> oldValue Lazy <TValue> mergeValue Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.html",
    "title": "DictionaryEntryMergedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryMergedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryMergedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryMergedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, Object) Properties MergeValue Gets the value proposed during merge. OldValue Gets the value before merge. Value Gets the value after merge."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.MergeValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.MergeValue.html",
    "title": "MergeValue Property | Hazelcast .NET Documentation",
    "keywords": "MergeValue Property MergeValue Gets the value proposed during merge. Declaration public TValue MergeValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before merge. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.Value.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryMergedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value after merge. Declaration public TValue Value { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryRemovedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryRemovedEventArgs Constructor DictionaryEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public DictionaryEntryRemovedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.html",
    "title": "DictionaryEntryRemovedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryRemovedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryRemovedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryRemovedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that was removed."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryRemovedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that was removed. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.-ctor.html",
    "title": "DictionaryEntryUpdatedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryUpdatedEventArgs Constructor DictionaryEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public DictionaryEntryUpdatedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, Lazy<TValue> value, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Lazy <TValue> value Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.html",
    "title": "DictionaryEntryUpdatedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEntryUpdatedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEntryUpdatedEventArgs<TKey, TValue> : DictionaryEntryEventArgsBase<TKey> Inheritance Object EventArgsBase DictionaryEntryEventArgsBase <TKey> DictionaryEntryUpdatedEventArgs<TKey, TValue> Inherited Members DictionaryEntryEventArgsBase<TKey>.Member DictionaryEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors DictionaryEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Properties OldValue Gets the value before the update. Value Gets the updated value."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.OldValue.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before the update. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.Value.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEntryUpdatedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the updated value. Declaration public TValue Value { get; } Property Value TValue"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.-ctor.html",
    "title": "DictionaryEventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEventArgsBase Constructor DictionaryEventArgsBase(MemberInfo, Int32, Object) Initializes a new instance of the DictionaryEventArgsBase class. Declaration protected DictionaryEventArgsBase(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member The member. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.html",
    "title": "DictionaryEventArgsBase Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEventArgsBase Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for map events. public abstract class DictionaryEventArgsBase Inheritance Object DictionaryEventArgsBase DictionaryClearedEventArgs DictionaryEvictedEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DictionaryEventArgsBase(MemberInfo, Int32, Object) Initializes a new instance of the DictionaryEventArgsBase class. Properties Member Gets the member that originated the event. NumberOfAffectedEntries Gets the number of affected entries. State Gets the state object."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.Member.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.NumberOfAffectedEntries.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.NumberOfAffectedEntries.html",
    "title": "NumberOfAffectedEntries Property | Hazelcast .NET Documentation",
    "keywords": "NumberOfAffectedEntries Property NumberOfAffectedEntries Gets the number of affected entries. Declaration public int NumberOfAffectedEntries { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.State.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventArgsBase.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the state object. Declaration public object State { get; } Property Value Object"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.Cleared.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public DictionaryEventHandlers<TKey, TValue> Cleared(Action<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryClearedEventArgs > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public DictionaryEventHandlers<TKey, TValue> Cleared(Func<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryClearedEventArgs , ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryAdded.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public DictionaryEventHandlers<TKey, TValue> EntryAdded(Action<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public DictionaryEventHandlers<TKey, TValue> EntryAdded(Func<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryEvicted.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryEvicted.html",
    "title": "EntryEvicted Method | Hazelcast .NET Documentation",
    "keywords": "EntryEvicted Method EntryEvicted(Action<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. Declaration public DictionaryEventHandlers<TKey, TValue> EntryEvicted(Action<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryEvictedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryEvicted(Func<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. Declaration public DictionaryEventHandlers<TKey, TValue> EntryEvicted(Func<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryEvictedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryExpired.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryExpired.html",
    "title": "EntryExpired Method | Hazelcast .NET Documentation",
    "keywords": "EntryExpired Method EntryExpired(Action<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. Declaration public DictionaryEventHandlers<TKey, TValue> EntryExpired(Action<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryExpiredEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryExpired(Func<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. Declaration public DictionaryEventHandlers<TKey, TValue> EntryExpired(Func<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryExpiredEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryInvalidated.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryInvalidated.html",
    "title": "EntryInvalidated Method | Hazelcast .NET Documentation",
    "keywords": "EntryInvalidated Method EntryInvalidated(Action<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. Declaration public DictionaryEventHandlers<TKey, TValue> EntryInvalidated(Action<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryInvalidatedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryInvalidated(Func<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. Declaration public DictionaryEventHandlers<TKey, TValue> EntryInvalidated(Func<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryInvalidatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryLoaded.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryLoaded.html",
    "title": "EntryLoaded Method | Hazelcast .NET Documentation",
    "keywords": "EntryLoaded Method EntryLoaded(Action<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. Declaration public DictionaryEventHandlers<TKey, TValue> EntryLoaded(Action<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryLoadedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryLoaded(Func<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. Declaration public DictionaryEventHandlers<TKey, TValue> EntryLoaded(Func<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryLoadedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryMerged.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public DictionaryEventHandlers<TKey, TValue> EntryMerged(Action<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public DictionaryEventHandlers<TKey, TValue> EntryMerged(Func<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryRemoved.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public DictionaryEventHandlers<TKey, TValue> EntryRemoved(Action<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public DictionaryEventHandlers<TKey, TValue> EntryRemoved(Func<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryUpdated.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public DictionaryEventHandlers<TKey, TValue> EntryUpdated(Action<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public DictionaryEventHandlers<TKey, TValue> EntryUpdated(Func<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.Evicted.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.Evicted.html",
    "title": "Evicted Method | Hazelcast .NET Documentation",
    "keywords": "Evicted Method Evicted(Action<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs>) Adds an handler which runs when the map is evicted. Declaration public DictionaryEventHandlers<TKey, TValue> Evicted(Action<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs> handler) Parameters Action < IHDictionary <TKey, TValue>, DictionaryEvictedEventArgs > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers. Evicted(Func<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted. Declaration public DictionaryEventHandlers<TKey, TValue> Evicted(Func<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs, ValueTask> handler) Parameters Func < IHDictionary <TKey, TValue>, DictionaryEvictedEventArgs , ValueTask > handler The handler. Returns DictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEventHandlers-2.html",
    "title": "DictionaryEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents distributed dictionary event handlers. public sealed class DictionaryEventHandlers<TKey, TValue> : EventHandlersBase<IDictionaryEventHandlerBase>, IEnumerable<IDictionaryEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IDictionaryEventHandlerBase > DictionaryEventHandlers<TKey, TValue> Implements IEnumerable < IDictionaryEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IDictionaryEventHandlerBase>.Add(IDictionaryEventHandlerBase) EventHandlersBase<IDictionaryEventHandlerBase>.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.Remove(IDictionaryEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Methods Cleared(Action<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryEvicted(Action<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. EntryEvicted(Func<IHDictionary<TKey, TValue>, DictionaryEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. EntryExpired(Action<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. EntryExpired(Func<IHDictionary<TKey, TValue>, DictionaryEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. EntryInvalidated(Action<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. EntryInvalidated(Func<IHDictionary<TKey, TValue>, DictionaryEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. EntryLoaded(Action<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. EntryLoaded(Func<IHDictionary<TKey, TValue>, DictionaryEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. EntryMerged(Action<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Evicted(Action<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs>) Adds an handler which runs when the map is evicted. Evicted(Func<IHDictionary<TKey, TValue>, DictionaryEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEvictedEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEvictedEventArgs.-ctor.html",
    "title": "DictionaryEvictedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DictionaryEvictedEventArgs Constructor DictionaryEvictedEventArgs(MemberInfo, Int32, Object) Declaration public DictionaryEvictedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member Int32 numberOfAffectedEntries Object state"
  },
  "dev/api/Hazelcast.DistributedObjects.DictionaryEvictedEventArgs.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.DictionaryEvictedEventArgs.html",
    "title": "DictionaryEvictedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DictionaryEvictedEventArgs Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class DictionaryEvictedEventArgs : DictionaryEventArgsBase Inheritance Object DictionaryEventArgsBase DictionaryEvictedEventArgs Inherited Members DictionaryEventArgsBase.Member DictionaryEventArgsBase.NumberOfAffectedEntries DictionaryEventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DictionaryEvictedEventArgs(MemberInfo, Int32, Object)"
  },
  "dev/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html",
    "title": "EventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "EventArgsBase Constructor EventArgsBase(Object) Initializes a new instance of the EventArgsBase class. Declaration protected EventArgsBase(object state) Parameters Object state A state object."
  },
  "dev/api/Hazelcast.DistributedObjects.EventArgsBase.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.EventArgsBase.html",
    "title": "EventArgsBase Class | Hazelcast .NET Documentation",
    "keywords": "EventArgsBase Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Provides a base class for all event arguments. public abstract class EventArgsBase Inheritance Object EventArgsBase CollectionItemEventArgs<T> DictionaryEntryEventArgsBase<TKey> TopicMessageEventArgs<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors EventArgsBase(Object) Initializes a new instance of the EventArgsBase class. Properties State Gets the state object."
  },
  "dev/api/Hazelcast.DistributedObjects.EventArgsBase.State.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.EventArgsBase.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the state object. Declaration public object State { get; } Property Value Object"
  },
  "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.-ctor.html",
    "title": "ExecutionResult Constructor | Hazelcast .NET Documentation",
    "keywords": "ExecutionResult Constructor ExecutionResult(Guid, TResult) Initializes a new instance of the ExecutionResult<TResult> struct. Declaration public ExecutionResult(Guid memberId, TResult result) Parameters Guid memberId The unique identifier of the member which performed the operation. TResult result The result of the operation."
  },
  "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.html",
    "title": "ExecutionResult<TResult> Struct | Hazelcast .NET Documentation",
    "keywords": "ExecutionResult<TResult> Struct Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents the result of a distributed operation. public struct ExecutionResult<TResult> Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Type Parameters TResult The type of the result of the operation. Constructors ExecutionResult(Guid, TResult) Initializes a new instance of the ExecutionResult<TResult> struct. Properties MemberId Gets the unique identifier of the member which performed the operation. Result Gets the result of the operation."
  },
  "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.MemberId.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.MemberId.html",
    "title": "MemberId Property | Hazelcast .NET Documentation",
    "keywords": "MemberId Property MemberId Gets the unique identifier of the member which performed the operation. Declaration public Guid MemberId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.Result.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ExecutionResult-1.Result.html",
    "title": "Result Property | Hazelcast .NET Documentation",
    "keywords": "Result Property Result Gets the result of the operation. Declaration public TResult Result { get; } Property Value TResult"
  },
  "dev/api/Hazelcast.DistributedObjects.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.html",
    "title": "Hazelcast.DistributedObjects Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.DistributedObjects Namespace Classes CollectionItemEventArgs<T> Represents event data for the CollectionItemEventTypes events. CollectionItemEventHandlers<T> Represent collection item event handlers. DictionaryClearedEventArgs DictionaryEntryAddedEventArgs<TKey, TValue> DictionaryEntryEventArgsBase<TKey> Represents event data for map entry events. DictionaryEntryEvictedEventArgs<TKey, TValue> DictionaryEntryExpiredEventArgs<TKey, TValue> DictionaryEntryInvalidatedEventArgs<TKey, TValue> DictionaryEntryLoadedEventArgs<TKey, TValue> DictionaryEntryMergedEventArgs<TKey, TValue> DictionaryEntryRemovedEventArgs<TKey, TValue> DictionaryEntryUpdatedEventArgs<TKey, TValue> DictionaryEventArgsBase Represents event data for map events. DictionaryEventHandlers<TKey, TValue> Represents distributed dictionary event handlers. DictionaryEvictedEventArgs EventArgsBase Provides a base class for all event arguments. IndexConfigExtensions Provides extension methods to the IndexConfig class. MultiDictionaryEventHandlers<TKey, TValue> Represents multi distributed dictionary event handlers. ReplicatedDictionaryEventHandlers<TKey, TValue> Represents replicated distributed dictionary event handlers. TopicEventHandlers<T> Represent topic event handlers. TopicMessageEventArgs<T> Represents event data for the Message event. Structs ExecutionResult<TResult> Represents the result of a distributed operation. Interfaces ICollectionItemEventHandler<T> Specifies a collection item event handler. IDictionaryEntryEventHandler<TKey, TValue, TSender> Specifies a map entry event handler. IDictionaryEventHandler<TKey, TValue, TSender> Specifies a map event handler. IDictionaryEventHandlerBase Specifies a generic map event handler. IDictionaryInterceptor A place holder interface for com.hazelcast.map.MapInterceptor on server side. IDistributedObject Defines the base contract for all Hazelcast distributed objects. IEntryProcessor<TResult> Defines a processor that can process the entries of an IHDictionary<TKey, TValue> on the server. IExecutable Defines an operation that can be executed by the IExecutor . IExecutable<TResult> Defines an operation that can be executed by the IExecutor . IExecutor Distributed implementation of ExecutorService. IExecutorService provides additional methods like executing tasks on a specific member, on a member who is owner of a specific key, executing a tasks on multiple members and listening execution result using a callback. IHCollection<T> Defines a concurrent, distributed, and listenable collection. IHDictionary<TKey, TValue> Represents a distributed dictionary. IHDictionaryBase<TKey, TValue> Defines the base interface for various Hazelcast distributed dictionaries. IHList<T> Defines a concurrent, distributed, non-partitioned and listenable list IHLock Distributed implementation of Lock IHMultiDictionary<TKey, TValue> Represents a distributed dictionary whose keys can be associated with multiple values. IHQueue<T> Defines a concurrent, blocking, distributed, non-partitioned and observable queue. IHReplicatedDictionary<TKey, TValue> Represents a distributed dictionary with weak consistency and values locally stored on every node of the cluster. IHRingBuffer<TItem> A Ringbuffer is a data-structure where the content is stored in a ring like structure. IHSet<T> Defines a concurrent, distributed, non-partitioned and listenable set IHTopic<T> Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. IHTxDictionary<TKey, TValue> Represents a transactional distributed dictionary. IHTxList<TItem> IHTxMultiDictionary<TKey, TValue> Transactional implementation of MultiMap IHTxQueue<TItem> Transactional implementation of Queue IHTxSet<TItem> Transactional implementation of IHSet<T> . IKeyLockable<TKey> IPNCounter PN (Positive-Negative) CRDT counter. ITopicEventHandler<T> Specifies a topic event handler. ITransactionalDistributedObject Defines the base contract for all transactional Hazelcast distributed objects. ITransactionalObject Marker interface for all transactional distributed objects. Enums OverflowPolicy Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity."
  },
  "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html",
    "title": "EventType Property | Hazelcast .NET Documentation",
    "keywords": "EventType Property EventType Gets the handled event type. Declaration CollectionItemEventTypes EventType { get; } Property Value CollectionItemEventTypes"
  },
  "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, Object) Handles an event. Declaration ValueTask HandleAsync(IHCollection<T> sender, MemberInfo member, Lazy<T> item, object state) Parameters IHCollection <T> sender The IHCollection<T> that triggered the event. MemberInfo member The member. Lazy <T> item The item. Object state A state object. Returns ValueTask"
  },
  "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html",
    "title": "ICollectionItemEventHandler<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ICollectionItemEventHandler<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a collection item event handler. public interface ICollectionItemEventHandler<T> Type Parameters T The collection items type. Properties EventType Gets the handled event type. Methods HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, Object) Handles an event."
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEntryEventHandler-3.HandleAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEntryEventHandler-3.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, HDictionaryEventTypes, Int32, Object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, HDictionaryEventTypes eventType, int numberOfAffectedEntries, object state) Parameters TSender sender The sender (map) that triggered the event. MemberInfo member The member. Lazy <TKey> key The key. Lazy <TValue> value The value. Lazy <TValue> oldValue The old value. Lazy <TValue> mergeValue The merged value. HDictionaryEventTypes eventType The event type. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object. Returns ValueTask"
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEntryEventHandler-3.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEntryEventHandler-3.html",
    "title": "IDictionaryEntryEventHandler<TKey, TValue, TSender> Interface | Hazelcast .NET Documentation",
    "keywords": "IDictionaryEntryEventHandler<TKey, TValue, TSender> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a map entry event handler. public interface IDictionaryEntryEventHandler<TKey, TValue, in TSender> : IDictionaryEventHandlerBase Inherited Members IDictionaryEventHandlerBase.EventType Type Parameters TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, HDictionaryEventTypes, Int32, Object) Handles an event."
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandler-3.HandleAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandler-3.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(TSender, MemberInfo, Int32, Object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, int numberOfAffectedEntries, object state) Parameters TSender sender The sender (map) that triggered the event. MemberInfo member The member. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object. Returns ValueTask"
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandler-3.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandler-3.html",
    "title": "IDictionaryEventHandler<TKey, TValue, TSender> Interface | Hazelcast .NET Documentation",
    "keywords": "IDictionaryEventHandler<TKey, TValue, TSender> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a map event handler. public interface IDictionaryEventHandler<TKey, TValue, in TSender> : IDictionaryEventHandlerBase Inherited Members IDictionaryEventHandlerBase.EventType Type Parameters TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods HandleAsync(TSender, MemberInfo, Int32, Object) Handles an event."
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandlerBase.EventType.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandlerBase.EventType.html",
    "title": "EventType Property | Hazelcast .NET Documentation",
    "keywords": "EventType Property EventType Gets the handled event type. Declaration HDictionaryEventTypes EventType { get; } Property Value HDictionaryEventTypes"
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandlerBase.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryEventHandlerBase.html",
    "title": "IDictionaryEventHandlerBase Interface | Hazelcast .NET Documentation",
    "keywords": "IDictionaryEventHandlerBase Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a generic map event handler. public interface IDictionaryEventHandlerBase Properties EventType Gets the handled event type."
  },
  "dev/api/Hazelcast.DistributedObjects.IDictionaryInterceptor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDictionaryInterceptor.html",
    "title": "IDictionaryInterceptor Interface | Hazelcast .NET Documentation",
    "keywords": "IDictionaryInterceptor Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll A place holder interface for com.hazelcast.map.MapInterceptor on server side. public interface IDictionaryInterceptor Remarks it is used to intercept changes to the IHDictionary , allowing access to the values before and after adding them to it."
  },
  "dev/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html",
    "title": "DestroyAsync Method | Hazelcast .NET Documentation",
    "keywords": "DestroyAsync Method DestroyAsync() Destroys this distributed object. Declaration ValueTask DestroyAsync() Returns ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "dev/api/Hazelcast.DistributedObjects.IDistributedObject.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDistributedObject.html",
    "title": "IDistributedObject Interface | Hazelcast .NET Documentation",
    "keywords": "IDistributedObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base contract for all Hazelcast distributed objects. public interface IDistributedObject : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties Name Gets the unique name of the object. PartitionKey Gets the partition key of this object. ServiceName Gets the name of the service managing this object. Methods DestroyAsync() Destroys this distributed object."
  },
  "dev/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the unique name of the object. Declaration string Name { get; } Property Value String"
  },
  "dev/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html",
    "title": "PartitionKey Property | Hazelcast .NET Documentation",
    "keywords": "PartitionKey Property PartitionKey Gets the partition key of this object. Declaration string PartitionKey { get; } Property Value String The partition key. Remarks The returned value has meaning only for non-partitioned data structures, such as IAtomicLong. For partitioned data structures such as IHDictionary<TKey, TValue> , the returned value is not null but has no meaning."
  },
  "dev/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html",
    "title": "ServiceName Property | Hazelcast .NET Documentation",
    "keywords": "ServiceName Property ServiceName Gets the name of the service managing this object. Declaration string ServiceName { get; } Property Value String"
  },
  "dev/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html",
    "title": "IEntryProcessor<TResult> Interface | Hazelcast .NET Documentation",
    "keywords": "IEntryProcessor<TResult> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a processor that can process the entries of an IHDictionary<TKey, TValue> on the server. public interface IEntryProcessor<TResult> Type Parameters TResult The type of the results produced by the processor. Remarks Client-side IEntryProcessor<TResult> implementations do not have any processing logic, they must be backed by a corresponding processor registered on the server and containing the actual implementation."
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutable.Execute.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutable.Execute.html",
    "title": "Execute Method | Hazelcast .NET Documentation",
    "keywords": "Execute Method Execute() Executes. Declaration void Execute()"
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutable.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutable.html",
    "title": "IExecutable Interface | Hazelcast .NET Documentation",
    "keywords": "IExecutable Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines an operation that can be executed by the IExecutor . public interface IExecutable Methods Execute() Executes."
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutable-1.Execute.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutable-1.Execute.html",
    "title": "Execute Method | Hazelcast .NET Documentation",
    "keywords": "Execute Method Execute() Executes. Declaration TResult Execute() Returns TResult"
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutable-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutable-1.html",
    "title": "IExecutable<TResult> Interface | Hazelcast .NET Documentation",
    "keywords": "IExecutable<TResult> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines an operation that can be executed by the IExecutor . public interface IExecutable<out TResult> Type Parameters TResult The type of the result of the operation. Methods Execute() Executes."
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutor.ExecuteAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutor.ExecuteAsync.html",
    "title": "ExecuteAsync Method | Hazelcast .NET Documentation",
    "keywords": "ExecuteAsync Method ExecuteAsync(IExecutable, CancellationToken) Declaration Task ExecuteAsync(IExecutable executable, CancellationToken cancellationToken) Parameters IExecutable executable CancellationToken cancellationToken Returns Task ExecuteAsync<TResult>(IExecutable<TResult>, CancellationToken) Declaration Task<TResult> ExecuteAsync<TResult>(IExecutable<TResult> executable, CancellationToken cancellationToken) Parameters IExecutable <TResult> executable CancellationToken cancellationToken Returns Task <TResult> Type Parameters TResult ExecuteAsync(IExecutable, Object, CancellationToken) Declaration Task ExecuteAsync(IExecutable executable, object key, CancellationToken cancellationToken) Parameters IExecutable executable Object key CancellationToken cancellationToken Returns Task ExecuteAsync<TResult>(IExecutable<TResult>, Object, CancellationToken) Declaration Task<TResult> ExecuteAsync<TResult>(IExecutable<TResult> executable, object key, CancellationToken cancellationToken) Parameters IExecutable <TResult> executable Object key CancellationToken cancellationToken Returns Task <TResult> Type Parameters TResult ExecuteAsync(IExecutable, Guid, CancellationToken) Declaration Task ExecuteAsync(IExecutable executable, Guid memberId, CancellationToken cancellationToken) Parameters IExecutable executable Guid memberId CancellationToken cancellationToken Returns Task ExecuteAsync<TResult>(IExecutable<TResult>, Guid, CancellationToken) Declaration Task<TResult> ExecuteAsync<TResult>(IExecutable<TResult> executable, Guid memberId, CancellationToken cancellationToken) Parameters IExecutable <TResult> executable Guid memberId CancellationToken cancellationToken Returns Task <TResult> Type Parameters TResult ExecuteAsync(IExecutable, IEnumerable<Guid>, CancellationToken) Declaration Task ExecuteAsync(IExecutable executable, IEnumerable<Guid> memberIds, CancellationToken cancellationToken) Parameters IExecutable executable IEnumerable < Guid > memberIds CancellationToken cancellationToken Returns Task ExecuteAsync<TResult>(IExecutable<TResult>, IEnumerable<Guid>, CancellationToken) Declaration IEnumerable<Task<ExecutionResult<TResult>>> ExecuteAsync<TResult>(IExecutable<TResult> executable, IEnumerable<Guid> memberIds, CancellationToken cancellationToken) Parameters IExecutable <TResult> executable IEnumerable < Guid > memberIds CancellationToken cancellationToken Returns IEnumerable < Task < ExecutionResult <TResult>>> Type Parameters TResult"
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutor.ExecuteOnAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutor.ExecuteOnAllAsync.html",
    "title": "ExecuteOnAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "ExecuteOnAllAsync Method ExecuteOnAllAsync(IExecutable, CancellationToken) Declaration Task ExecuteOnAllAsync(IExecutable executable, CancellationToken cancellationToken) Parameters IExecutable executable CancellationToken cancellationToken Returns Task ExecuteOnAllAsync<TResult>(IExecutable<TResult>, CancellationToken) Declaration IEnumerable<Task<ExecutionResult<TResult>>> ExecuteOnAllAsync<TResult>(IExecutable<TResult> executable, CancellationToken cancellationToken) Parameters IExecutable <TResult> executable CancellationToken cancellationToken Returns IEnumerable < Task < ExecutionResult <TResult>>> Type Parameters TResult"
  },
  "dev/api/Hazelcast.DistributedObjects.IExecutor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IExecutor.html",
    "title": "IExecutor Interface | Hazelcast .NET Documentation",
    "keywords": "IExecutor Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Distributed implementation of ExecutorService. IExecutorService provides additional methods like executing tasks on a specific member, on a member who is owner of a specific key, executing a tasks on multiple members and listening execution result using a callback. public interface IExecutor Methods ExecuteAsync(IExecutable, IEnumerable<Guid>, CancellationToken) ExecuteAsync(IExecutable, Guid, CancellationToken) ExecuteAsync(IExecutable, Object, CancellationToken) ExecuteAsync(IExecutable, CancellationToken) ExecuteAsync<TResult>(IExecutable<TResult>, IEnumerable<Guid>, CancellationToken) ExecuteAsync<TResult>(IExecutable<TResult>, Guid, CancellationToken) ExecuteAsync<TResult>(IExecutable<TResult>, Object, CancellationToken) ExecuteAsync<TResult>(IExecutable<TResult>, CancellationToken) ExecuteOnAllAsync(IExecutable, CancellationToken) ExecuteOnAllAsync<TResult>(IExecutable<TResult>, CancellationToken)"
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(T) Adds an item to the collection. Declaration Task<bool> AddAsync(T item) Parameters T item The item. Returns Task < Boolean > Whether the item was added."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.AddRangeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.AddRangeAsync.html",
    "title": "AddRangeAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddRangeAsync Method AddRangeAsync<TItem>(ICollection<TItem>) Adds all. Declaration Task<bool> AddRangeAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items element collection Returns Task < Boolean > true if this collection changed, false otherwise. Type Parameters TItem type of elements"
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the collection. Declaration Task ClearAsync() Returns Task A task that will complete when the collection has been cleared."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html",
    "title": "ContainsAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsAllAsync Method ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. Declaration Task<bool> ContainsAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items The collection Returns Task < Boolean > true if this collection contains all of the elements in the specified collection; otherwise, false . Type Parameters TItem type of elements"
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html",
    "title": "ContainsAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsAsync Method ContainsAsync(T) Determines whether the collection contains an item. Declaration Task<bool> ContainsAsync(T item) Parameters T item The item. Returns Task < Boolean > true if the collection contains the item; otherwise false ."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Gets the number of items in the collection. Declaration Task<int> CountAsync() Returns Task < Int32 > The number of items in the collection."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html",
    "title": "GetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAllAsync Method GetAllAsync() Gets the collection items. Declaration Task<IReadOnlyList<T>> GetAllAsync() Returns Task < IReadOnlyList <T>> The collection items."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.html",
    "title": "IHCollection<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHCollection<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, and listenable collection. public interface IHCollection<T> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T The type of the items in the collection Remarks This is not a partitioned data-structure. Entire contents is stored on a single machine (and in the backup). It will not scale by adding more members to the cluster. Methods AddAsync(T) Adds an item to the collection. AddRangeAsync<TItem>(ICollection<TItem>) Adds all. ClearAsync() Clears the collection. ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. ContainsAsync(T) Determines whether the collection contains an item. CountAsync() Gets the number of items in the collection. GetAllAsync() Gets the collection items. IsEmptyAsync() Determines whether this instance is empty. RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. RemoveAsync(T) Removes an item from the collection. RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Determines whether this instance is empty. Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if this instance is empty; otherwise, false ."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html",
    "title": "RemoveAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAllAsync Method RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. Declaration Task<bool> RemoveAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items element collection to be removed Returns Task < Boolean > true if all removed, false otherwise. Type Parameters TItem type of elements"
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(T) Removes an item from the collection. Declaration Task<bool> RemoveAsync(T item) Parameters T item The item. Returns Task < Boolean > true if the item was removed; otherwise false ."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html",
    "title": "RetainAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "RetainAllAsync Method RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. Declaration Task<bool> RetainAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items The c. Returns Task < Boolean > true if this collection changed, false otherwise. Type Parameters TItem type of elements Remarks In other words, removes from this collection all of its elements that are not contained in the specified collection."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<CollectionItemEventHandlers<T>> events, bool includeValue = true, object state = null) Parameters Action < CollectionItemEventHandlers <T>> events An event handlers collection builder. Boolean includeValue Whether to include values in event arguments. Object state A state object that will be passed to handlers. Returns Task < Guid > The unique identifier of the subscription."
  },
  "dev/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > Whether the operation was successful. Remarks Once this method has been invoked, and whatever its result, the subscription is de-activated, which means that no events will trigger anymore, even if the client receives event messages from the servers. If this method returns false , then one or more client connection has not been able to get its server to remove the subscription. Even though no events will trigger anymore, the server may keep sending (ignored) event messages. It is therefore recommended to retry unsubscribing until it is successful."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AddIndexAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AddIndexAsync.html",
    "title": "AddIndexAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddIndexAsync Method AddIndexAsync(IndexConfig) Adds an index to this dictionary for the specified entries so that queries can run faster. Declaration Task AddIndexAsync(IndexConfig indexConfig) Parameters IndexConfig indexConfig Index configuration. Returns Task A task that will complete when the index added. AddIndexAsync(IndexType, String[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. Declaration Task AddIndexAsync(IndexType type, params string[] attributes) Parameters IndexType type Index type. String [] attributes Attributes to be indexed. Returns Task A task that will complete when the index added."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AddInterceptorAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AddInterceptorAsync.html",
    "title": "AddInterceptorAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddInterceptorAsync Method AddInterceptorAsync(IDictionaryInterceptor) Adds an interceptor on the server side. Declaration Task<string> AddInterceptorAsync(IDictionaryInterceptor interceptor) Parameters IDictionaryInterceptor interceptor The interceptor. Returns Task < String > The interceptor unique identifier. Remarks The interceptor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AggregateAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.AggregateAsync.html",
    "title": "AggregateAsync Method | Hazelcast .NET Documentation",
    "keywords": "AggregateAsync Method AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator) Parameters IAggregator <TResult> aggregator The aggregator. Returns Task <TResult> The result of the aggregation. Type Parameters TResult The type of the result. Remarks The aggregator must be serializable via Hazelcast serialization, and have a counterpart on the server. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator, IPredicate predicate) Parameters IAggregator <TResult> aggregator The aggregator. IPredicate predicate A predicate to filter the entries with. Returns Task <TResult> The result of the aggregation. Type Parameters TResult The type of the result. Remarks The aggregator and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.EvictAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.EvictAllAsync.html",
    "title": "EvictAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "EvictAllAsync Method EvictAllAsync() Evicts all entries but the locked entries from the cache. Declaration Task EvictAllAsync() Returns Task A task that will complete when all entries have been evicted. Remarks If a MapStore is defined on server for this dictionary, then MapStore.deleteAll is not called by this method, If you do want MapStore.deleteAll to be called use the method."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.EvictAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.EvictAsync.html",
    "title": "EvictAsync Method | Hazelcast .NET Documentation",
    "keywords": "EvictAsync Method EvictAsync(TKey) Evicts the specified key from the dictionary. Declaration Task<bool> EvictAsync(TKey key) Parameters TKey key The key. Returns Task < Boolean > true if the entry was evicted; otherwise false . Remarks If a MapStore on server is defined for this dictionary, then the entry is not deleted from the underlying MapStore , evict only removes the entry from the memory. Use RemoveAsync(TKey) or if MapStore.delete(object) needs to be called. This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.ExecuteAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.ExecuteAsync.html",
    "title": "ExecuteAsync Method | Hazelcast .NET Documentation",
    "keywords": "ExecuteAsync Method ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor) Parameters IEntryProcessor <TResult> processor An entry processor. Returns Task < IDictionary <TKey, TResult>> The result of the processing of all entries. Type Parameters TResult The type of the results produced by the processor. Remarks The operation is not lock-aware. The processor will process the entries no matter if the keys are locked or not. The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. Interactions with the map store: For each entry not found in memory MapLoader.load(Object) is invoked to load the value from the MapStore backing the dictionary. If the entryProcessor updates the entry and write-through persistence mode is configured, before the value is stored in memory, MapStore.store(Object, Object) is called to write the value into the map store. If the entryProcessor updates the entry's value to null value and write-through persistence mode is configured, before the value is removed from the memory, MapStore.delete(Object) is called to delete the value from the MapStore . Any exceptions thrown by the MapStore fail the operation and are propagated to the caller. If an exception happened, the operation might already succeeded on some of the keys. If write-behind persistence mode is configured with write-coalescing turned off, ReachedMaxSizeException may be thrown if the write-behind queue has reached its per-node maximum capacity. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. Declaration Task<TResult> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, TKey key) Parameters IEntryProcessor <TResult> processor An entry processor. TKey key The key. Returns Task <TResult> The result of the process. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IEnumerable<TKey> keys) Parameters IEntryProcessor <TResult> processor An entry processor. IEnumerable <TKey> keys The keys. Returns Task < IDictionary <TKey, TResult>> The result of the processing of each entry. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IPredicate predicate) Parameters IEntryProcessor <TResult> processor An entry processor. IPredicate predicate A predicate to select entries. Returns Task < IDictionary <TKey, TResult>> The result of the processing of selected entries. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.FlushAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.FlushAsync.html",
    "title": "FlushAsync Method | Hazelcast .NET Documentation",
    "keywords": "FlushAsync Method FlushAsync() Flushes the MapStore on server, if any. Declaration Task FlushAsync() Returns Task A task that will complete when the map store has been flushed. Remarks If a MapStore is defined for this dictionary, this method flushes all dirty entries by deleting or storing them."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetAllAsync.html",
    "title": "GetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAllAsync Method GetAllAsync(ICollection<TKey>) Gets all entries for keys. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetAllAsync(ICollection<TKey> keys) Parameters ICollection <TKey> keys The keys. Returns Task < IReadOnlyDictionary <TKey, TValue>> The values for the specified keys. Remarks The returned readonly dictionary is NOT backed by the hazelcast dictionary, so changes to the returned readonly dictionary are NOT reflected in the IHDictionary<TKey, TValue> , and vice-versa."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetEntriesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetEntriesAsync.html",
    "title": "GetEntriesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntriesAsync Method GetEntriesAsync(IPredicate) Queries the dictionary based on the specified predicate and returns a readonly dictionary of the matching entries. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyDictionary <TKey, TValue>> readonly dictionary of the matching entries. Remarks Specified predicate runs on all members in parallel. The returned readonly dictionary is NOT backed by the hazelcast dictionary, so changes to the returned readonly dictionary are NOT reflected in the IHDictionary<TKey, TValue> , and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetEntryStatsAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetEntryStatsAsync.html",
    "title": "GetEntryStatsAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntryStatsAsync Method GetEntryStatsAsync(TKey) Gets an entry with statistics for a key, or null if the dictionary does not contain an entry with this key. Declaration Task<IHDictionaryEntryStats<TKey, TValue>> GetEntryStatsAsync(TKey key) Parameters TKey key The key. Returns Task < IHDictionaryEntryStats <TKey, TValue>> An IHDictionaryEntryStats<TKey, TValue> for the specified key, or null if the dictionary does not contain an entry with this key."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetKeysAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync(IPredicate) Queries the dictionary based on the specified predicate and returns keys matching the predicate. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyCollection <TKey>> readonly clone of all keys matching the predicate. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetOrAddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetOrAddAsync.html",
    "title": "GetOrAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetOrAddAsync Method GetOrAddAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> GetOrAddAsync(TKey key, TValue value) Parameters TKey key A key. TValue value The value. Returns Task <TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. GetOrAddAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> GetOrAddAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value The value. TimeSpan timeToLive A time to live. Returns Task <TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If the timeToLive is InfiniteTimeSpan , the entry lives as much as the default value configured on server map configuration. If the timeToLive is MaxValue , the entry lives forever."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetValuesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync(IPredicate) Queries the dictionary based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries. Returns Task < IReadOnlyCollection <TValue>> readonly collection of the values of matching entries. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.html",
    "title": "IHDictionary<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHDictionary<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed dictionary. public interface IHDictionary<TKey, TValue> : IHDictionaryBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>>, IKeyLockable<TKey> Inherited Members IHDictionaryBase<TKey, TValue>.GetAsync(TKey) IHDictionaryBase<TKey, TValue>.GetKeysAsync() IHDictionaryBase<TKey, TValue>.GetValuesAsync() IHDictionaryBase<TKey, TValue>.GetEntriesAsync() IHDictionaryBase<TKey, TValue>.CountAsync() IHDictionaryBase<TKey, TValue>.IsEmptyAsync() IHDictionaryBase<TKey, TValue>.ContainsKeyAsync(TKey) IHDictionaryBase<TKey, TValue>.ContainsValueAsync(TValue) IHDictionaryBase<TKey, TValue>.GetAndSetAsync(TKey, TValue) IHDictionaryBase<TKey, TValue>.GetAndSetAsync(TKey, TValue, TimeSpan) IHDictionaryBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHDictionaryBase<TKey, TValue>.ClearAsync() IHDictionaryBase<TKey, TValue>.GetAndRemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) Type Parameters TKey The type of the keys. TValue The type of the values. Remarks Keys are identified by their own hash code and equality. Methods return clones of the original keys and values. Modifying these clones does not change the actual keys and values in the dictionary. One should put the modified entries back, to make changes visible to all nodes. Methods AddIndexAsync(IndexConfig) Adds an index to this dictionary for the specified entries so that queries can run faster. AddIndexAsync(IndexType, String[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. AddInterceptorAsync(IDictionaryInterceptor) Adds an interceptor on the server side. AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. EvictAllAsync() Evicts all entries but the locked entries from the cache. EvictAsync(TKey) Evicts the specified key from the dictionary. ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. FlushAsync() Flushes the MapStore on server, if any. GetAllAsync(ICollection<TKey>) Gets all entries for keys. GetEntriesAsync(IPredicate) Queries the dictionary based on the specified predicate and returns a readonly dictionary of the matching entries. GetEntryStatsAsync(TKey) Gets an entry with statistics for a key, or null if the dictionary does not contain an entry with this key. GetKeysAsync(IPredicate) Queries the dictionary based on the specified predicate and returns keys matching the predicate. GetOrAddAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. GetOrAddAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. GetValuesAsync(IPredicate) Queries the dictionary based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. LoadAllAsync(Boolean) Loads all keys into the store. LoadAllAsync(ICollection<TKey>, Boolean) Loads the given keys into the store. ProjectAsync<TResult>(IProjection) Projects values. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. RemoveAsync(TKey) Removes an entry. RemoveAsync(TKey, TValue) Removes an entry. RemoveAsync(IPredicate) Removes all entries which match with the supplied predicate. RemoveInterceptorAsync(String) Removes the interceptor that identified by id. SetAsync(TKey, TValue) Sets (adds or updates) an entry. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. SetTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, TKey, IPredicate, Boolean, Object) Subscribes to events. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, IPredicate, Boolean, Object) Subscribes to events. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this dictionary within the specified time to wait value. TrySetAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry within a server-side timeout. TryUpdateAsync(TKey, TValue) Updates an entry if it exists. TryUpdateAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue . UnsubscribeAsync(Guid) Unsubscribe from events. UpdateTimeToLive(TKey, TimeSpan) Updates the time to live value of the entry specified by key with a new value."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.LoadAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.LoadAllAsync.html",
    "title": "LoadAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "LoadAllAsync Method LoadAllAsync(Boolean) Loads all keys into the store. Declaration Task LoadAllAsync(bool replaceExistingValues) Parameters Boolean replaceExistingValues when true , existing values in the IHDictionary<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Task A task that will complete when the map store has been loaded. LoadAllAsync(ICollection<TKey>, Boolean) Loads the given keys into the store. Declaration Task LoadAllAsync(ICollection<TKey> keys, bool replaceExistingValues) Parameters ICollection <TKey> keys keys of the values entries to load (keys inside the collection cannot be null) Boolean replaceExistingValues when true , existing values in the IHDictionary<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Task A task that will complete when the map store has been loaded."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.ProjectAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.ProjectAsync.html",
    "title": "ProjectAsync Method | Hazelcast .NET Documentation",
    "keywords": "ProjectAsync Method ProjectAsync<TResult>(IProjection) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection) Parameters IProjection projection The projection. Returns Task < IReadOnlyCollection <TResult>> The projected values. Type Parameters TResult The type of the result. Remarks The projection must be serializable via Hazelcast serialization, and have a counterpart on the server. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection, IPredicate predicate) Parameters IProjection projection The projection. IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyCollection <TResult>> The projected values. Type Parameters TResult The type of the result. Remarks The projection and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Removes an entry. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key The key. TValue value The value. Returns Task < Boolean > true if an entry with the specified key and value was removed; otherwise false . Remarks This method removes an entry if the key and the value both match the specified key and value. This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here. RemoveAsync(TKey) Removes an entry. Declaration Task RemoveAsync(TKey key) Parameters TKey key The key. Returns Task Remarks For performance reasons, this method does not return the removed value. Prefer GetAndRemoveAsync(TKey) if the value is required. However, note that GetAndRemoveAsync(TKey) may breaks the events contract: this method does not consider the removed value at all, which means that any event that would be filtered on the value (for instance via a predicate), and would trigger with GetAndRemoveAsync(TKey) , will not trigger here. RemoveAsync(IPredicate) Removes all entries which match with the supplied predicate. Declaration Task RemoveAsync(IPredicate predicate) Parameters IPredicate predicate A predicate used to select entries to be removed. Returns Task A task that will complete when entries have been removed. Remarks This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.RemoveInterceptorAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.RemoveInterceptorAsync.html",
    "title": "RemoveInterceptorAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveInterceptorAsync Method RemoveInterceptorAsync(String) Removes the interceptor that identified by id. Declaration Task<bool> RemoveInterceptorAsync(string id) Parameters String id The identifier of the interceptor. Returns Task < Boolean > true if registration is removed, false otherwise"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(TKey, TValue) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task A task that will complete when the entry has been added or updated. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live. Returns Task A task that will complete when the entry has been added or updated. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If the timeToLive is InfiniteTimeSpan , the entry lives as much as the default value configured on server map configuration. If the timeToLive is MaxValue , the entry lives forever."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SetTransientAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SetTransientAsync.html",
    "title": "SetTransientAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetTransientAsync Method SetTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. Declaration Task SetTransientAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value The value. TimeSpan timeToLive A time to live. Returns Task Remarks If the dictionary has a MapStore attached, the entry is added to the store but not persisted. Flushing the store is required to make sure that the entry is actually persisted. The value is automatically expired, evicted and removed after the timeToLive has elapsed. Time resolution for is seconds. The given value is rounded to the next closest second value. If the timeToLive is InfiniteTimeSpan , the entry lives as much as the default value configured on server map configuration. If the timeToLive is MaxValue , the entry lives forever."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Action < DictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Action < DictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, IPredicate, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>> events, IPredicate predicate, bool includeValues = true, object state = null) Parameters Action < DictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. Remarks Note that some methods such as RemoveAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details. SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>>, TKey, IPredicate, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<DictionaryEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, bool includeValues = true, object state = null) Parameters Action < DictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. Remarks Note that some methods such as RemoveAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TryRemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TryRemoveAsync.html",
    "title": "TryRemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryRemoveAsync Method TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this dictionary within the specified time to wait value. Declaration Task<bool> TryRemoveAsync(TKey key, TimeSpan timeToWait) Parameters TKey key A key. TimeSpan timeToWait The time to wait for a lock on the key. Returns Task < Boolean > true if the entry was removed; otherwise false . Remarks If the key is already locked by another thread and/or member, then this operation will wait for the timeToWait for acquiring the lock. If the key is still locked, this operation returns false . The operation also returns false when no entry with the specified key exists."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TrySetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TrySetAsync.html",
    "title": "TrySetAsync Method | Hazelcast .NET Documentation",
    "keywords": "TrySetAsync Method TrySetAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry within a server-side timeout. Declaration Task<bool> TrySetAsync(TKey key, TValue value, TimeSpan serverTimeout) Parameters TKey key A key. TValue value A value. TimeSpan serverTimeout A timeout. Returns Task < Boolean > true if the entry was set; otherwise false . Remarks This method returns false when no lock on the key could be acquired within the specified server-side timeout."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TryUpdateAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.TryUpdateAsync.html",
    "title": "TryUpdateAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryUpdateAsync Method TryUpdateAsync(TKey, TValue) Updates an entry if it exists. Declaration Task<TValue> TryUpdateAsync(TKey key, TValue newValue) Parameters TKey key A key. TValue newValue The new value. Returns Task <TValue> The updated value, or default(TValue) is no entry is updated. Remarks If an existing entry with the specified key is found, then its value is updated with the new value, and the updated value is returned. Otherwise, nothing happens, and default(TValue) is returned. TryUpdateAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue . Declaration Task<bool> TryUpdateAsync(TKey key, TValue newValue, TValue comparisonValue) Parameters TKey key A key. TValue newValue The new value. TValue comparisonValue The value that is compared with the value of the entry. Returns Task < Boolean > true if the entry was updated; otherwise false . Remarks If an existing entry with the specified key and expected value is found, then its value is updated with the new value. Otherwise, nothing happens."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if a subscription with the specified identifier was removed successfully; otherwise, if no subscription was found with the specified identifier, false . Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.UpdateTimeToLive.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionary-2.UpdateTimeToLive.html",
    "title": "UpdateTimeToLive Method | Hazelcast .NET Documentation",
    "keywords": "UpdateTimeToLive Method UpdateTimeToLive(TKey, TimeSpan) Updates the time to live value of the entry specified by key with a new value. Declaration Task<bool> UpdateTimeToLive(TKey key, TimeSpan timeToLive) Parameters TKey key A key. TimeSpan timeToLive maximum time for this entry to stay in the dictionary. Returns Task < Boolean > true if the entry exists and its ttl value is changed, false otherwise Remarks New TTL value is valid starting from the time this operation is invoked, not since the time the entry was created. If the entry does not exist or is already expired, this call has no effect. If there is no entry with key key or is already expired, this call makes no changes to entries stored in this dictionary. Time resolution for is seconds. The given value is rounded to the next closest second value. If the timeToLive is InfiniteTimeSpan , the entry lives as much as the default value configured on server map configuration. If the timeToLive is MaxValue , the entry lives forever."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ClearAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the dictionary and deletes the items. Declaration Task ClearAsync() Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ContainsKeyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Determines whether this dictionary contains an entry for the specified key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key The key. Returns Task < Boolean > true if the specified key contains key; otherwise, false . Remarks Warning: This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ContainsValueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.ContainsValueAsync.html",
    "title": "ContainsValueAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsValueAsync Method ContainsValueAsync(TValue) Determines whether this dictionary contains one or more keys to the specified value Declaration Task<bool> ContainsValueAsync(TValue value) Parameters TValue value The value. Returns Task < Boolean > Returns true if this dictionary contains one or more keys to the specified value"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Gets the number of entries contained in this dictionary. Declaration Task<int> CountAsync() Returns Task < Int32 > the number of entries in this dictionary"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAndRemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAndRemoveAsync.html",
    "title": "GetAndRemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndRemoveAsync Method GetAndRemoveAsync(TKey) Removes the entry for a key from this dictionary if it is present. Declaration Task<TValue> GetAndRemoveAsync(TKey key) Parameters TKey key key Returns Task <TValue> previous value associated with key or null if there was no mapping for key . Remarks The dictionary will not contain a mapping for the specified key once the call returns."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAndSetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAndSetAsync.html",
    "title": "GetAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSetAsync Method GetAndSetAsync(TKey, TValue) Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will be replaced by the specified one and returned from the call. Declaration Task<TValue> GetAndSetAsync(TKey key, TValue value) Parameters TKey key key with which the specified value is to be associated. TValue value value to be associated with the specified key. Returns Task <TValue> old value of the entry GetAndSetAsync(TKey, TValue, TimeSpan) Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will be replaced by the specified one and returned from the call. Declaration Task<TValue> GetAndSetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key key with which the specified value is to be associated. TValue value value to be associated with the specified key. TimeSpan timeToLive A positive time to live period to be associated with the specified key-value pair. Returns Task <TValue> old value of the entry Remarks In addition, you have to specify a to define when the value is outdated and thus should be removed from the this dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Gets the value for the specified key, or null if this dictionary does not contain this key. Declaration Task<TValue> GetAsync(TKey key) Parameters TKey key key Returns Task <TValue> value for the specified key or null if this dictionary does not contain this key Remarks Warning-1: This method returns a clone of original value, modifying the returned value does not change the actual value in the dictionary. One should put modified value back to make changes visible to all nodes. var value = await dictionary.GetAsync(key); value.UpdateSomeProperty(); await dictionary.SetAsync(key, value); Warning-2: This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class. Interactions with the MapStore on server If value with key is not found in memory MapLoader.load(Object) is invoked to load the value from the MapStore backing the dictionary. Exceptions thrown by load fail the operation and are propagated to the caller."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetEntriesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetEntriesAsync.html",
    "title": "GetEntriesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntriesAsync Method GetEntriesAsync() Gets a IReadOnlyDictionary<TKey,TValue> clone of the entries contained in this dictionary. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync() Returns Task < IReadOnlyDictionary <TKey, TValue>> a IReadOnlyDictionary<TKey,TValue> clone of the IHDictionaryBase<TKey, TValue> Remarks The returned readonly dictionary is NOT backed by the hazelcast dictionary, so changes to the returned readonly dictionary are NOT reflected in the IHDictionaryBase<TKey, TValue> , and vice-versa."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetKeysAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Gets a IReadOnlyCollection<T> clone of the keys contained in this dictionary. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Task < IReadOnlyCollection <TKey>> a IReadOnlyCollection<T> clone of the keys contained in this dictionary Remarks The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetValuesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Gets a IReadOnlyCollection<T> clone of the values contained in this dictionary. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Task < IReadOnlyCollection <TValue>> a collection clone of the values contained in this dictionary Remarks The collection is NOT backed by the dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa."
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.html",
    "title": "IHDictionaryBase<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHDictionaryBase<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base interface for various Hazelcast distributed dictionaries. public interface IHDictionaryBase<TKey, TValue> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey The type of keys in the dictionary. TValue The type of values in the dictionary. Methods ClearAsync() Clears the dictionary and deletes the items. ContainsKeyAsync(TKey) Determines whether this dictionary contains an entry for the specified key. ContainsValueAsync(TValue) Determines whether this dictionary contains one or more keys to the specified value CountAsync() Gets the number of entries contained in this dictionary. GetAndRemoveAsync(TKey) Removes the entry for a key from this dictionary if it is present. GetAndSetAsync(TKey, TValue) Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will be replaced by the specified one and returned from the call. GetAndSetAsync(TKey, TValue, TimeSpan) Associates a given value to the specified key and replicates it to the cluster. If there is an old value, it will be replaced by the specified one and returned from the call. GetAsync(TKey) Gets the value for the specified key, or null if this dictionary does not contain this key. GetEntriesAsync() Gets a IReadOnlyDictionary<TKey,TValue> clone of the entries contained in this dictionary. GetKeysAsync() Gets a IReadOnlyCollection<T> clone of the keys contained in this dictionary. GetValuesAsync() Gets a IReadOnlyCollection<T> clone of the values contained in this dictionary. IsEmptyAsync() Returns true if this dictionary contains no entries. SetAllAsync(IDictionary<TKey, TValue>) Copies all of the entries from the specified IHDictionary<TKey, TValue> to this dictionary. See Also IHDictionary <TKey, TValue> IHReplicatedDictionary <TKey, TValue>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.IsEmptyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Returns true if this dictionary contains no entries. Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if this dictionary contains no entries"
  },
  "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.SetAllAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHDictionaryBase-2.SetAllAsync.html",
    "title": "SetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAllAsync Method SetAllAsync(IDictionary<TKey, TValue>) Copies all of the entries from the specified IHDictionary<TKey, TValue> to this dictionary. Declaration Task SetAllAsync(IDictionary<TKey, TValue> entries) Parameters IDictionary <TKey, TValue> entries entries to be stored in this dictionary Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAndRemoveAtAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAndRemoveAtAsync.html",
    "title": "GetAndRemoveAtAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndRemoveAtAsync Method GetAndRemoveAtAsync(Int32) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. Declaration Task<T> GetAndRemoveAtAsync(int index) Parameters Int32 index element to be removed from this list, if present Returns Task <T> the element previously at the specified position"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAndSetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAndSetAsync.html",
    "title": "GetAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSetAsync Method GetAndSetAsync(Int32, T) Replaces the element at the specified position in this list with the specified element. Declaration Task<T> GetAndSetAsync(int index, T item) Parameters Int32 index index index of the element to replace T item element to be stored at the specified position Returns Task <T> The element previously at the specified position"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(Int32) Returns the element in the specified position in this list Declaration Task<T> GetAsync(int index) Parameters Int32 index index of the element to return Returns Task <T> the element at the specified position in the list"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.GetRangeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.GetRangeAsync.html",
    "title": "GetRangeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRangeAsync Method GetRangeAsync(Int32, Int32) Returns a view of the portion of this list between the specified fromIndex , inclusive, and toIndex , exclusive. Declaration Task<IReadOnlyList<T>> GetRangeAsync(int fromIndex, int toIndex) Parameters Int32 fromIndex low endpoint (inclusive) of the subList Int32 toIndex high endpoint (exclusive) of the subList Returns Task < IReadOnlyList <T>> a view of the specified range within this list Remarks If fromIndex and toIndex are equal, the returned list is empty."
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.html",
    "title": "IHList<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHList<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, non-partitioned and listenable list public interface IHList<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddRangeAsync<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.CountAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHList is not a partitioned data-structure. Entire contents of an IHList is stored on a single machine (and in the backup). The IHList will not scale by adding more members to the cluster. Methods GetAndRemoveAtAsync(Int32) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. GetAndSetAsync(Int32, T) Replaces the element at the specified position in this list with the specified element. GetAsync(Int32) Returns the element in the specified position in this list GetRangeAsync(Int32, Int32) Returns a view of the portion of this list between the specified fromIndex , inclusive, and toIndex , exclusive. IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. InsertAsync(Int32, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). InsertRangeAsync<TItem>(Int32, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element."
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html",
    "title": "IndexOfAsync Method | Hazelcast .NET Documentation",
    "keywords": "IndexOfAsync Method IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. Declaration Task<int> IndexOfAsync(T item) Parameters T item element to search for Returns Task < Int32 > the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.InsertAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.InsertAsync.html",
    "title": "InsertAsync Method | Hazelcast .NET Documentation",
    "keywords": "InsertAsync Method InsertAsync(Int32, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). Declaration Task InsertAsync(int index, T item) Parameters Int32 index index at which the specified element is to be inserted T item element to be inserted Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.InsertRangeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.InsertRangeAsync.html",
    "title": "InsertRangeAsync Method | Hazelcast .NET Documentation",
    "keywords": "InsertRangeAsync Method InsertRangeAsync<TItem>(Int32, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. Declaration Task<bool> InsertRangeAsync<TItem>(int index, ICollection<TItem> items) where TItem : T Parameters Int32 index index at which to insert the first element from the specified collection ICollection <TItem> items collection containing elements to be added to this list Returns Task < Boolean > true if this list changed as a result of the call Type Parameters TItem Remarks Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)"
  },
  "dev/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html",
    "title": "LastIndexOfAsync Method | Hazelcast .NET Documentation",
    "keywords": "LastIndexOfAsync Method LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. Declaration Task<int> LastIndexOfAsync(T item) Parameters T item element to search for Returns Task < Int32 > the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.ForceUnlock.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.ForceUnlock.html",
    "title": "ForceUnlock Method | Hazelcast .NET Documentation",
    "keywords": "ForceUnlock Method ForceUnlock() Releases the lock regardless of the lock owner. Declaration void ForceUnlock() Remarks Releases the lock regardless of the lock owner. It always successfully unlocks, never blocks and returns immediately."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.GetLockCount.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.GetLockCount.html",
    "title": "GetLockCount Method | Hazelcast .NET Documentation",
    "keywords": "GetLockCount Method GetLockCount() Returns re-entrant lock hold count, regardless of lock ownership. Declaration int GetLockCount() Returns Int32 lock hold count. Remarks Returns re-entrant lock hold count, regardless of lock ownership."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.GetRemainingLeaseTime.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.GetRemainingLeaseTime.html",
    "title": "GetRemainingLeaseTime Method | Hazelcast .NET Documentation",
    "keywords": "GetRemainingLeaseTime Method GetRemainingLeaseTime() Returns remaining lease time in milliseconds. Declaration long GetRemainingLeaseTime() Returns Int64 remaining lease time in milliseconds. Remarks Returns remaining lease time in milliseconds. If the lock is not locked then -1 will be returned."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.html",
    "title": "IHLock Interface | Hazelcast .NET Documentation",
    "keywords": "IHLock Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Distributed implementation of Lock public interface IHLock : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Methods ForceUnlock() Releases the lock regardless of the lock owner. GetLockCount() Returns re-entrant lock hold count, regardless of lock ownership. GetRemainingLeaseTime() Returns remaining lease time in milliseconds. IsLocked() Returns whether this lock is locked or not. IsLockedByCurrentThread() Returns whether this lock is locked by current thread or not. Lock() Acquires the lock. Lock(TimeSpan) Acquires the lock for the specified lease time. TryLock() Tries to acquires the lock and returns immediately. TryLock(TimeSpan) Tries to acquires the lock for the specified lease time. Unlock() Releases the lock."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.IsLocked.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.IsLocked.html",
    "title": "IsLocked Method | Hazelcast .NET Documentation",
    "keywords": "IsLocked Method IsLocked() Returns whether this lock is locked or not. Declaration bool IsLocked() Returns Boolean true if this lock is locked, false otherwise. Remarks Returns whether this lock is locked or not."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.IsLockedByCurrentThread.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.IsLockedByCurrentThread.html",
    "title": "IsLockedByCurrentThread Method | Hazelcast .NET Documentation",
    "keywords": "IsLockedByCurrentThread Method IsLockedByCurrentThread() Returns whether this lock is locked by current thread or not. Declaration bool IsLockedByCurrentThread() Returns Boolean true if this lock is locked by current thread, false otherwise. Remarks Returns whether this lock is locked by current thread or not."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.Lock.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.Lock.html",
    "title": "Lock Method | Hazelcast .NET Documentation",
    "keywords": "Lock Method Lock() Acquires the lock. Declaration void Lock() Remarks Acquires the lock. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired. Lock(TimeSpan) Acquires the lock for the specified lease time. Declaration void Lock(TimeSpan leaseTime) Parameters TimeSpan leaseTime time to wait before releasing the lock. Remarks Acquires the lock for the specified lease time. After lease time, lock will be released. If the lock is not available then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.TryLock.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.TryLock.html",
    "title": "TryLock Method | Hazelcast .NET Documentation",
    "keywords": "TryLock Method TryLock() Tries to acquires the lock and returns immediately. Declaration bool TryLock() Returns Boolean true if acquires the lock, false otherwise. TryLock(TimeSpan) Tries to acquires the lock for the specified lease time. Declaration bool TryLock(TimeSpan leaseTime) Parameters TimeSpan leaseTime Returns Boolean Remarks Tries to acquires the lock for the specified lease time. After lease time, lock will be released."
  },
  "dev/api/Hazelcast.DistributedObjects.IHLock.Unlock.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHLock.Unlock.html",
    "title": "Unlock Method | Hazelcast .NET Documentation",
    "keywords": "Unlock Method Unlock() Releases the lock. Declaration void Unlock() Remarks Releases the lock."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ClearAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the multi-dictionary. Removes all key-value pairs. Declaration Task ClearAsync() Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsEntryAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsEntryAsync.html",
    "title": "ContainsEntryAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsEntryAsync Method ContainsEntryAsync(TKey, TValue) Returns whether the multi-dictionary contains the given key-value pair. Declaration Task<bool> ContainsEntryAsync(TKey key, TValue value) Parameters TKey key the key whose existence is checked. TValue value the value whose existence is checked. Returns Task < Boolean > true if the multi-dictionary contains the key-value pair, false otherwise."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsKeyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Returns whether the multi-dictionary contains an entry with the key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key the key whose existence is checked. Returns Task < Boolean > true if the multi-dictionary contains an entry with the key, false otherwise."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsValueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.ContainsValueAsync.html",
    "title": "ContainsValueAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsValueAsync Method ContainsValueAsync(TValue) Returns whether the multi-dictionary contains an entry with the value. Declaration Task<bool> ContainsValueAsync(TValue value) Parameters TValue value the value whose existence is checked. Returns Task < Boolean > true if the multi-dictionary contains an entry with the value, false otherwise."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Returns the number of key-value pairs in the multi-dictionary. Declaration Task<int> CountAsync() Returns Task < Int32 > the number of key-value pairs in the multi-dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.CountValuesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.CountValuesAsync.html",
    "title": "CountValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountValuesAsync Method CountValuesAsync(TKey) Returns number of values matching to given key in the multi-dictionary. Declaration Task<int> CountValuesAsync(TKey key) Parameters TKey key the key whose values count are to be returned Returns Task < Int32 > number of values matching to given key in the multi-dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetAndRemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetAndRemoveAsync.html",
    "title": "GetAndRemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndRemoveAsync Method GetAndRemoveAsync(TKey) Removes all the entries with the given key. Declaration Task<IReadOnlyCollection<TValue>> GetAndRemoveAsync(TKey key) Parameters TKey key the key of the entries to remove Returns Task < IReadOnlyCollection <TValue>> the collection of removed values associated with the given key"
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Returns the collection of values associated with the key. Declaration Task<IReadOnlyCollection<TValue>> GetAsync(TKey key) Parameters TKey key the key whose associated values are to be returned Returns Task < IReadOnlyCollection <TValue>> the collection of the values associated with the key."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetEntrySetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetEntrySetAsync.html",
    "title": "GetEntrySetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntrySetAsync Method GetEntrySetAsync() Returns the set of key-value pairs in the multi-dictionary. Declaration Task<IReadOnlyCollection<KeyValuePair<TKey, TValue>>> GetEntrySetAsync() Returns Task < IReadOnlyCollection < KeyValuePair <TKey, TValue>>> the collection of key-value pairs in the multi-dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetKeysAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Returns the set of keys in the multi-dictionary. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Task < IReadOnlyCollection <TKey>> the collection of keys in the multi-dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetValuesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Returns the collection of values in the multi-dictionary. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Task < IReadOnlyCollection <TValue>> the collection of values in the multi-dictionary."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.html",
    "title": "IHMultiDictionary<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHMultiDictionary<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed dictionary whose keys can be associated with multiple values. public interface IHMultiDictionary<TKey, TValue> : IDistributedObject, IAsyncDisposable, IKeyLockable<TKey>, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey TValue Remarks IHMultiDictionary can be configured on Server side to allow duplicate values or not for its values collection Methods ClearAsync() Clears the multi-dictionary. Removes all key-value pairs. ContainsEntryAsync(TKey, TValue) Returns whether the multi-dictionary contains the given key-value pair. ContainsKeyAsync(TKey) Returns whether the multi-dictionary contains an entry with the key. ContainsValueAsync(TValue) Returns whether the multi-dictionary contains an entry with the value. CountAsync() Returns the number of key-value pairs in the multi-dictionary. CountValuesAsync(TKey) Returns number of values matching to given key in the multi-dictionary. GetAndRemoveAsync(TKey) Removes all the entries with the given key. GetAsync(TKey) Returns the collection of values associated with the key. GetEntrySetAsync() Returns the set of key-value pairs in the multi-dictionary. GetKeysAsync() Returns the set of keys in the multi-dictionary. GetValuesAsync() Returns the collection of values in the multi-dictionary. RemoveAsync(TKey) Removes all the entries with the given key. RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-dictionary. SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. TryAddAsync(TKey, TValue) Stores a key-value pair in the multi-dictionary. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-dictionary. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key the key of the entry to remove TValue value the value of the entry to remove Returns Task < Boolean > true if the size of the multi-dictionary changed after the remove operation, false otherwise. RemoveAsync(TKey) Removes all the entries with the given key. Declaration Task RemoveAsync(TKey key) Parameters TKey key the key of the entries to remove Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Action < MultiDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiDictionaryEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Action < MultiDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.TryAddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.TryAddAsync.html",
    "title": "TryAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryAddAsync Method TryAddAsync(TKey, TValue) Stores a key-value pair in the multi-dictionary. Declaration Task<bool> TryAddAsync(TKey key, TValue value) Parameters TKey key the key to be stored TValue value the value to be stored Returns Task < Boolean > true if size of the multi-dictionary is increased, false otherwise. Remarks This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class."
  },
  "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHMultiDictionary-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.DequeueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.DequeueAsync.html",
    "title": "DequeueAsync Method | Hazelcast .NET Documentation",
    "keywords": "DequeueAsync Method DequeueAsync() Retrieves and removes the head of this queue, waiting if necessary until an element becomes available. Declaration Task<T> DequeueAsync() Returns Task <T> the head of this queue"
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html",
    "title": "DrainToAsync Method | Hazelcast .NET Documentation",
    "keywords": "DrainToAsync Method DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items) Parameters ICollection <T> items the collection to transfer elements into Returns Task < Int32 > the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown. DrainToAsync(ICollection<T>, Int32) Removes at most the given number of available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items, int maxElements) Parameters ICollection <T> items the collection to transfer elements into Int32 maxElements the maximum number of elements to transfer Returns Task < Int32 > the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.EnqueueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.EnqueueAsync.html",
    "title": "EnqueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "EnqueueAsync Method EnqueueAsync(T) Inserts the specified element into this queue, waiting if necessary for space to become available. Declaration Task EnqueueAsync(T item) Parameters T item the element to Add Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html",
    "title": "GetRemainingCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRemainingCapacityAsync Method GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. Declaration Task<int> GetRemainingCapacityAsync() Returns Task < Int32 > the remaining capacity Remarks Note that you cannot always tell if an attempt to insert an element will succeed by inspecting GetRemainingCapacityAsync() because it may be the case that another thread is about to insert or remove an element."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.html",
    "title": "IHQueue<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHQueue<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, blocking, distributed, non-partitioned and observable queue. public interface IHQueue<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddRangeAsync<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.CountAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHQueue is not a partitioned data-structure. Entire contents of an IHQueue is stored on a single machine (and in the backup). The IHQueue will not scale by adding more members to the cluster. Methods DequeueAsync() Retrieves and removes the head of this queue, waiting if necessary until an element becomes available. DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. DrainToAsync(ICollection<T>, Int32) Removes at most the given number of available elements from this queue and adds them to the given collection. EnqueueAsync(T) Inserts the specified element into this queue, waiting if necessary for space to become available. GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. TryDequeueAsync(TimeSpan) Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available. TryEnqueueAsync(T, TimeSpan) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. TryPeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryDequeueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryDequeueAsync.html",
    "title": "TryDequeueAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryDequeueAsync Method TryDequeueAsync(TimeSpan) Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available. Declaration Task<T> TryDequeueAsync(TimeSpan timeToWait = default(TimeSpan)) Parameters TimeSpan timeToWait how long to wait before giving up Returns Task <T> the head of this queue, or null if the specified waiting time elapses before an element is available Remarks Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryEnqueueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryEnqueueAsync.html",
    "title": "TryEnqueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryEnqueueAsync Method TryEnqueueAsync(T, TimeSpan) Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. Declaration Task<bool> TryEnqueueAsync(T item, TimeSpan timeToWait = default(TimeSpan)) Parameters T item the element to Add TimeSpan timeToWait how long to wait before giving up Returns Task < Boolean > true if the element was added to this queue, else false Remarks Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available."
  },
  "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryPeekAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHQueue-1.TryPeekAsync.html",
    "title": "TryPeekAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryPeekAsync Method TryPeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Declaration Task<T> TryPeekAsync() Returns Task <T> the head of this queue, or null if this queue is empty"
  },
  "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.html",
    "title": "IHReplicatedDictionary<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHReplicatedDictionary<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed dictionary with weak consistency and values locally stored on every node of the cluster. public interface IHReplicatedDictionary<TKey, TValue> : IHDictionaryBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IHDictionaryBase<TKey, TValue>.GetAsync(TKey) IHDictionaryBase<TKey, TValue>.GetKeysAsync() IHDictionaryBase<TKey, TValue>.GetValuesAsync() IHDictionaryBase<TKey, TValue>.GetEntriesAsync() IHDictionaryBase<TKey, TValue>.CountAsync() IHDictionaryBase<TKey, TValue>.IsEmptyAsync() IHDictionaryBase<TKey, TValue>.ContainsKeyAsync(TKey) IHDictionaryBase<TKey, TValue>.ContainsValueAsync(TValue) IHDictionaryBase<TKey, TValue>.GetAndSetAsync(TKey, TValue) IHDictionaryBase<TKey, TValue>.GetAndSetAsync(TKey, TValue, TimeSpan) IHDictionaryBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHDictionaryBase<TKey, TValue>.ClearAsync() IHDictionaryBase<TKey, TValue>.GetAndRemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey the type of keys maintained by this map TValue the type of mapped values Remarks Whenever a value is written asynchronously, the new value will be internally distributed to all existing cluster members, and eventually every node will have the new value. When a new node joins the cluster, the new node initially will request existing values from older nodes and replicate them locally. Methods SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, TKey, IPredicate, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, TKey, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, IPredicate, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, Object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>> events, object state = null) Parameters Action < ReplicatedDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, TKey, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>> events, TKey key, object state = null) Parameters Action < ReplicatedDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, IPredicate, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>> events, IPredicate predicate, object state = null) Parameters Action < ReplicatedDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>>, TKey, IPredicate, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedDictionaryEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, object state = null) Parameters Action < ReplicatedDictionaryEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription."
  },
  "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHReplicatedDictionary-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Adds an item to the tail of the Ringbuffer. Declaration Task<long> AddAsync(TItem item) Parameters TItem item the item to Add. Returns Task < Int64 > the sequence of the added item. Remarks Adds an item to the tail of the Ringbuffer. If there is no space in the Ringbuffer, the Add will overwrite the oldest item in the ringbuffer no matter what the ttl is. For more control on this behavior, check the AddAsync(TItem) and the OverflowPolicy . The returned value is the sequence of the added item. Using this sequence you can read the added item. Using the sequence as id This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and use the returned sequence as initial id. On the reading side, this dummy item should be discard. Please keep in mind that this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used to find that item. Exceptions ArgumentNullException if item is null. See Also AddAsync(TItem) AddAsync<TAdding>(ICollection<TAdding>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. Declaration Task<long> AddAsync<TAdding>(ICollection<TAdding> items, OverflowPolicy overflowPolicy) where TAdding : TItem Parameters ICollection <TAdding> items the batch of items to Add. OverflowPolicy overflowPolicy overflow policy to use Returns Task < Int64 > the ICompletableFuture to synchronize on completion. Type Parameters TAdding Remarks Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls to due to better io utilization and a reduced number of executed operations. If the batch is empty, the call is ignored. When the collection is not empty, the content is copied into a different data-structure. This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection. If an addAll is executed concurrently with an Add or addAll, no guarantee is given that items are contiguous. The result of the future contains the sequenceId of the last written item Exceptions ArgumentNullException if batch is null, or if an item in this batch is null or if overflowPolicy is null ArgumentException if collection is empty AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } Declaration Task<long> AddAsync(TItem item, OverflowPolicy overflowPolicy) Parameters TItem item the item to Add OverflowPolicy overflowPolicy the OverflowPolicy to use. Returns Task < Int64 > the sequenceId of the added item, or -1 if the Add failed. Exceptions ArgumentNullException if item or overflowPolicy is null."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Returns number of items in the ringbuffer. Declaration Task<long> CountAsync() Returns Task < Int64 > the size. Remarks Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the head completed the first loop around the ring. This is because no items are getting retired."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(Int64, Int32, Int32) Reads a batch of items from the Ringbuffer. Declaration Task<IReadOnlyList<TItem>> GetAsync(long startSequence, int minCount, int maxCount) Parameters Int64 startSequence the startSequence of the first item to read. Int32 minCount the minimum number of items to read. Int32 maxCount the maximum number of items to read. Returns Task < IReadOnlyList <TItem>> a future containing the items read. Remarks Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount. If there are less items available than minCount, then this call blocks. Reading a batch of items is likely to perform better because less overhead is involved. Exceptions ArgumentException if startSequence is smaller than 0 or if startSequence larger than or if minCount smaller than 0 or if minCount larger than maxCount, or if maxCount larger than the capacity of the ringbuffer or if maxCount larger than 1000 (to prevent overload) GetAsync(Int64) Reads one item from the Ringbuffer. Declaration ValueTask<TItem> GetAsync(long sequence) Parameters Int64 sequence the sequence of the item to read. Returns ValueTask <TItem> the read item Remarks Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an item is added. This means that the ringbuffer can be processed using the following idiom: Ringbuffer<String> ringbuffer = hz.GetRingbuffer(\"rb\"); long seq = ringbuffer.HeadSequence(); while(true){ String item = ringbuffer.ReadOne(seq); seq++; ... process item } This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this call is going to block. In the future we could Add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit). Exceptions ArgumentException if sequence is smaller than 0 or larger than +1. Exception if the call is interrupted while blocking."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html",
    "title": "GetCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetCapacityAsync Method GetCapacityAsync() Returns the capacity of this Ringbuffer. Declaration Task<long> GetCapacityAsync() Returns Task < Int64 > the capacity."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html",
    "title": "GetHeadSequenceAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetHeadSequenceAsync Method GetHeadSequenceAsync() Returns the sequence of the head. Declaration Task<long> GetHeadSequenceAsync() Returns Task < Int64 > the sequence of the head. Remarks Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer are found. If the RingBuffer is empty, the head will be one more than the tail. The initial value of the head is 0 (1 more than tail)."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html",
    "title": "GetRemainingCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRemainingCapacityAsync Method GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. Declaration Task<long> GetRemainingCapacityAsync() Returns Task < Int64 > the remaining capacity. Remarks Returns the remaining capacity of the ringbuffer. The returned value could be stale as soon as it is returned. If ttl is not set, the remaining capacity will always be the capacity."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html",
    "title": "GetTailSequenceAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetTailSequenceAsync Method GetTailSequenceAsync() Returns the sequence of the tail. Declaration Task<long> GetTailSequenceAsync() Returns Task < Int64 > the sequence of the tail. Remarks Returns the sequence of the tail. The tail is the side of the ringbuffer where the items are added to. The initial value of the tail is -1."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html",
    "title": "IHRingBuffer<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHRingBuffer<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll A Ringbuffer is a data-structure where the content is stored in a ring like structure. public interface IHRingBuffer<TItem> : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Remarks A Ringbuffer is a data-structure where the content is stored in a ring like structure. A ringbuffer has a capacity so it won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest item in the ringbuffer is overwritten. The ringbuffer has 2 always incrementing sequences: tailSequence: this is the side where the youngest item is found. So the tail is the side of the ringbuffer where items are added to. headSequence: this is the side where the oldest items are found. So the head is the side where items gets discarded. The items in the ringbuffer can be found by a sequence that is in between (inclusive) the head and tail sequence. If data is read from a ringbuffer with a sequence that is smaller than the headSequence, it means that the data is not available anymore and a is thrown. A Ringbuffer currently is not a distributed data-structure. So all data is stored in a single partition; comparable to the IQueue implementation. But we'll provide an option to partition the data in the near future. A Ringbuffer can be used in a similar way as a queue, but one of the key differences is that a queue.take is destructive, meaning that only 1 thread is able to take an item. A ringbuffer.read is not destructive, so you can have multiple threads reading the same item multiple times. The Ringbuffer is the backing data-structure for the reliable IHTopic<T> implementation. Properties MaxBatchSize Methods AddAsync(TItem) Adds an item to the tail of the Ringbuffer. AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } AddAsync<TAdding>(ICollection<TAdding>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. CountAsync() Returns number of items in the ringbuffer. GetAsync(Int64) Reads one item from the Ringbuffer. GetAsync(Int64, Int32, Int32) Reads a batch of items from the Ringbuffer. GetCapacityAsync() Returns the capacity of this Ringbuffer. GetHeadSequenceAsync() Returns the sequence of the head. GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. GetTailSequenceAsync() Returns the sequence of the tail."
  },
  "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html",
    "title": "MaxBatchSize Property | Hazelcast .NET Documentation",
    "keywords": "MaxBatchSize Property MaxBatchSize Declaration int MaxBatchSize { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.DistributedObjects.IHSet-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHSet-1.html",
    "title": "IHSet<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHSet<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, non-partitioned and listenable set public interface IHSet<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddRangeAsync<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.CountAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHSet is not a partitioned data-structure. Entire contents of an IHSet is stored on a single machine (and in the backup). The IHSet will not scale by adding more members to the cluster."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTopic-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTopic-1.html",
    "title": "IHTopic<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTopic<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. public interface IHTopic<T> : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters T Remarks Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. Publish and subscriptions are cluster-wide. When a member subscribes for a topic, it is actually registering for messages published by any member in the cluster, including the new members joined after you added the listener. Messages are ordered, meaning, listeners(subscribers) will process the messages in the order they are actually published. If cluster member M publishes messages m1, m2, m3...mn to a topic T, then Hazelcast makes sure that all of the subscribers of topic T will receive and process m1, m2, m3...mn in order. Methods PublishAsync(T) Publishes the message to all subscribers of this topic SubscribeAsync(Action<TopicEventHandlers<T>>, Object) Subscribes to this topic. UnsubscribeAsync(Guid) Stops receiving messages for the given message listener."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html",
    "title": "PublishAsync Method | Hazelcast .NET Documentation",
    "keywords": "PublishAsync Method PublishAsync(T) Publishes the message to all subscribers of this topic Declaration Task PublishAsync(T message) Parameters T message Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<TopicEventHandlers<T>>, Object) Subscribes to this topic. Declaration Task<Guid> SubscribeAsync(Action<TopicEventHandlers<T>> events, object state = null) Parameters Action < TopicEventHandlers <T>> events Object state A state object. Returns Task < Guid >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Stops receiving messages for the given message listener. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId Id of listener registration. Returns ValueTask < Boolean > Whether the operation completed successfully. Remarks Stops receiving messages for the given message listener. If the given listener already removed, this method does nothing."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.ContainsKeyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Transactional implementation of . Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key Returns Task < Boolean >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Transactional implementation of . Declaration Task<int> CountAsync() Returns Task < Int32 >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAndRemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAndRemoveAsync.html",
    "title": "GetAndRemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndRemoveAsync Method GetAndRemoveAsync(TKey) Transactional implementation of . Declaration Task<TValue> GetAndRemoveAsync(TKey key) Parameters TKey key Returns Task <TValue> Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAndSetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAndSetAsync.html",
    "title": "GetAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSetAsync Method GetAndSetAsync(TKey, TValue) Transactional implementation of . Declaration Task<TValue> GetAndSetAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed. GetAndSetAsync(TKey, TValue, TimeSpan) Transactional implementation of . Declaration Task<TValue> GetAndSetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live. Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Transactional implementation of . Declaration Task<TValue> GetAsync(TKey key) Parameters TKey key Returns Task <TValue>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetForUpdateAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetForUpdateAsync.html",
    "title": "GetForUpdateAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetForUpdateAsync Method GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. Declaration Task<TValue> GetForUpdateAsync(TKey key) Parameters TKey key Returns Task <TValue> Remarks The lock will be released at the end of the transaction (either commit or rollback)."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetKeysAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Transactional implementation of . Declaration Task<IReadOnlyList<TKey>> GetKeysAsync() Returns Task < IReadOnlyList <TKey>> All keys. GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate) . Declaration Task<IReadOnlyList<TKey>> GetKeysAsync(IPredicate predicate) Parameters IPredicate predicate An predicate to filter the entries with. Returns Task < IReadOnlyList <TKey>> All keys matching the predicate."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetOrAddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetOrAddAsync.html",
    "title": "GetOrAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetOrAddAsync Method GetOrAddAsync(TKey, TValue) Transactional implementation of GetOrAddAsync(TKey, TValue) . Declaration Task<TValue> GetOrAddAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetValuesAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Transactional implementation of . Declaration Task<IReadOnlyList<TValue>> GetValuesAsync() Returns Task < IReadOnlyList <TValue>> GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate) . Declaration Task<IReadOnlyList<TValue>> GetValuesAsync(IPredicate predicate) Parameters IPredicate predicate Returns Task < IReadOnlyList <TValue>>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.html",
    "title": "IHTxDictionary<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxDictionary<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a transactional distributed dictionary. public interface IHTxDictionary<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TKey key type TValue Value type Methods ContainsKeyAsync(TKey) Transactional implementation of . CountAsync() Transactional implementation of . GetAndRemoveAsync(TKey) Transactional implementation of . GetAndSetAsync(TKey, TValue) Transactional implementation of . GetAndSetAsync(TKey, TValue, TimeSpan) Transactional implementation of . GetAsync(TKey) Transactional implementation of . GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. GetKeysAsync() Transactional implementation of . GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate) . GetOrAddAsync(TKey, TValue) Transactional implementation of GetOrAddAsync(TKey, TValue) . GetValuesAsync() Transactional implementation of . GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate) . IsEmptyAsync() Transactional implementation of . RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey) . RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue) . SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue) . SetAsync(TKey, TValue, TimeSpan) Transactional implementation of SetAsync(TKey, TValue, TimeSpan) . TryUpdateAsync(TKey, TValue) Transactional implementation of TryUpdateAsync(TKey, TValue) . TryUpdateAsync(TKey, TValue, TValue) Transactional implementation of TryUpdateAsync(TKey, TValue, TValue) ."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.IsEmptyAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Transactional implementation of . Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if the map does not contain entries; otherwise false ."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey) . Declaration Task RemoveAsync(TKey key) Parameters TKey key Returns Task RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue) . Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean > Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.SetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue) . Declaration Task SetAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed. SetAsync(TKey, TValue, TimeSpan) Transactional implementation of SetAsync(TKey, TValue, TimeSpan) . Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live. Returns Task Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.TryUpdateAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxDictionary-2.TryUpdateAsync.html",
    "title": "TryUpdateAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryUpdateAsync Method TryUpdateAsync(TKey, TValue) Transactional implementation of TryUpdateAsync(TKey, TValue) . Declaration Task<TValue> TryUpdateAsync(TKey key, TValue newValue) Parameters TKey key A key. TValue newValue The new value. Returns Task <TValue> Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed. TryUpdateAsync(TKey, TValue, TValue) Transactional implementation of TryUpdateAsync(TKey, TValue, TValue) . Declaration Task<bool> TryUpdateAsync(TKey key, TValue oldValue, TValue newValue) Parameters TKey key TValue oldValue TValue newValue Returns Task < Boolean > Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Add new item to transactional list Declaration Task<bool> AddAsync(TItem item) Parameters TItem item item Returns Task < Boolean > true if item is added successfully"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxList-1.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxList-1.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Returns the size of the list Declaration Task<int> CountAsync() Returns Task < Int32 > size"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxList-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxList-1.html",
    "title": "IHTxList<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxList<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public interface IHTxList<TItem> Type Parameters TItem Methods AddAsync(TItem) Add new item to transactional list CountAsync() Returns the size of the list RemoveAsync(TItem) Add item from transactional list"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TItem) Add item from transactional list Declaration Task<bool> RemoveAsync(TItem item) Parameters TItem item item Returns Task < Boolean > true if item is remove successfully"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Declaration Task<int> CountAsync() Returns Task < Int32 >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Declaration Task<IReadOnlyList<TValue>> GetAsync(TKey key) Parameters TKey key Returns Task < IReadOnlyList <TValue>>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.html",
    "title": "IHTxMultiDictionary<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxMultiDictionary<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of MultiMap public interface IHTxMultiDictionary<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TKey TValue Methods CountAsync() GetAsync(TKey) RemoveAsync(TKey) RemoveAsync(TKey, TValue) TryAddAsync(TKey, TValue) ValueCountAsync(TKey)"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean > RemoveAsync(TKey) Declaration Task<IReadOnlyList<TValue>> RemoveAsync(TKey key) Parameters TKey key Returns Task < IReadOnlyList <TValue>>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.TryAddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.TryAddAsync.html",
    "title": "TryAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryAddAsync Method TryAddAsync(TKey, TValue) Declaration Task<bool> TryAddAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.ValueCountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxMultiDictionary-2.ValueCountAsync.html",
    "title": "ValueCountAsync Method | Hazelcast .NET Documentation",
    "keywords": "ValueCountAsync Method ValueCountAsync(TKey) Declaration Task<int> ValueCountAsync(TKey key) Parameters TKey key Returns Task < Int32 >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Declaration Task<int> CountAsync() Returns Task < Int32 >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.DequeueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.DequeueAsync.html",
    "title": "DequeueAsync Method | Hazelcast .NET Documentation",
    "keywords": "DequeueAsync Method DequeueAsync() Declaration Task<TItem> DequeueAsync() Returns Task <TItem>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.html",
    "title": "IHTxQueue<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxQueue<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of Queue public interface IHTxQueue<TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Methods CountAsync() DequeueAsync() PeekAsync() TryDequeueAsync() TryDequeueAsync(TimeSpan) TryEnqueueAsync(TItem) TryEnqueueAsync(TItem, TimeSpan) TryPeekAsync(TimeSpan)"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html",
    "title": "PeekAsync Method | Hazelcast .NET Documentation",
    "keywords": "PeekAsync Method PeekAsync() Declaration Task<TItem> PeekAsync() Returns Task <TItem>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryDequeueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryDequeueAsync.html",
    "title": "TryDequeueAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryDequeueAsync Method TryDequeueAsync() Declaration Task<TItem> TryDequeueAsync() Returns Task <TItem> TryDequeueAsync(TimeSpan) Declaration Task<TItem> TryDequeueAsync(TimeSpan timeToWait) Parameters TimeSpan timeToWait Returns Task <TItem>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryEnqueueAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryEnqueueAsync.html",
    "title": "TryEnqueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryEnqueueAsync Method TryEnqueueAsync(TItem) Declaration Task<bool> TryEnqueueAsync(TItem item) Parameters TItem item Returns Task < Boolean > TryEnqueueAsync(TItem, TimeSpan) Declaration Task<bool> TryEnqueueAsync(TItem item, TimeSpan timeToWait) Parameters TItem item TimeSpan timeToWait Returns Task < Boolean >"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryPeekAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxQueue-1.TryPeekAsync.html",
    "title": "TryPeekAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryPeekAsync Method TryPeekAsync(TimeSpan) Declaration Task<TItem> TryPeekAsync(TimeSpan timeToWait) Parameters TimeSpan timeToWait Returns Task <TItem>"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Add new item to transactional set Declaration Task<bool> AddAsync(TItem item) Parameters TItem item Returns Task < Boolean > true if item is added successfully"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.CountAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.CountAsync.html",
    "title": "CountAsync Method | Hazelcast .NET Documentation",
    "keywords": "CountAsync Method CountAsync() Returns the size of the set Declaration Task<int> CountAsync() Returns Task < Int32 > size"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.html",
    "title": "IHTxSet<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxSet<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of IHSet<T> . public interface IHTxSet<in TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Methods AddAsync(TItem) Add new item to transactional set CountAsync() Returns the size of the set RemoveAsync(TItem) Add item from transactional set"
  },
  "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TItem) Add item from transactional set Declaration Task<bool> RemoveAsync(TItem item) Parameters TItem item Returns Task < Boolean > true if item is remove successfully"
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html",
    "title": "ForceUnlockAsync Method | Hazelcast .NET Documentation",
    "keywords": "ForceUnlockAsync Method ForceUnlockAsync(TKey) Force-unlocks an entry. Declaration Task ForceUnlockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the entry has been unlocked. Remarks The entry is unlocked, regardless of the lock owner. This always succeeds, never blocks, and returns immediately."
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.html",
    "title": "IKeyLockable<TKey> Interface | Hazelcast .NET Documentation",
    "keywords": "IKeyLockable<TKey> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public interface IKeyLockable<TKey> Type Parameters TKey Methods ForceUnlockAsync(TKey) Force-unlocks an entry. IsLockedAsync(TKey) Determines whether an entry is locked. LockAsync(TKey) Locks an entry. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), TryLockAsync(TKey) Tries to lock an entry immediately. TryLockAsync(TKey, TimeSpan) Tries to lock an entry with a server-side timeout. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), with a server-side timeout. UnlockAsync(TKey) Unlocks an entry."
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html",
    "title": "IsLockedAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsLockedAsync Method IsLockedAsync(TKey) Determines whether an entry is locked. Declaration Task<bool> IsLockedAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task < Boolean > true if the entry is locked; otherwise false ."
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html",
    "title": "LockAsync Method | Hazelcast .NET Documentation",
    "keywords": "LockAsync Method LockAsync(TKey) Locks an entry. Declaration Task LockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will waiting until the lock can be acquired. Locks are re-entrant, but counted: if a key is locked N times, then it should be unlocked N times before another thread can lock it. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), Declaration Task LockAsync(TKey key, TimeSpan leaseTime) Parameters TKey key The key identifying the entry. TimeSpan leaseTime The lease time. Returns Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will waiting until the lock can be acquired. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the specified leaseTime . If leaseTime is InfiniteTimeSpan , the lock is never released."
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html",
    "title": "TryLockAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryLockAsync Method TryLockAsync(TKey) Tries to lock an entry immediately. Declaration Task<bool> TryLockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task < Boolean > true if the lock was acquired; otherwise false . Remarks If the entry cannot be locked, returns false immediately. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. TryLockAsync(TKey, TimeSpan) Tries to lock an entry with a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait) Parameters TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock. Returns Task < Boolean > true if the lock was acquired; otherwise false . Remarks If the entry cannot be locked after timeToWait , returns false . If timeToWait is InfiniteTimeSpan , waits forever. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), with a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait, TimeSpan leaseTime) Parameters TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock. TimeSpan leaseTime The lease time. Returns Task < Boolean > true if the lock was acquired; otherwise false . Remarks If the entry cannot be locked after timeToWait , returns false . If timeToWait is InfiniteTimeSpan , waits forever. If acquired, the lock is automatically released after the specified . If leaseTime is InfiniteTimeSpan , the lock is never released. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html",
    "title": "UnlockAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnlockAsync Method UnlockAsync(TKey) Unlocks an entry. Declaration Task UnlockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the entry has been unlocked. Remarks An entry can be unlocked only by the owner of the lock. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "dev/api/Hazelcast.DistributedObjects.IndexConfigExtensions.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IndexConfigExtensions.html",
    "title": "IndexConfigExtensions Class | Hazelcast .NET Documentation",
    "keywords": "IndexConfigExtensions Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Provides extension methods to the IndexConfig class. public static class IndexConfigExtensions Inheritance Object IndexConfigExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods ValidateAndNormalize(IndexConfig, String)"
  },
  "dev/api/Hazelcast.DistributedObjects.IndexConfigExtensions.ValidateAndNormalize.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IndexConfigExtensions.ValidateAndNormalize.html",
    "title": "ValidateAndNormalize Method | Hazelcast .NET Documentation",
    "keywords": "ValidateAndNormalize Method ValidateAndNormalize(IndexConfig, String) Declaration public static IndexConfig ValidateAndNormalize(this IndexConfig config, string mapName) Parameters IndexConfig config String mapName Returns IndexConfig"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.AddAndGetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.AddAndGetAsync.html",
    "title": "AddAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAndGetAsync Method AddAndGetAsync(Int64) Adds the given value to the current value Declaration Task<long> AddAndGetAsync(long delta) Parameters Int64 delta the value to Add Returns Task < Int64 > the updated value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.DecrementAndGetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.DecrementAndGetAsync.html",
    "title": "DecrementAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "DecrementAndGetAsync Method DecrementAndGetAsync() Decrements by one the current value. Declaration Task<long> DecrementAndGetAsync() Returns Task < Int64 > the updated value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndAddAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndAddAsync.html",
    "title": "GetAndAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndAddAsync Method GetAndAddAsync(Int64) Adds the given value to the current value. Declaration Task<long> GetAndAddAsync(long delta) Parameters Int64 delta the value to Add Returns Task < Int64 > The previous value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndDecrementAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndDecrementAsync.html",
    "title": "GetAndDecrementAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndDecrementAsync Method GetAndDecrementAsync() Decrements by one the current value. Declaration Task<long> GetAndDecrementAsync() Returns Task < Int64 > the previous value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndIncrementAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndIncrementAsync.html",
    "title": "GetAndIncrementAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndIncrementAsync Method GetAndIncrementAsync() Increments by one the current value. Declaration Task<long> GetAndIncrementAsync() Returns Task < Int64 > the previous value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndSubtractAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAndSubtractAsync.html",
    "title": "GetAndSubtractAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSubtractAsync Method GetAndSubtractAsync(Int64) Subtracts the given value from the current value. Declaration Task<long> GetAndSubtractAsync(long delta) Parameters Int64 delta the value to Add Returns Task < Int64 > the previous value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync() Returns the current value of the counter. Declaration Task<long> GetAsync() Returns Task < Int64 > The current value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.html",
    "title": "IPNCounter Interface | Hazelcast .NET Documentation",
    "keywords": "IPNCounter Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll PN (Positive-Negative) CRDT counter. public interface IPNCounter : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Remarks The counter supports adding and subtracting values as well as retrieving the current counter value. Each replica of this counter can perform operations locally without coordination with the other replicas, thus increasing availability. The counter guarantees that whenever two nodes have received the same set of updates, possibly in a different order, their state is identical, and any conflicting updates are merged automatically. If no new updates are made to the shared state, all nodes that can communicate will eventually have the same data. The updates to this counter are applied locally when invoked on a CRDT replica. A replica can be any hazelcast instance which is not a client or a lite member. The number of replicas in the cluster is determined by the PNCounterConfig configuration value. When invoking updates from non-replica instance, the invocation is remote. This may lead to indeterminate state - the update may be applied but the response has not been received. In this case, the caller will be notified with a TargetDisconnectedException when invoking from a client. The read and write methods provide monotonic read and RYW(read - your - write) guarantees. These guarantees are session guarantees which means that if no replica with the previously observed state is reachable, the session guarantees are lost and the method invocation will throw a . This does not mean that an update is lost.All of the updates are part of some replica and will be eventually reflected in the state of all other replicas. This exception just means that you cannot observe your own writes because all replicas that contain your updates are currently unreachable. After you have received a , you can either wait for a sufficiently up - to - date replica to become reachable in which case the session can be continued or you can reset the session by calling the method. If you have called the method, a new session is started with the next invocation to a CRDT replica. NOTE: The CRDT state is kept entirely on non-lite(data) members. If there aren't any and the methods here are invoked on a lite member, they will fail with an Methods AddAndGetAsync(Int64) Adds the given value to the current value DecrementAndGetAsync() Decrements by one the current value. GetAndAddAsync(Int64) Adds the given value to the current value. GetAndDecrementAsync() Decrements by one the current value. GetAndIncrementAsync() Increments by one the current value. GetAndSubtractAsync(Int64) Subtracts the given value from the current value. GetAsync() Returns the current value of the counter. IncrementAndGetAsync() Increments by one the current value. ResetAsync() Resets the observed state by this PN counter. This method may be used after a method invocation has thrown a to reset the proxy and to be able to start a new session. SubtractAndGetAsync(Int64) Subtracts the given value from the current value."
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.IncrementAndGetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.IncrementAndGetAsync.html",
    "title": "IncrementAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "IncrementAndGetAsync Method IncrementAndGetAsync() Increments by one the current value. Declaration Task<long> IncrementAndGetAsync() Returns Task < Int64 > the updated value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.ResetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.ResetAsync.html",
    "title": "ResetAsync Method | Hazelcast .NET Documentation",
    "keywords": "ResetAsync Method ResetAsync() Resets the observed state by this PN counter. This method may be used after a method invocation has thrown a to reset the proxy and to be able to start a new session. Declaration Task ResetAsync() Returns Task"
  },
  "dev/api/Hazelcast.DistributedObjects.IPNCounter.SubtractAndGetAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.IPNCounter.SubtractAndGetAsync.html",
    "title": "SubtractAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubtractAndGetAsync Method SubtractAndGetAsync(Int64) Subtracts the given value from the current value. Declaration Task<long> SubtractAndGetAsync(long delta) Parameters Int64 delta the value to subtract Returns Task < Int64 > the updated value Exceptions NotSupportedException if the cluster version is less than 3.10"
  },
  "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.EventType.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.EventType.html",
    "title": "EventType Property | Hazelcast .NET Documentation",
    "keywords": "EventType Property EventType Gets the handled event type. Declaration TopicEventTypes EventType { get; } Property Value TopicEventTypes"
  },
  "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(IHTopic<T>, MemberInfo, Int64, T, Object) Handles an event. Declaration ValueTask HandleAsync(IHTopic<T> sender, MemberInfo member, long publishTime, T payload, object state) Parameters IHTopic <T> sender The IHTopic<T> that triggered the event. MemberInfo member The member. Int64 publishTime The publish time. T payload The topic object carried by the message. Object state A state object. Returns ValueTask"
  },
  "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html",
    "title": "ITopicEventHandler<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ITopicEventHandler<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a topic event handler. public interface ITopicEventHandler<T> Type Parameters T The topic objects type. Properties EventType Gets the handled event type. Methods HandleAsync(IHTopic<T>, MemberInfo, Int64, T, Object) Handles an event."
  },
  "dev/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html",
    "title": "ITransactionalDistributedObject Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionalDistributedObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base contract for all transactional Hazelcast distributed objects. public interface ITransactionalDistributedObject : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Properties TransactionId Gets the unique identifier of the transaction."
  },
  "dev/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html",
    "title": "TransactionId Property | Hazelcast .NET Documentation",
    "keywords": "TransactionId Property TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.DistributedObjects.ITransactionalObject.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ITransactionalObject.html",
    "title": "ITransactionalObject Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionalObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Marker interface for all transactional distributed objects. public interface ITransactionalObject : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Remarks Marker interface for all transactional distributed objects."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.Cleared.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public MultiDictionaryEventHandlers<TKey, TValue> Cleared(Action<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs> handler) Parameters Action < IHMultiDictionary <TKey, TValue>, DictionaryClearedEventArgs > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public MultiDictionaryEventHandlers<TKey, TValue> Cleared(Func<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask> handler) Parameters Func < IHMultiDictionary <TKey, TValue>, DictionaryClearedEventArgs , ValueTask > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryAdded.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryAdded(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryAdded(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryMerged.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryMerged(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryMerged(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryRemoved.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryRemoved(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryRemoved(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryUpdated.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryUpdated(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public MultiDictionaryEventHandlers<TKey, TValue> EntryUpdated(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.MultiDictionaryEventHandlers-2.html",
    "title": "MultiDictionaryEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MultiDictionaryEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents multi distributed dictionary event handlers. public class MultiDictionaryEventHandlers<TKey, TValue> : EventHandlersBase<IDictionaryEventHandlerBase>, IEnumerable<IDictionaryEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IDictionaryEventHandlerBase > MultiDictionaryEventHandlers<TKey, TValue> Implements IEnumerable < IDictionaryEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IDictionaryEventHandlerBase>.Add(IDictionaryEventHandlerBase) EventHandlersBase<IDictionaryEventHandlerBase>.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.Remove(IDictionaryEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. TValue The type of the values. Methods Cleared(Action<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHMultiDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHMultiDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.DistributedObjects.OverflowPolicy.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.OverflowPolicy.html",
    "title": "OverflowPolicy Enum | Hazelcast .NET Documentation",
    "keywords": "OverflowPolicy Enum Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. public enum OverflowPolicy Remarks Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. Overflowing happens when a time-to-live is set and the oldest item in the ringbuffer (the head) is not old enough to expire. Fields Fail Using this policy the call will fail immediately and the oldest item will not be overwritten before it is old enough to retire. Overwrite Using this policy the oldest item is overwritten no matter it is not old enough to retire. Extension Methods EnumExtensions.HasAll<OverflowPolicy>(OverflowPolicy) EnumExtensions.HasAny<OverflowPolicy>(OverflowPolicy)"
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.Cleared.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> Cleared(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs> handler) Parameters Action < IHReplicatedDictionary <TKey, TValue>, DictionaryClearedEventArgs > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> Cleared(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask> handler) Parameters Func < IHReplicatedDictionary <TKey, TValue>, DictionaryClearedEventArgs , ValueTask > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryAdded.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryAdded(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryAdded(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryMerged.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryMerged(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryMerged(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryRemoved.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryRemoved(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryRemoved(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryUpdated.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryUpdated(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedDictionaryEventHandlers<TKey, TValue> EntryUpdated(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedDictionary <TKey, TValue>, DictionaryEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedDictionaryEventHandlers <TKey, TValue> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.ReplicatedDictionaryEventHandlers-2.html",
    "title": "ReplicatedDictionaryEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "ReplicatedDictionaryEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents replicated distributed dictionary event handlers. public class ReplicatedDictionaryEventHandlers<TKey, TValue> : EventHandlersBase<IDictionaryEventHandlerBase>, IEnumerable<IDictionaryEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IDictionaryEventHandlerBase > ReplicatedDictionaryEventHandlers<TKey, TValue> Implements IEnumerable < IDictionaryEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IDictionaryEventHandlerBase>.Add(IDictionaryEventHandlerBase) EventHandlersBase<IDictionaryEventHandlerBase>.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IDictionaryEventHandlerBase>.Remove(IDictionaryEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. TValue The type of the values. Methods Cleared(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHReplicatedDictionary<TKey, TValue>, DictionaryEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html",
    "title": "TopicEventHandlers<T> Class | Hazelcast .NET Documentation",
    "keywords": "TopicEventHandlers<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represent topic event handlers. public sealed class TopicEventHandlers<T> : EventHandlersBase<ITopicEventHandler<T>>, IEnumerable<ITopicEventHandler<T>>, IEnumerable Inheritance Object EventHandlersBase < ITopicEventHandler <T>> TopicEventHandlers<T> Implements IEnumerable < ITopicEventHandler <T>> IEnumerable Inherited Members EventHandlersBase<ITopicEventHandler<T>>.Add(ITopicEventHandler<T>) EventHandlersBase<ITopicEventHandler<T>>.GetEnumerator() EventHandlersBase<ITopicEventHandler<T>>.IEnumerable.GetEnumerator() EventHandlersBase<ITopicEventHandler<T>>.Remove(ITopicEventHandler<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic message type. Methods Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html",
    "title": "Message Method | Hazelcast .NET Documentation",
    "keywords": "Message Method Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Action<IHTopic<T>, TopicMessageEventArgs<T>> handler) Parameters Action < IHTopic <T>, TopicMessageEventArgs <T>> handler The handler. Returns TopicEventHandlers <T> The handlers. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask> handler) Parameters Func < IHTopic <T>, TopicMessageEventArgs <T>, ValueTask > handler The handler. Returns TopicEventHandlers <T> The handlers."
  },
  "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html",
    "title": "TopicMessageEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "TopicMessageEventArgs Constructor TopicMessageEventArgs(MemberInfo, Int64, T, Object) Initializes a new instance of the TopicMessageEventArgs<T> class. Declaration public TopicMessageEventArgs(MemberInfo member, long publishTime, T payload, object state) Parameters MemberInfo member The member. Int64 publishTime The publish time. T payload The object. Object state A state object"
  },
  "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html",
    "title": "TopicMessageEventArgs<T> Class | Hazelcast .NET Documentation",
    "keywords": "TopicMessageEventArgs<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for the Message event. public sealed class TopicMessageEventArgs<T> : EventArgsBase Inheritance Object EventArgsBase TopicMessageEventArgs<T> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic object type. Constructors TopicMessageEventArgs(MemberInfo, Int64, T, Object) Initializes a new instance of the TopicMessageEventArgs<T> class. Properties Member Gets the member. Payload Gets the topic object carried by the message. PublishTime Gets the message publish time."
  },
  "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html",
    "title": "Payload Property | Hazelcast .NET Documentation",
    "keywords": "Payload Property Payload Gets the topic object carried by the message. Declaration public T Payload { get; } Property Value T"
  },
  "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html": {
    "href": "dev/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html",
    "title": "PublishTime Property | Hazelcast .NET Documentation",
    "keywords": "PublishTime Property PublishTime Gets the message publish time. Declaration public long PublishTime { get; } Property Value Int64"
  },
  "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.-ctor.html",
    "title": "ClientLifecycleEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "ClientLifecycleEventArgs Constructor ClientLifecycleEventArgs(ClientLifecycleState) Declaration public ClientLifecycleEventArgs(ClientLifecycleState state) Parameters ClientLifecycleState state"
  },
  "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.html": {
    "href": "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.html",
    "title": "ClientLifecycleEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "ClientLifecycleEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public class ClientLifecycleEventArgs Inheritance Object ClientLifecycleEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ClientLifecycleEventArgs(ClientLifecycleState) Properties State Gets the new state."
  },
  "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.State.html": {
    "href": "dev/api/Hazelcast.Events.ClientLifecycleEventArgs.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the new state. Declaration public ClientLifecycleState State { get; } Property Value ClientLifecycleState"
  },
  "dev/api/Hazelcast.Events.ClientLifecycleState.html": {
    "href": "dev/api/Hazelcast.Events.ClientLifecycleState.html",
    "title": "ClientLifecycleState Enum | Hazelcast .NET Documentation",
    "keywords": "ClientLifecycleState Enum Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public enum ClientLifecycleState Fields Connected Disconnected Shutdown ShuttingDown Started Starting Extension Methods EnumExtensions.HasAll<ClientLifecycleState>(ClientLifecycleState) EnumExtensions.HasAny<ClientLifecycleState>(ClientLifecycleState)"
  },
  "dev/api/Hazelcast.Events.ConnectionLifecycleEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.ConnectionLifecycleEventArgs.-ctor.html",
    "title": "ConnectionLifecycleEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "ConnectionLifecycleEventArgs Constructor ConnectionLifecycleEventArgs() Initializes a new instance of the ConnectionLifecycleEventArgs class. Declaration public ConnectionLifecycleEventArgs()"
  },
  "dev/api/Hazelcast.Events.ConnectionLifecycleEventArgs.html": {
    "href": "dev/api/Hazelcast.Events.ConnectionLifecycleEventArgs.html",
    "title": "ConnectionLifecycleEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "ConnectionLifecycleEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents event data for connection lifecycle events. public class ConnectionLifecycleEventArgs Inheritance Object ConnectionLifecycleEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ConnectionLifecycleEventArgs() Initializes a new instance of the ConnectionLifecycleEventArgs class."
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html",
    "title": "DistributedObjectLifecycleEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectLifecycleEventArgs Constructor DistributedObjectLifecycleEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Declaration public DistributedObjectLifecycleEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters String serviceName The service unique name. String name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html",
    "title": "DistributedObjectLifecycleEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectLifecycleEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents event data for a cluster object lifecycle event. public class DistributedObjectLifecycleEventArgs Inheritance Object DistributedObjectLifecycleEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DistributedObjectLifecycleEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Properties Name Gets the name of the impacted object. ServiceName Gets the name of the service handling the impacted object. SourceMemberId Gets the unique identifier of the source member."
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the impacted object. Declaration public string Name { get; } Property Value String"
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html",
    "title": "ServiceName Property | Hazelcast .NET Documentation",
    "keywords": "ServiceName Property ServiceName Gets the name of the service handling the impacted object. Declaration public string ServiceName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html",
    "title": "SourceMemberId Property | Hazelcast .NET Documentation",
    "keywords": "SourceMemberId Property SourceMemberId Gets the unique identifier of the source member. Declaration public Guid SourceMemberId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventType.html": {
    "href": "dev/api/Hazelcast.Events.DistributedObjectLifecycleEventType.html",
    "title": "DistributedObjectLifecycleEventType Enum | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectLifecycleEventType Enum Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Defines the types of object lifecycle events. public enum DistributedObjectLifecycleEventType Fields Created The object was created. Destroyed The object was destroyed. Nothing Nothing (default) Extension Methods EnumExtensions.HasAll<DistributedObjectLifecycleEventType>(DistributedObjectLifecycleEventType) EnumExtensions.HasAny<DistributedObjectLifecycleEventType>(DistributedObjectLifecycleEventType)"
  },
  "dev/api/Hazelcast.Events.EventsOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.EventsOptions.-ctor.html",
    "title": "EventsOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "EventsOptions Constructor EventsOptions() Initializes a new instance of the EventsOptions class. Declaration public EventsOptions()"
  },
  "dev/api/Hazelcast.Events.EventsOptions.html": {
    "href": "dev/api/Hazelcast.Events.EventsOptions.html",
    "title": "EventsOptions Class | Hazelcast .NET Documentation",
    "keywords": "EventsOptions Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents the events options. public class EventsOptions Inheritance Object EventsOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors EventsOptions() Initializes a new instance of the EventsOptions class. Properties SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. SubscriptionCollectPeriod Gets or sets the period of the subscription collection. SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed."
  },
  "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html": {
    "href": "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html",
    "title": "SubscriptionCollectDelay Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectDelay Property SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. Declaration public TimeSpan SubscriptionCollectDelay { get; set; } Property Value TimeSpan"
  },
  "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html": {
    "href": "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html",
    "title": "SubscriptionCollectPeriod Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectPeriod Property SubscriptionCollectPeriod Gets or sets the period of the subscription collection. Declaration public TimeSpan SubscriptionCollectPeriod { get; set; } Property Value TimeSpan"
  },
  "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html": {
    "href": "dev/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html",
    "title": "SubscriptionCollectTimeout Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectTimeout Property SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Declaration public TimeSpan SubscriptionCollectTimeout { get; set; } Property Value TimeSpan"
  },
  "dev/api/Hazelcast.Events.html": {
    "href": "dev/api/Hazelcast.Events.html",
    "title": "Hazelcast.Events Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Events Namespace Classes ClientLifecycleEventArgs ConnectionLifecycleEventArgs Represents event data for connection lifecycle events. DistributedObjectLifecycleEventArgs Represents event data for a cluster object lifecycle event. EventsOptions Represents the events options. MemberLifecycleEventArgs PartitionLostEventArgs Enums ClientLifecycleState DistributedObjectLifecycleEventType Defines the types of object lifecycle events. MemberLifecycleEventType"
  },
  "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.-ctor.html",
    "title": "MemberLifecycleEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MemberLifecycleEventArgs Constructor MemberLifecycleEventArgs(MemberInfo) Declaration public MemberLifecycleEventArgs(MemberInfo member) Parameters MemberInfo member"
  },
  "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.html": {
    "href": "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.html",
    "title": "MemberLifecycleEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "MemberLifecycleEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public class MemberLifecycleEventArgs Inheritance Object MemberLifecycleEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MemberLifecycleEventArgs(MemberInfo) Properties Member"
  },
  "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.Member.html": {
    "href": "dev/api/Hazelcast.Events.MemberLifecycleEventArgs.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.Events.MemberLifecycleEventType.html": {
    "href": "dev/api/Hazelcast.Events.MemberLifecycleEventType.html",
    "title": "MemberLifecycleEventType Enum | Hazelcast .NET Documentation",
    "keywords": "MemberLifecycleEventType Enum Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public enum MemberLifecycleEventType Fields Added Nothing Removed Extension Methods EnumExtensions.HasAll<MemberLifecycleEventType>(MemberLifecycleEventType) EnumExtensions.HasAny<MemberLifecycleEventType>(MemberLifecycleEventType)"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html",
    "title": "PartitionLostEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "PartitionLostEventArgs Constructor PartitionLostEventArgs(Int32, Int32, Boolean, MemberInfo) Declaration public PartitionLostEventArgs(int partitionId, int lostBackupCount, bool isAllReplicasInPartitionLost, MemberInfo member) Parameters Int32 partitionId Int32 lostBackupCount Boolean isAllReplicasInPartitionLost MemberInfo member"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.html",
    "title": "PartitionLostEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "PartitionLostEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public class PartitionLostEventArgs Inheritance Object PartitionLostEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PartitionLostEventArgs(Int32, Int32, Boolean, MemberInfo) Properties IsAllReplicasInPartitionLost LostBackupCount Member PartitionId"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html",
    "title": "IsAllReplicasInPartitionLost Property | Hazelcast .NET Documentation",
    "keywords": "IsAllReplicasInPartitionLost Property IsAllReplicasInPartitionLost Declaration public bool IsAllReplicasInPartitionLost { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html",
    "title": "LostBackupCount Property | Hazelcast .NET Documentation",
    "keywords": "LostBackupCount Property LostBackupCount Declaration public int LostBackupCount { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.Member.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "dev/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html": {
    "href": "dev/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html",
    "title": "PartitionId Property | Hazelcast .NET Documentation",
    "keywords": "PartitionId Property PartitionId Declaration public int PartitionId { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html",
    "title": "AuthenticationException Constructor | Hazelcast .NET Documentation",
    "keywords": "AuthenticationException Constructor AuthenticationException() Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException() AuthenticationException(String) Initializes a new instance of the AuthenticationException class with a specified error message. Declaration public AuthenticationException(string message) Parameters String message The message that describes the error. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Exceptions.AuthenticationException.html": {
    "href": "dev/api/Hazelcast.Exceptions.AuthenticationException.html",
    "title": "AuthenticationException Class | Hazelcast .NET Documentation",
    "keywords": "AuthenticationException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when authentication fails. [Serializable] public sealed class AuthenticationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException AuthenticationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors AuthenticationException() Initializes a new instance of the AuthenticationException class. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. AuthenticationException(String) Initializes a new instance of the AuthenticationException class with a specified error message. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Exceptions.ClientNotConnectedException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.ClientNotConnectedException.-ctor.html",
    "title": "ClientNotConnectedException Constructor | Hazelcast .NET Documentation",
    "keywords": "ClientNotConnectedException Constructor ClientNotConnectedException() Initializes a new instance of the ClientNotConnectedException class. Declaration public ClientNotConnectedException() ClientNotConnectedException(String) Initializes a new instance of the ClientNotConnectedException class with a specified error message. Declaration public ClientNotConnectedException(string message) Parameters String message The message that describes the error. ClientNotConnectedException(Exception) Initializes a new instance of the ClientNotConnectedException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientNotConnectedException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientNotConnectedException(String, Exception) Initializes a new instance of the ClientNotConnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientNotConnectedException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Exceptions.ClientNotConnectedException.html": {
    "href": "dev/api/Hazelcast.Exceptions.ClientNotConnectedException.html",
    "title": "ClientNotConnectedException Class | Hazelcast .NET Documentation",
    "keywords": "ClientNotConnectedException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. [Serializable] public sealed class ClientNotConnectedException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ClientNotConnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ClientNotConnectedException() Initializes a new instance of the ClientNotConnectedException class. ClientNotConnectedException(Exception) Initializes a new instance of the ClientNotConnectedException class with a reference to the inner exception that is the cause of this exception. ClientNotConnectedException(String) Initializes a new instance of the ClientNotConnectedException class with a specified error message. ClientNotConnectedException(String, Exception) Initializes a new instance of the ClientNotConnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Exceptions.ConnectionException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.ConnectionException.-ctor.html",
    "title": "ConnectionException Constructor | Hazelcast .NET Documentation",
    "keywords": "ConnectionException Constructor ConnectionException() Initializes a new instance of the ConnectionException class. Declaration public ConnectionException() ConnectionException(String) Initializes a new instance of the ConnectionException class with a specified error message. Declaration public ConnectionException(string message) Parameters String message The message that describes the error. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Exceptions.ConnectionException.html": {
    "href": "dev/api/Hazelcast.Exceptions.ConnectionException.html",
    "title": "ConnectionException Class | Hazelcast .NET Documentation",
    "keywords": "ConnectionException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when connection to a member fails. [Serializable] public sealed class ConnectionException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ConnectionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ConnectionException() Initializes a new instance of the ConnectionException class. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. ConnectionException(String) Initializes a new instance of the ConnectionException class with a specified error message. ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Exceptions.HazelcastException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.HazelcastException.-ctor.html",
    "title": "HazelcastException Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastException Constructor HazelcastException() Initializes a new instance of the HazelcastException class. Declaration public HazelcastException() HazelcastException(String) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public HazelcastException(string message) Parameters String message The message that describes the error. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(String, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. Declaration protected HazelcastException(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "dev/api/Hazelcast.Exceptions.HazelcastException.html": {
    "href": "dev/api/Hazelcast.Exceptions.HazelcastException.html",
    "title": "HazelcastException Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the generic exception that is throw when Hazelcast goes south. [Serializable] public class HazelcastException : Exception, ISerializable Inheritance Object Exception HazelcastException ConfigurationException ServiceFactoryException AuthenticationException ClientNotConnectedException ConnectionException TargetDisconnectedException TaskTimeoutException RemoteException SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors HazelcastException() Initializes a new instance of the HazelcastException class. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. HazelcastException(String) Initializes a new instance of the HazelcastException class with a specified error message. HazelcastException(String, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Exceptions.html": {
    "href": "dev/api/Hazelcast.Exceptions.html",
    "title": "Hazelcast.Exceptions Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Exceptions Namespace Classes AuthenticationException Represents the exception that is thrown when authentication fails. ClientNotConnectedException Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. ConnectionException Represents the exception that is thrown when connection to a member fails. HazelcastException Represents the generic exception that is throw when Hazelcast goes south. TargetDisconnectedException Represents the exception that is thrown when the target of an invocation disconnects. TaskTimeoutException Represents the exception that is throw when an async task times out."
  },
  "dev/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html",
    "title": "TargetDisconnectedException Constructor | Hazelcast .NET Documentation",
    "keywords": "TargetDisconnectedException Constructor TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. Declaration public TargetDisconnectedException() TargetDisconnectedException(String) Initializes a new instance of the ConfigurationException class with a specified error message. Declaration public TargetDisconnectedException(string message) Parameters String message The message that describes the error. TargetDisconnectedException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetDisconnectedException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Exceptions.TargetDisconnectedException.html": {
    "href": "dev/api/Hazelcast.Exceptions.TargetDisconnectedException.html",
    "title": "TargetDisconnectedException Class | Hazelcast .NET Documentation",
    "keywords": "TargetDisconnectedException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when the target of an invocation disconnects. [Serializable] public sealed class TargetDisconnectedException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException TargetDisconnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. TargetDisconnectedException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. TargetDisconnectedException(String) Initializes a new instance of the ConfigurationException class with a specified error message. TargetDisconnectedException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html": {
    "href": "dev/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html",
    "title": "TaskTimeoutException Constructor | Hazelcast .NET Documentation",
    "keywords": "TaskTimeoutException Constructor TaskTimeoutException(String, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. Declaration public TaskTimeoutException(string message, Task task) Parameters String message The message that describes the error. Task task The task that timed out. TaskTimeoutException() Initializes a new instance of the TaskTimeoutException . Declaration public TaskTimeoutException() Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(String) Initializes a new instance of the TaskTimeoutException with a specified error message. Declaration public TaskTimeoutException(string message) Parameters String message The message that describes the error. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(String, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TaskTimeoutException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code."
  },
  "dev/api/Hazelcast.Exceptions.TaskTimeoutException.html": {
    "href": "dev/api/Hazelcast.Exceptions.TaskTimeoutException.html",
    "title": "TaskTimeoutException Class | Hazelcast .NET Documentation",
    "keywords": "TaskTimeoutException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is throw when an async task times out. [Serializable] public sealed class TaskTimeoutException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException TaskTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TaskTimeoutException() Initializes a new instance of the TaskTimeoutException . TaskTimeoutException(String) Initializes a new instance of the TaskTimeoutException with a specified error message. TaskTimeoutException(String, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. TaskTimeoutException(String, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. Properties Task Gets the task that timed out (and may still be executing). Methods ObserveException() Observes the exceptions of the task that timed out."
  },
  "dev/api/Hazelcast.Exceptions.TaskTimeoutException.ObserveException.html": {
    "href": "dev/api/Hazelcast.Exceptions.TaskTimeoutException.ObserveException.html",
    "title": "ObserveException Method | Hazelcast .NET Documentation",
    "keywords": "ObserveException Method ObserveException() Observes the exceptions of the task that timed out. Declaration public void ObserveException()"
  },
  "dev/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html": {
    "href": "dev/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html",
    "title": "Task Property | Hazelcast .NET Documentation",
    "keywords": "Task Property Task Gets the task that timed out (and may still be executing). Declaration public Task Task { get; } Property Value Task"
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.ClientStateChanged.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.ClientStateChanged.html",
    "title": "ClientStateChanged Method | Hazelcast .NET Documentation",
    "keywords": "ClientStateChanged Method ClientStateChanged(Action<IHazelcastClient, ClientLifecycleEventArgs>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers ClientStateChanged(Action<IHazelcastClient, ClientLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , ClientLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ClientStateChanged(Func<IHazelcastClient, ClientLifecycleEventArgs, ValueTask>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers ClientStateChanged(Func<IHazelcastClient, ClientLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , ClientLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.ConnectionAdded.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.ConnectionAdded.html",
    "title": "ConnectionAdded Method | Hazelcast .NET Documentation",
    "keywords": "ConnectionAdded Method ConnectionAdded(Action<IHazelcastClient, ConnectionLifecycleEventArgs>) Adds a handler which runs when a connection is added. Declaration public HazelcastClientEventHandlers ConnectionAdded(Action<IHazelcastClient, ConnectionLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , ConnectionLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ConnectionAdded(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask>) Adds a handler which runs when a connection is added. Declaration public HazelcastClientEventHandlers ConnectionAdded(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , ConnectionLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.ConnectionRemoved.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.ConnectionRemoved.html",
    "title": "ConnectionRemoved Method | Hazelcast .NET Documentation",
    "keywords": "ConnectionRemoved Method ConnectionRemoved(Action<IHazelcastClient, ConnectionLifecycleEventArgs>) Adds a handler which runs when a connection is removed. Declaration public HazelcastClientEventHandlers ConnectionRemoved(Action<IHazelcastClient, ConnectionLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , ConnectionLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ConnectionRemoved(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask>) Adds a handler which runs when a connection is removed. Declaration public HazelcastClientEventHandlers ConnectionRemoved(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , ConnectionLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.html",
    "title": "HazelcastClientEventHandlers Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastClientEventHandlers Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the client events. public sealed class HazelcastClientEventHandlers : EventHandlersBase<IHazelcastClientEventHandler>, IEnumerable<IHazelcastClientEventHandler>, IEnumerable Inheritance Object EventHandlersBase < IHazelcastClientEventHandler > HazelcastClientEventHandlers Implements IEnumerable < IHazelcastClientEventHandler > IEnumerable Inherited Members EventHandlersBase<IHazelcastClientEventHandler>.Add(IHazelcastClientEventHandler) EventHandlersBase<IHazelcastClientEventHandler>.GetEnumerator() EventHandlersBase<IHazelcastClientEventHandler>.IEnumerable.GetEnumerator() EventHandlersBase<IHazelcastClientEventHandler>.Remove(IHazelcastClientEventHandler) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Handlers for events can be synchronous or asynchronous. Asynchronous handlers are defined by an Action{IHazelcastClient, TArgs} whereas... Methods ClientStateChanged(Action<IHazelcastClient, ClientLifecycleEventArgs>) Adds a handler which runs when the client state changes. ClientStateChanged(Func<IHazelcastClient, ClientLifecycleEventArgs, ValueTask>) Adds a handler which runs when the client state changes. ConnectionAdded(Action<IHazelcastClient, ConnectionLifecycleEventArgs>) Adds a handler which runs when a connection is added. ConnectionAdded(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask>) Adds a handler which runs when a connection is added. ConnectionRemoved(Action<IHazelcastClient, ConnectionLifecycleEventArgs>) Adds a handler which runs when a connection is removed. ConnectionRemoved(Func<IHazelcastClient, ConnectionLifecycleEventArgs, ValueTask>) Adds a handler which runs when a connection is removed. MemberAdded(Action<IHazelcastClient, MemberLifecycleEventArgs>) Adds a handler which runs when a member is added. MemberAdded(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask>) Adds a handler which runs when a member is added. MemberRemoved(Action<IHazelcastClient, MemberLifecycleEventArgs>) Adds a handler which runs when a member is removed. MemberRemoved(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask>) Adds a handler which runs when a member is removed. ObjectCreated(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs>) Adds a handler which runs when a distributed object is created. ObjectCreated(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. ObjectDestroyed(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs>) Adds a handler which runs when a distributed object is destroyed. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. Extension Methods EnumerableExtensions.Shuffle<T>(IEnumerable<T>)"
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.MemberAdded.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.MemberAdded.html",
    "title": "MemberAdded Method | Hazelcast .NET Documentation",
    "keywords": "MemberAdded Method MemberAdded(Action<IHazelcastClient, MemberLifecycleEventArgs>) Adds a handler which runs when a member is added. Declaration public HazelcastClientEventHandlers MemberAdded(Action<IHazelcastClient, MemberLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , MemberLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. MemberAdded(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask>) Adds a handler which runs when a member is added. Declaration public HazelcastClientEventHandlers MemberAdded(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , MemberLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.MemberRemoved.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.MemberRemoved.html",
    "title": "MemberRemoved Method | Hazelcast .NET Documentation",
    "keywords": "MemberRemoved Method MemberRemoved(Action<IHazelcastClient, MemberLifecycleEventArgs>) Adds a handler which runs when a member is removed. Declaration public HazelcastClientEventHandlers MemberRemoved(Action<IHazelcastClient, MemberLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , MemberLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. MemberRemoved(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask>) Adds a handler which runs when a member is removed. Declaration public HazelcastClientEventHandlers MemberRemoved(Func<IHazelcastClient, MemberLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , MemberLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html",
    "title": "ObjectCreated Method | Hazelcast .NET Documentation",
    "keywords": "ObjectCreated Method ObjectCreated(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , DistributedObjectLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ObjectCreated(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , DistributedObjectLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html",
    "title": "ObjectDestroyed Method | Hazelcast .NET Documentation",
    "keywords": "ObjectDestroyed Method ObjectDestroyed(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Action<IHazelcastClient, DistributedObjectLifecycleEventArgs> handler) Parameters Action < IHazelcastClient , DistributedObjectLifecycleEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Func<IHazelcastClient, DistributedObjectLifecycleEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , DistributedObjectLifecycleEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html",
    "title": "PartitionLost Method | Hazelcast .NET Documentation",
    "keywords": "PartitionLost Method PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs> handler) Parameters Action < IHazelcastClient , PartitionLostEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , PartitionLostEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html": {
    "href": "dev/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html",
    "title": "PartitionsUpdated Method | Hazelcast .NET Documentation",
    "keywords": "PartitionsUpdated Method PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Action<IHazelcastClient, EventArgs> handler) Parameters Action < IHazelcastClient , EventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , EventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "dev/api/Hazelcast.HazelcastClientFactory.html": {
    "href": "dev/api/Hazelcast.HazelcastClientFactory.html",
    "title": "HazelcastClientFactory Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastClientFactory Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Creates IHazelcastClient instances. The Hazelcast client factory is initialized with options. See Configuration in the general documentation for details on how to obtain these options. The factory is the only way to create new clients. See Hazelcast Client in the general documentation for more details. public static class HazelcastClientFactory Inheritance Object HazelcastClientFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. StartNewClientAsync(HazelcastOptions, TimeSpan) Starts a new IHazelcastClient instance with options. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. StartNewClientAsync(Action<HazelcastOptions>, TimeSpan) Starts a new IHazelcastClient instance with configured options. StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with the automatic options. StartNewClientAsync(TimeSpan) Starts a new IHazelcastClient instance with the automatic options."
  },
  "dev/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html": {
    "href": "dev/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html",
    "title": "StartNewClientAsync Method | Hazelcast .NET Documentation",
    "keywords": "StartNewClientAsync Method StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with the automatic options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(CancellationToken cancellationToken) Parameters CancellationToken cancellationToken A cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via HazelcastOptions.Build method. StartNewClientAsync(TimeSpan) Starts a new IHazelcastClient instance with the automatic options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(TimeSpan timeout = default(TimeSpan)) Parameters TimeSpan timeout A timeout. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via HazelcastOptions.Build method. If the timeout is omitted, then the timeout configured in the options is used. Exceptions TaskTimeoutException Failed to connect within the specified timeout. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(Action<HazelcastOptions> configure, CancellationToken cancellationToken) Parameters Action < HazelcastOptions > configure A HazelcastOptions configuration delegate. CancellationToken cancellationToken A cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via the Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. StartNewClientAsync(Action<HazelcastOptions>, TimeSpan) Starts a new IHazelcastClient instance with configured options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(Action<HazelcastOptions> configure, TimeSpan timeout = default(TimeSpan)) Parameters Action < HazelcastOptions > configure A HazelcastOptions configuration delegate. TimeSpan timeout A timeout. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via the Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. If the timeout is omitted, then the timeout configured in the options is used. Exceptions TaskTimeoutException Failed to connect within the specified timeout. StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(HazelcastOptions options, CancellationToken cancellationToken) Parameters HazelcastOptions options Options. CancellationToken cancellationToken A cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. StartNewClientAsync(HazelcastOptions, TimeSpan) Starts a new IHazelcastClient instance with options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(HazelcastOptions options, TimeSpan timeout = default(TimeSpan)) Parameters HazelcastOptions options Options. TimeSpan timeout A timeout. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks If the timeout is omitted, then the timeout configured in the options is used. Exceptions TaskTimeoutException Failed to connect within the specified timeout."
  },
  "dev/api/Hazelcast.HazelcastOptions.AddSubscriber.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.AddSubscriber.html",
    "title": "AddSubscriber Method | Hazelcast .NET Documentation",
    "keywords": "AddSubscriber Method AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Action<HazelcastClientEventHandlers> on) Parameters Action < HazelcastClientEventHandlers > on An action defining event handlers. Returns HazelcastOptions The options. AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(IHazelcastClientEventSubscriber subscriber) Parameters IHazelcastClientEventSubscriber subscriber The subscriber. Returns HazelcastOptions The options. AddSubscriber<T>() Adds a subscriber. Declaration public HazelcastOptions AddSubscriber<T>() where T : IHazelcastClientEventSubscriber Returns HazelcastOptions The options. Type Parameters T The type of the subscriber. AddSubscriber(Type) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Type type) Parameters Type type The type of the subscriber. Returns HazelcastOptions The options. AddSubscriber(String) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(string typename) Parameters String typename The name of the type of the subscriber. Returns HazelcastOptions The options."
  },
  "dev/api/Hazelcast.HazelcastOptions.Authentication.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Authentication.html",
    "title": "Authentication Property | Hazelcast .NET Documentation",
    "keywords": "Authentication Property Authentication Gets the authentication options. Declaration public AuthenticationOptions Authentication { get; } Property Value AuthenticationOptions Implements IClusterOptions.Authentication"
  },
  "dev/api/Hazelcast.HazelcastOptions.Build.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build Hazelcast options. Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Declaration public static HazelcastOptions Build(string[] args = null, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null, Action<IConfiguration, HazelcastOptions> configure = null) Parameters String [] args Optional command-line arguments. IEnumerable < KeyValuePair < String , String >> keyValues Optional key-value pairs. String optionsFilePath Optional options file path (without filename). String optionsFileName Optional options file name (without path, with extension). String environmentName Optional environment name. Action < IConfiguration , HazelcastOptions > configure Optional HazelcastOptions configuration delegate. Returns HazelcastOptions Hazelcast options. Build(Action<IConfigurationBuilder>, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Declaration public static HazelcastOptions Build(Action<IConfigurationBuilder> setup, Action<IConfiguration, HazelcastOptions> configure = null) Parameters Action < IConfigurationBuilder > setup An IConfigurationBuilder setup delegate. Action < IConfiguration , HazelcastOptions > configure Optional HazelcastOptions configuration delegate. Returns HazelcastOptions Hazelcast options. Build(IConfiguration, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Declaration public static HazelcastOptions Build(IConfiguration configuration, Action<IConfiguration, HazelcastOptions> configure = null) Parameters IConfiguration configuration An IConfiguration instance. Action < IConfiguration , HazelcastOptions > configure Optional HazelcastOptions configuration delegate. Returns HazelcastOptions Hazelcast options."
  },
  "dev/api/Hazelcast.HazelcastOptions.ClientName.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.ClientName.html",
    "title": "ClientName Property | Hazelcast .NET Documentation",
    "keywords": "ClientName Property ClientName Gets the client name. Declaration public string ClientName { get; set; } Property Value String Implements IClusterOptions.ClientName Remarks When null , the client name is derived from ClientNamePrefix ."
  },
  "dev/api/Hazelcast.HazelcastOptions.ClientNamePrefix.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.ClientNamePrefix.html",
    "title": "ClientNamePrefix Property | Hazelcast .NET Documentation",
    "keywords": "ClientNamePrefix Property ClientNamePrefix Gets or sets the client name prefix. Declaration public string ClientNamePrefix { get; set; } Property Value String Implements IClusterOptions.ClientNamePrefix"
  },
  "dev/api/Hazelcast.HazelcastOptions.Clone.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Clone.html",
    "title": "Clone Method | Hazelcast .NET Documentation",
    "keywords": "Clone Method Clone() Clones the options. Declaration public HazelcastOptions Clone() Returns HazelcastOptions"
  },
  "dev/api/Hazelcast.HazelcastOptions.ClusterName.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.ClusterName.html",
    "title": "ClusterName Property | Hazelcast .NET Documentation",
    "keywords": "ClusterName Property ClusterName Gets or sets the cluster name. Declaration public string ClusterName { get; set; } Property Value String Implements IClusterOptions.ClusterName"
  },
  "dev/api/Hazelcast.HazelcastOptions.Core.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Core.html",
    "title": "Core Property | Hazelcast .NET Documentation",
    "keywords": "Core Property Core Gets the core options. Declaration public CoreOptions Core { get; } Property Value CoreOptions"
  },
  "dev/api/Hazelcast.HazelcastOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.-ctor.html",
    "title": "HazelcastOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastOptions Constructor HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Declaration public HazelcastOptions()"
  },
  "dev/api/Hazelcast.HazelcastOptions.DefaultClientNamePrefix.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.DefaultClientNamePrefix.html",
    "title": "DefaultClientNamePrefix Field | Hazelcast .NET Documentation",
    "keywords": "DefaultClientNamePrefix Field Namespace: Hazelcast Assembly: Hazelcast.Net.dll Gets the default client name prefix. public const string DefaultClientNamePrefix = \"hz.client_\" Returns String"
  },
  "dev/api/Hazelcast.HazelcastOptions.DefaultClusterName.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.DefaultClusterName.html",
    "title": "DefaultClusterName Field | Hazelcast .NET Documentation",
    "keywords": "DefaultClusterName Field Namespace: Hazelcast Assembly: Hazelcast.Net.dll Gets the default cluster name. public const string DefaultClusterName = \"dev\" Returns String"
  },
  "dev/api/Hazelcast.HazelcastOptions.Events.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Events.html",
    "title": "Events Property | Hazelcast .NET Documentation",
    "keywords": "Events Property Events Gets the events options. Declaration public EventsOptions Events { get; } Property Value EventsOptions Implements IClusterOptions.Events"
  },
  "dev/api/Hazelcast.HazelcastOptions.Hazelcast.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Hazelcast.html",
    "title": "Hazelcast Field | Hazelcast .NET Documentation",
    "keywords": "Hazelcast Field Namespace: Hazelcast Assembly: Hazelcast.Net.dll public const string Hazelcast = \"hazelcast\" Returns String"
  },
  "dev/api/Hazelcast.HazelcastOptions.Heartbeat.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Heartbeat.html",
    "title": "Heartbeat Property | Hazelcast .NET Documentation",
    "keywords": "Heartbeat Property Heartbeat Gets the heartbeat options. Declaration public HeartbeatOptions Heartbeat { get; } Property Value HeartbeatOptions Implements IClusterOptions.Heartbeat"
  },
  "dev/api/Hazelcast.HazelcastOptions.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.html",
    "title": "HazelcastOptions Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastOptions Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the Hazelcast client options. TODO: document public sealed class HazelcastOptions : IClusterOptions Inheritance Object HazelcastOptions Implements IClusterOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Fields DefaultClientNamePrefix Gets the default client name prefix. DefaultClusterName Gets the default cluster name. Hazelcast Properties Authentication Gets the authentication options. ClientName Gets the client name. ClientNamePrefix Gets or sets the client name prefix. ClusterName Gets or sets the cluster name. Core Gets the core options. Events Gets the events options. Heartbeat Gets the heartbeat options. Labels Gets the client labels. LoadBalancing Gets the load balancing options. Logging Gets the logging options. Messaging Gets the messaging options. NearCache Gets the NearCache options. Networking Gets the networking options. Serialization Gets the serialization options. ServiceProvider Gets the service provider. Subscribers Gets the subscribers. Methods AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. AddSubscriber(String) Adds a subscriber. AddSubscriber(Type) Adds a subscriber. AddSubscriber<T>() Adds a subscriber. Build(IConfiguration, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Build(Action<IConfigurationBuilder>, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Clone() Clones the options."
  },
  "dev/api/Hazelcast.HazelcastOptions.Labels.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Labels.html",
    "title": "Labels Property | Hazelcast .NET Documentation",
    "keywords": "Labels Property Labels Gets the client labels. Declaration public ISet<string> Labels { get; } Property Value ISet < String > Implements IClusterOptions.Labels"
  },
  "dev/api/Hazelcast.HazelcastOptions.LoadBalancing.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.LoadBalancing.html",
    "title": "LoadBalancing Property | Hazelcast .NET Documentation",
    "keywords": "LoadBalancing Property LoadBalancing Gets the load balancing options. Declaration public LoadBalancingOptions LoadBalancing { get; } Property Value LoadBalancingOptions Implements IClusterOptions.LoadBalancing"
  },
  "dev/api/Hazelcast.HazelcastOptions.Logging.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Logging.html",
    "title": "Logging Property | Hazelcast .NET Documentation",
    "keywords": "Logging Property Logging Gets the logging options. Declaration public LoggingOptions Logging { get; } Property Value LoggingOptions"
  },
  "dev/api/Hazelcast.HazelcastOptions.Messaging.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Messaging.html",
    "title": "Messaging Property | Hazelcast .NET Documentation",
    "keywords": "Messaging Property Messaging Gets the messaging options. Declaration public MessagingOptions Messaging { get; } Property Value MessagingOptions Implements IClusterOptions.Messaging"
  },
  "dev/api/Hazelcast.HazelcastOptions.NearCache.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.NearCache.html",
    "title": "NearCache Property | Hazelcast .NET Documentation",
    "keywords": "NearCache Property NearCache Gets the NearCache options. Declaration public NearCacheOptions NearCache { get; } Property Value NearCacheOptions"
  },
  "dev/api/Hazelcast.HazelcastOptions.Networking.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Networking.html",
    "title": "Networking Property | Hazelcast .NET Documentation",
    "keywords": "Networking Property Networking Gets the networking options. Declaration public NetworkingOptions Networking { get; } Property Value NetworkingOptions Implements IClusterOptions.Networking"
  },
  "dev/api/Hazelcast.HazelcastOptions.Serialization.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Serialization.html",
    "title": "Serialization Property | Hazelcast .NET Documentation",
    "keywords": "Serialization Property Serialization Gets the serialization options. Declaration public SerializationOptions Serialization { get; } Property Value SerializationOptions"
  },
  "dev/api/Hazelcast.HazelcastOptions.ServiceProvider.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.ServiceProvider.html",
    "title": "ServiceProvider Property | Hazelcast .NET Documentation",
    "keywords": "ServiceProvider Property ServiceProvider Gets the service provider. Declaration public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Remarks In dependency-injection scenario the service provider may be available, so that service factories can return injected services."
  },
  "dev/api/Hazelcast.HazelcastOptions.Subscribers.html": {
    "href": "dev/api/Hazelcast.HazelcastOptions.Subscribers.html",
    "title": "Subscribers Property | Hazelcast .NET Documentation",
    "keywords": "Subscribers Property Subscribers Gets the subscribers. Declaration public IList<IHazelcastClientEventSubscriber> Subscribers { get; } Property Value IList < IHazelcastClientEventSubscriber >"
  },
  "dev/api/Hazelcast.html": {
    "href": "dev/api/Hazelcast.html",
    "title": "Hazelcast Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast Namespace Classes HazelcastClientEventHandlers Represents the client events. HazelcastClientFactory Creates IHazelcastClient instances. HazelcastOptions Represents the Hazelcast client options. Interfaces IHazelcastClient Represents the Hazelcast client. IHazelcastClientEventHandler Defines a Hazelcast client event handler. IHazelcastClientEventSubscriber Defines an interface for classes that can subscribe to client events."
  },
  "dev/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html",
    "title": "BeginTransactionAsync Method | Hazelcast .NET Documentation",
    "keywords": "BeginTransactionAsync Method Begins a new transaction. The method returns an ITransactionContext which can be used to obtain transactional distributed objects, and to commit or roll the transaction back. See general documetnation.... etc... BeginTransactionAsync() Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync() Returns Task < ITransactionContext > A new transaction context. BeginTransactionAsync(TransactionOptions) Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync(TransactionOptions options) Parameters TransactionOptions options Transaction options. Returns Task < ITransactionContext > A new transaction context."
  },
  "dev/api/Hazelcast.IHazelcastClient.DestroyAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.DestroyAsync.html",
    "title": "DestroyAsync Method | Hazelcast .NET Documentation",
    "keywords": "DestroyAsync Method DestroyAsync(IDistributedObject) Destroys a distributed object. Declaration ValueTask DestroyAsync(IDistributedObject o) Parameters IDistributedObject o The object to destroy. Returns ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetDictionaryAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetDictionaryAsync.html",
    "title": "GetDictionaryAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetDictionaryAsync Method GetDictionaryAsync<TKey, TValue>(String) Gets an IHDictionary<TKey, TValue> distributed object. Declaration Task<IHDictionary<TKey, TValue>> GetDictionaryAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHDictionary <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetListAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetListAsync.html",
    "title": "GetListAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetListAsync Method GetListAsync<T>(String) Gets an IHList<T> distributed object. Declaration Task<IHList<T>> GetListAsync<T>(string name) Parameters String name The unique name of the list. Returns Task < IHList <T>> The list that was retrieved or created. Type Parameters T The type of the list items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetMultiDictionaryAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetMultiDictionaryAsync.html",
    "title": "GetMultiDictionaryAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMultiDictionaryAsync Method GetMultiDictionaryAsync<TKey, TValue>(String) Gets an IHMultiDictionary<TKey, TValue> distributed object. Declaration Task<IHMultiDictionary<TKey, TValue>> GetMultiDictionaryAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHMultiDictionary <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetQueueAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetQueueAsync.html",
    "title": "GetQueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetQueueAsync Method GetQueueAsync<T>(String) Gets an IHQueue<T> distributed object. Declaration Task<IHQueue<T>> GetQueueAsync<T>(string name) Parameters String name The unique name of the queue. Returns Task < IHQueue <T>> The queue that was retrieved or created. Type Parameters T The type of the queue items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetReplicatedDictionaryAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetReplicatedDictionaryAsync.html",
    "title": "GetReplicatedDictionaryAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetReplicatedDictionaryAsync Method GetReplicatedDictionaryAsync<TKey, TValue>(String) Gets an IHReplicatedDictionary<TKey, TValue> distributed object. Declaration Task<IHReplicatedDictionary<TKey, TValue>> GetReplicatedDictionaryAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHReplicatedDictionary <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html",
    "title": "GetRingBufferAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRingBufferAsync Method GetRingBufferAsync<T>(String) Gets an IHRingBuffer<TItem> distributed object. Declaration Task<IHRingBuffer<T>> GetRingBufferAsync<T>(string name) Parameters String name The unique name of the ring buffer. Returns Task < IHRingBuffer <T>> The ring buffer that was retrieved or created. Type Parameters T The type of the ring buffer items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetSetAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetSetAsync.html",
    "title": "GetSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSetAsync Method GetSetAsync<T>(String) Gets an IHSet<T> distributed object. Declaration Task<IHSet<T>> GetSetAsync<T>(string name) Parameters String name The unique name of the set. Returns Task < IHSet <T>> The set that was retrieved or created. Type Parameters T The type of the set items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.GetTopicAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.GetTopicAsync.html",
    "title": "GetTopicAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetTopicAsync Method GetTopicAsync<T>(String) Gets an IHTopic<T> distributed object. Declaration Task<IHTopic<T>> GetTopicAsync<T>(string name) Parameters String name The unique name of the topic. Returns Task < IHTopic <T>> The topic that was retrieved or created. Type Parameters T The type of the topic messages. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "dev/api/Hazelcast.IHazelcastClient.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.html",
    "title": "IHazelcastClient Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClient Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the Hazelcast client. The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by a HazelcastClientFactory . Before it can be used, it needs to be opened via the @Hazelcast.IHazelcastClient.OpenAsync* method. After it has been used, it needs to be disposed in order to properly release its resources. For example: var options = HazelcastOptions.Build(); var factory = new HazelcastClientFactory(options); var client = factory.CreateClient(); await client.OpenAsync(); // ... use the client ... await client.DisposeAsync(); See Hazelcast Client in the general documentation for more details. public interface IHazelcastClient : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties IsActive Whether the client is active. IsConnected Whether the client is connected. Methods BeginTransactionAsync() Begins a new transaction. BeginTransactionAsync(TransactionOptions) Begins a new transaction. DestroyAsync(IDistributedObject) Destroys a distributed object. GetDictionaryAsync<TKey, TValue>(String) Gets an IHDictionary<TKey, TValue> distributed object. GetListAsync<T>(String) Gets an IHList<T> distributed object. GetMultiDictionaryAsync<TKey, TValue>(String) Gets an IHMultiDictionary<TKey, TValue> distributed object. GetQueueAsync<T>(String) Gets an IHQueue<T> distributed object. GetReplicatedDictionaryAsync<TKey, TValue>(String) Gets an IHReplicatedDictionary<TKey, TValue> distributed object. GetRingBufferAsync<T>(String) Gets an IHRingBuffer<TItem> distributed object. GetSetAsync<T>(String) Gets an IHSet<T> distributed object. GetTopicAsync<T>(String) Gets an IHTopic<T> distributed object. SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "dev/api/Hazelcast.IHazelcastClient.IsActive.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.IsActive.html",
    "title": "IsActive Property | Hazelcast .NET Documentation",
    "keywords": "IsActive Property IsActive Whether the client is active. Declaration bool IsActive { get; } Property Value Boolean true if the client is active; otherwise false . Remarks The client can be active but not connected, trying to reconnect."
  },
  "dev/api/Hazelcast.IHazelcastClient.IsConnected.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.IsConnected.html",
    "title": "IsConnected Property | Hazelcast .NET Documentation",
    "keywords": "IsConnected Property IsConnected Whether the client is connected. Declaration bool IsConnected { get; } Property Value Boolean true if the client is connected; otherwise false . Remarks The client can be active but not connected, trying to reconnect."
  },
  "dev/api/Hazelcast.IHazelcastClient.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<HazelcastClientEventHandlers> handle) Parameters Action < HazelcastClientEventHandlers > handle An event handlers collection builder. Returns Task < Guid > The unique identifier of the subscription."
  },
  "dev/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > Whether the un-registration was successful on the server."
  },
  "dev/api/Hazelcast.IHazelcastClientEventHandler.html": {
    "href": "dev/api/Hazelcast.IHazelcastClientEventHandler.html",
    "title": "IHazelcastClientEventHandler Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClientEventHandler Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Defines a Hazelcast client event handler. public interface IHazelcastClientEventHandler"
  },
  "dev/api/Hazelcast.IHazelcastClientEventSubscriber.html": {
    "href": "dev/api/Hazelcast.IHazelcastClientEventSubscriber.html",
    "title": "IHazelcastClientEventSubscriber Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClientEventSubscriber Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Defines an interface for classes that can subscribe to client events. public interface IHazelcastClientEventSubscriber Methods SubscribeAsync(IHazelcastClient, CancellationToken) Subscribes to events."
  },
  "dev/api/Hazelcast.IHazelcastClientEventSubscriber.SubscribeAsync.html": {
    "href": "dev/api/Hazelcast.IHazelcastClientEventSubscriber.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(IHazelcastClient, CancellationToken) Subscribes to events. Declaration Task SubscribeAsync(IHazelcastClient hazelcastClient, CancellationToken cancellationToken) Parameters IHazelcastClient hazelcastClient The Hazelcast client. CancellationToken cancellationToken A cancellation token. Returns Task A task that will complete when events have been subscribed to."
  },
  "dev/api/Hazelcast.Logging.html": {
    "href": "dev/api/Hazelcast.Logging.html",
    "title": "Hazelcast.Logging Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Logging Namespace Classes LoggingOptions Represents the logging options."
  },
  "dev/api/Hazelcast.Logging.LoggingOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Logging.LoggingOptions.-ctor.html",
    "title": "LoggingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "LoggingOptions Constructor LoggingOptions() Initializes a new instance of the LoggingOptions class. Declaration public LoggingOptions()"
  },
  "dev/api/Hazelcast.Logging.LoggingOptions.html": {
    "href": "dev/api/Hazelcast.Logging.LoggingOptions.html",
    "title": "LoggingOptions Class | Hazelcast .NET Documentation",
    "keywords": "LoggingOptions Class Namespace: Hazelcast.Logging Assembly: Hazelcast.Net.dll Represents the logging options. public class LoggingOptions Inheritance Object LoggingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks The only option available is the ILoggerFactory creator, which can only be set programmatically. All other logging options (level, etc.) are configured via the default Microsoft configuration system. See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging for details and documentation. Constructors LoggingOptions() Initializes a new instance of the LoggingOptions class. Properties LoggerFactory Gets the service factory for ILoggerFactory ."
  },
  "dev/api/Hazelcast.Logging.LoggingOptions.LoggerFactory.html": {
    "href": "dev/api/Hazelcast.Logging.LoggingOptions.LoggerFactory.html",
    "title": "LoggerFactory Property | Hazelcast .NET Documentation",
    "keywords": "LoggerFactory Property LoggerFactory Gets the service factory for ILoggerFactory . Declaration public SingletonServiceFactory<ILoggerFactory> LoggerFactory { get; } Property Value SingletonServiceFactory < ILoggerFactory >"
  },
  "dev/api/Hazelcast.Messaging.html": {
    "href": "dev/api/Hazelcast.Messaging.html",
    "title": "Hazelcast.Messaging Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Messaging Namespace Classes MessagingOptions Represents messaging options."
  },
  "dev/api/Hazelcast.Messaging.MessagingOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Messaging.MessagingOptions.-ctor.html",
    "title": "MessagingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "MessagingOptions Constructor MessagingOptions() Initializes a new instance of the MessagingOptions class. Declaration public MessagingOptions()"
  },
  "dev/api/Hazelcast.Messaging.MessagingOptions.DefaultOperationTimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Messaging.MessagingOptions.DefaultOperationTimeoutMilliseconds.html",
    "title": "DefaultOperationTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "DefaultOperationTimeoutMilliseconds Property DefaultOperationTimeoutMilliseconds Gets or sets the default operation timeout. Declaration public int DefaultOperationTimeoutMilliseconds { get; set; } Property Value Int32 Remarks The default operation timeout is the timeout for an operation (a complete roundtrip to the server, for instance adding an item into a map) when no timeout is specified, and no cancellation token is provided. If a timeout is specified then it becomes the timeout for the operation. If a cancellation token is provided, then that token is supposed to handle the life of the operation and no timeout is involved."
  },
  "dev/api/Hazelcast.Messaging.MessagingOptions.html": {
    "href": "dev/api/Hazelcast.Messaging.MessagingOptions.html",
    "title": "MessagingOptions Class | Hazelcast .NET Documentation",
    "keywords": "MessagingOptions Class Namespace: Hazelcast.Messaging Assembly: Hazelcast.Net.dll Represents messaging options. public class MessagingOptions Inheritance Object MessagingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MessagingOptions() Initializes a new instance of the MessagingOptions class. Properties DefaultOperationTimeoutMilliseconds Gets or sets the default operation timeout. MaxFastInvocationCount Gets or sets the max fast invocation count. MinRetryDelayMilliseconds Gets or sets the min retry delay."
  },
  "dev/api/Hazelcast.Messaging.MessagingOptions.MaxFastInvocationCount.html": {
    "href": "dev/api/Hazelcast.Messaging.MessagingOptions.MaxFastInvocationCount.html",
    "title": "MaxFastInvocationCount Property | Hazelcast .NET Documentation",
    "keywords": "MaxFastInvocationCount Property MaxFastInvocationCount Gets or sets the max fast invocation count. Declaration public int MaxFastInvocationCount { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html": {
    "href": "dev/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html",
    "title": "MinRetryDelayMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "MinRetryDelayMilliseconds Property MinRetryDelayMilliseconds Gets or sets the min retry delay. Declaration public int MinRetryDelayMilliseconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.EvictionPolicy.html": {
    "href": "dev/api/Hazelcast.NearCaching.EvictionPolicy.html",
    "title": "EvictionPolicy Enum | Hazelcast .NET Documentation",
    "keywords": "EvictionPolicy Enum Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Defines near caching eviction policies. public enum EvictionPolicy Fields Lfu Evict least-frequently used entries first. Lru Evict least-recently used entries first. None No eviction policy. Extension Methods EnumExtensions.HasAll<EvictionPolicy>(EvictionPolicy) EnumExtensions.HasAny<EvictionPolicy>(EvictionPolicy)"
  },
  "dev/api/Hazelcast.NearCaching.html": {
    "href": "dev/api/Hazelcast.NearCaching.html",
    "title": "Hazelcast.NearCaching Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.NearCaching Namespace Classes NearCacheNamedOptions Contains the options for a Near Cache. NearCacheOptions Represents the Near Cache options. Enums EvictionPolicy Defines near caching eviction policies."
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.CleanupPeriodSeconds.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.CleanupPeriodSeconds.html",
    "title": "CleanupPeriodSeconds Property | Hazelcast .NET Documentation",
    "keywords": "CleanupPeriodSeconds Property CleanupPeriodSeconds Gets or sets the period of the cleanup. Declaration public int CleanupPeriodSeconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.-ctor.html",
    "title": "NearCacheNamedOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "NearCacheNamedOptions Constructor NearCacheNamedOptions() Initializes a new instance of the NearCacheNamedOptions class. Declaration public NearCacheNamedOptions()"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.EvictionPercentage.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.EvictionPercentage.html",
    "title": "EvictionPercentage Property | Hazelcast .NET Documentation",
    "keywords": "EvictionPercentage Property EvictionPercentage Gets or sets the eviction percentage. Declaration public int EvictionPercentage { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.EvictionPolicy.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.EvictionPolicy.html",
    "title": "EvictionPolicy Property | Hazelcast .NET Documentation",
    "keywords": "EvictionPolicy Property EvictionPolicy Gets or sets the eviction policy. Declaration public EvictionPolicy EvictionPolicy { get; set; } Property Value EvictionPolicy"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.html",
    "title": "NearCacheNamedOptions Class | Hazelcast .NET Documentation",
    "keywords": "NearCacheNamedOptions Class Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Contains the options for a Near Cache. public class NearCacheNamedOptions Inheritance Object NearCacheNamedOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NearCacheNamedOptions() Initializes a new instance of the NearCacheNamedOptions class. Properties CleanupPeriodSeconds Gets or sets the period of the cleanup. EvictionPercentage Gets or sets the eviction percentage. EvictionPolicy Gets or sets the eviction policy. InMemoryFormat Gets or sets the in-memory format. InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. MaxSize Gets or sets the maximum size of the cache before entries get evicted. TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Methods ToString()"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.InMemoryFormat.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.InMemoryFormat.html",
    "title": "InMemoryFormat Property | Hazelcast .NET Documentation",
    "keywords": "InMemoryFormat Property InMemoryFormat Gets or sets the in-memory format. Declaration public InMemoryFormat InMemoryFormat { get; set; } Property Value InMemoryFormat"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.InvalidateOnChange.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.InvalidateOnChange.html",
    "title": "InvalidateOnChange Property | Hazelcast .NET Documentation",
    "keywords": "InvalidateOnChange Property InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. Declaration public bool InvalidateOnChange { get; set; } Property Value Boolean Remarks When true, the cache listens for cluster-wide changes and invalidate entries accordingly. Changes to the local Hazelcast instance always invalidate the cache immediately."
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.MaxIdleSeconds.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.MaxIdleSeconds.html",
    "title": "MaxIdleSeconds Property | Hazelcast .NET Documentation",
    "keywords": "MaxIdleSeconds Property MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. Declaration public int MaxIdleSeconds { get; set; } Property Value Int32 Remarks zero means forever."
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.MaxSize.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.MaxSize.html",
    "title": "MaxSize Property | Hazelcast .NET Documentation",
    "keywords": "MaxSize Property MaxSize Gets or sets the maximum size of the cache before entries get evicted. Declaration public int MaxSize { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.TimeToLiveSeconds.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.TimeToLiveSeconds.html",
    "title": "TimeToLiveSeconds Property | Hazelcast .NET Documentation",
    "keywords": "TimeToLiveSeconds Property TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Declaration public int TimeToLiveSeconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.ToString.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheNamedOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.Configurations.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.Configurations.html",
    "title": "Configurations Property | Hazelcast .NET Documentation",
    "keywords": "Configurations Property Configurations Gets the configurations. Declaration public IDictionary<string, NearCacheNamedOptions> Configurations { get; } Property Value IDictionary < String , NearCacheNamedOptions >"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html",
    "title": "NearCacheOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "NearCacheOptions Constructor NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Declaration public NearCacheOptions()"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.GetConfig.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.GetConfig.html",
    "title": "GetConfig Method | Hazelcast .NET Documentation",
    "keywords": "GetConfig Method GetConfig(String) Gets a configuration. Declaration public NearCacheNamedOptions GetConfig(string name) Parameters String name The name. Returns NearCacheNamedOptions A configuration matching the name."
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.html",
    "title": "NearCacheOptions Class | Hazelcast .NET Documentation",
    "keywords": "NearCacheOptions Class Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Represents the Near Cache options. public class NearCacheOptions Inheritance Object NearCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Properties Configurations Gets the configurations. MaxToleratedMissCount Gets or sets the maximum tolerated miss count. MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. PatternMatcher Gets or sets the NearCache configuration pattern matcher. ReconciliationIntervalSeconds Gets or sets the reconciliation interval. Methods GetConfig(String) Gets a configuration."
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.MaxToleratedMissCount.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.MaxToleratedMissCount.html",
    "title": "MaxToleratedMissCount Property | Hazelcast .NET Documentation",
    "keywords": "MaxToleratedMissCount Property MaxToleratedMissCount Gets or sets the maximum tolerated miss count. Declaration public int MaxToleratedMissCount { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.MinReconciliationIntervalSeconds.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.MinReconciliationIntervalSeconds.html",
    "title": "MinReconciliationIntervalSeconds Property | Hazelcast .NET Documentation",
    "keywords": "MinReconciliationIntervalSeconds Property MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. Declaration public int MinReconciliationIntervalSeconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.PatternMatcher.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.PatternMatcher.html",
    "title": "PatternMatcher Property | Hazelcast .NET Documentation",
    "keywords": "PatternMatcher Property PatternMatcher Gets or sets the NearCache configuration pattern matcher. Declaration public IPatternMatcher PatternMatcher { get; set; } Property Value IPatternMatcher"
  },
  "dev/api/Hazelcast.NearCaching.NearCacheOptions.ReconciliationIntervalSeconds.html": {
    "href": "dev/api/Hazelcast.NearCaching.NearCacheOptions.ReconciliationIntervalSeconds.html",
    "title": "ReconciliationIntervalSeconds Property | Hazelcast .NET Documentation",
    "keywords": "ReconciliationIntervalSeconds Property ReconciliationIntervalSeconds Gets or sets the reconciliation interval. Declaration public int ReconciliationIntervalSeconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Networking.CloudOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.CloudOptions.-ctor.html",
    "title": "CloudOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "CloudOptions Constructor CloudOptions() Initializes a new instance of the CloudOptions class. Declaration public CloudOptions()"
  },
  "dev/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html": {
    "href": "dev/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html",
    "title": "DiscoveryToken Property | Hazelcast .NET Documentation",
    "keywords": "DiscoveryToken Property DiscoveryToken Gets or sets the discovery token of the cluster. Declaration public string DiscoveryToken { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Networking.CloudOptions.Enabled.html": {
    "href": "dev/api/Hazelcast.Networking.CloudOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether Hazelcast Cloud is enabled. Declaration public bool Enabled { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.CloudOptions.html": {
    "href": "dev/api/Hazelcast.Networking.CloudOptions.html",
    "title": "CloudOptions Class | Hazelcast .NET Documentation",
    "keywords": "CloudOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the Hazelcast Cloud options. public class CloudOptions Inheritance Object CloudOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors CloudOptions() Initializes a new instance of the CloudOptions class. Properties DiscoveryToken Gets or sets the discovery token of the cluster. Enabled Whether Hazelcast Cloud is enabled. UrlBase Gets or sets the cloud url base."
  },
  "dev/api/Hazelcast.Networking.CloudOptions.UrlBase.html": {
    "href": "dev/api/Hazelcast.Networking.CloudOptions.UrlBase.html",
    "title": "UrlBase Property | Hazelcast .NET Documentation",
    "keywords": "UrlBase Property UrlBase Gets or sets the cloud url base. Declaration public Uri UrlBase { get; set; } Property Value Uri"
  },
  "dev/api/Hazelcast.Networking.HDns.GetHostAddresses.html": {
    "href": "dev/api/Hazelcast.Networking.HDns.GetHostAddresses.html",
    "title": "GetHostAddresses Method | Hazelcast .NET Documentation",
    "keywords": "GetHostAddresses Method GetHostAddresses(String) Returns the IP addresses for a host. Declaration public static IPAddress[] GetHostAddresses(string hostNameOrAddress) Parameters String hostNameOrAddress The host name or IP address to resolve. Returns IPAddress [] The IP addresses for the specified host."
  },
  "dev/api/Hazelcast.Networking.HDns.GetHostEntry.html": {
    "href": "dev/api/Hazelcast.Networking.HDns.GetHostEntry.html",
    "title": "GetHostEntry Method | Hazelcast .NET Documentation",
    "keywords": "GetHostEntry Method GetHostEntry(String) Gets the DNS host entry for a host. Declaration public static IPHostEntry GetHostEntry(string hostNameOrAddress) Parameters String hostNameOrAddress The host name or IP address. Returns IPHostEntry The DNS host entry for the specified host. GetHostEntry(IPAddress) Gets the DNS host entry for an IP address. Declaration public static IPHostEntry GetHostEntry(IPAddress address) Parameters IPAddress address The IP address. Returns IPHostEntry The DNS host entry for the specified IP address."
  },
  "dev/api/Hazelcast.Networking.HDns.GetHostName.html": {
    "href": "dev/api/Hazelcast.Networking.HDns.GetHostName.html",
    "title": "GetHostName Method | Hazelcast .NET Documentation",
    "keywords": "GetHostName Method GetHostName() Gets the host name of the local computer. Declaration public static string GetHostName() Returns String"
  },
  "dev/api/Hazelcast.Networking.HDns.html": {
    "href": "dev/api/Hazelcast.Networking.HDns.html",
    "title": "HDns Class | Hazelcast .NET Documentation",
    "keywords": "HDns Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Provides simple domain name resolution functionality. public static class HDns Inheritance Object HDns Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks This class is just a wrapper around Dns with entry points that allow for altering its behavior for tests (exclusively). Methods GetHostAddresses(String) Returns the IP addresses for a host. GetHostEntry(IPAddress) Gets the DNS host entry for an IP address. GetHostEntry(String) Gets the DNS host entry for a host. GetHostName() Gets the host name of the local computer."
  },
  "dev/api/Hazelcast.Networking.html": {
    "href": "dev/api/Hazelcast.Networking.html",
    "title": "Hazelcast.Networking Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Networking Namespace Classes CloudOptions Represents the Hazelcast Cloud options. HDns Provides simple domain name resolution functionality. NetworkAddress Represents a network address. NetworkingOptions Represents the networking options. SocketInterceptionOptions Contains the configuration for interceptor socket. SocketOptions Represents the TCP socket options. SslOptions Represents the SSL options. Interfaces ISocketInterceptor Enums ReconnectMode Defines options for reconnecting a disconnected client."
  },
  "dev/api/Hazelcast.Networking.ISocketInterceptor.html": {
    "href": "dev/api/Hazelcast.Networking.ISocketInterceptor.html",
    "title": "ISocketInterceptor Interface | Hazelcast .NET Documentation",
    "keywords": "ISocketInterceptor Interface Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll public interface ISocketInterceptor"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.-ctor.html",
    "title": "NetworkAddress Constructor | Hazelcast .NET Documentation",
    "keywords": "NetworkAddress Constructor NetworkAddress(String, Int32) Initializes a new instance of the NetworkAddress class with a hostname and a port. Declaration public NetworkAddress(string hostName, int port = 5701) Parameters String hostName The hostname. Int32 port The port. NetworkAddress(IPAddress, Int32) Initializes a new instance of the NetworkAddress class with an IP address and a port. Declaration public NetworkAddress(IPAddress ipAddress, int port = 5701) Parameters IPAddress ipAddress The IP address. Int32 port The port."
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.DefaultPort.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.DefaultPort.html",
    "title": "DefaultPort Field | Hazelcast .NET Documentation",
    "keywords": "DefaultPort Field Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Gets the default Hazelcast server port. public const int DefaultPort = 5701 Returns Int32"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.Equals.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.GetIPAddressByName.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.GetIPAddressByName.html",
    "title": "GetIPAddressByName Method | Hazelcast .NET Documentation",
    "keywords": "GetIPAddressByName Method GetIPAddressByName(String) Gets an IP address by name, via DNS. Declaration public static IPAddress GetIPAddressByName(string hostname) Parameters String hostname The hostname. Returns IPAddress The corresponding IP address. Remarks Returns the first IP v4 address available, if any, else the first IP v6 address available. Throws if it cannot get an IP for the hostname via DNS."
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.HostName.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.HostName.html",
    "title": "HostName Property | Hazelcast .NET Documentation",
    "keywords": "HostName Property HostName Gets the host name. Declaration public string HostName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.html",
    "title": "NetworkAddress Class | Hazelcast .NET Documentation",
    "keywords": "NetworkAddress Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents a network address. public class NetworkAddress Inheritance Object NetworkAddress Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NetworkAddress(IPAddress, Int32) Initializes a new instance of the NetworkAddress class with an IP address and a port. NetworkAddress(String, Int32) Initializes a new instance of the NetworkAddress class with a hostname and a port. Fields DefaultPort Gets the default Hazelcast server port. PortRange Gets the port range to scan. Properties HostName Gets the host name. IPAddress Gets the IP address corresponding to this address. IPEndPoint Gets the IP endpoint corresponding to this address. IsIpV4 Whether the address is an IP v4 address. IsIpV6 Whether the address is an IP v6 address. IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Lock Gets the lock semaphore for this address. Port Gets the port. Methods Equals(Object) GetHashCode() GetIPAddressByName(String) Gets an IP address by name, via DNS. Parse(String) Parses a string into a NetworkAddress . ToString() TryParse(String, out NetworkAddress) Tries to parse a string into a NetworkAddress instance. TryParse(String, out IEnumerable<NetworkAddress>) Tries to parse a string into all possible NetworkAddress instance. Operators Equality(NetworkAddress, NetworkAddress) Overrides the == operator. Inequality(NetworkAddress, NetworkAddress) Overrides the != operator."
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.IPAddress.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.IPAddress.html",
    "title": "IPAddress Property | Hazelcast .NET Documentation",
    "keywords": "IPAddress Property IPAddress Gets the IP address corresponding to this address. Declaration public IPAddress IPAddress { get; } Property Value IPAddress"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html",
    "title": "IPEndPoint Property | Hazelcast .NET Documentation",
    "keywords": "IPEndPoint Property IPEndPoint Gets the IP endpoint corresponding to this address. Declaration public IPEndPoint IPEndPoint { get; } Property Value IPEndPoint"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html",
    "title": "IsIpV4 Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV4 Property IsIpV4 Whether the address is an IP v4 address. Declaration public bool IsIpV4 { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html",
    "title": "IsIpV6 Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV6 Property IsIpV6 Whether the address is an IP v6 address. Declaration public bool IsIpV6 { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html",
    "title": "IsIpV6GlobalOrScoped Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV6GlobalOrScoped Property IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Declaration public bool IsIpV6GlobalOrScoped { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.Lock.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.Lock.html",
    "title": "Lock Property | Hazelcast .NET Documentation",
    "keywords": "Lock Property Lock Gets the lock semaphore for this address. Declaration public SemaphoreSlim Lock { get; } Property Value SemaphoreSlim"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.op_Equality.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.op_Equality.html",
    "title": "Equality Operator | Hazelcast .NET Documentation",
    "keywords": "Equality Operator Equality(NetworkAddress, NetworkAddress) Overrides the == operator. Declaration public static bool operator ==(NetworkAddress a1, NetworkAddress a2) Parameters NetworkAddress a1 NetworkAddress a2 Returns Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html",
    "title": "Inequality Operator | Hazelcast .NET Documentation",
    "keywords": "Inequality Operator Inequality(NetworkAddress, NetworkAddress) Overrides the != operator. Declaration public static bool operator !=(NetworkAddress a1, NetworkAddress a2) Parameters NetworkAddress a1 NetworkAddress a2 Returns Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.Parse.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.Parse.html",
    "title": "Parse Method | Hazelcast .NET Documentation",
    "keywords": "Parse Method Parse(String) Parses a string into a NetworkAddress . Declaration public static NetworkAddress Parse(string s) Parameters String s The string. Returns NetworkAddress The network address."
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.Port.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.Port.html",
    "title": "Port Property | Hazelcast .NET Documentation",
    "keywords": "Port Property Port Gets the port. Declaration public int Port { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.PortRange.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.PortRange.html",
    "title": "PortRange Field | Hazelcast .NET Documentation",
    "keywords": "PortRange Field Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Gets the port range to scan. public const int PortRange = 3 Returns Int32"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.ToString.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Networking.NetworkAddress.TryParse.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkAddress.TryParse.html",
    "title": "TryParse Method | Hazelcast .NET Documentation",
    "keywords": "TryParse Method TryParse(String, out NetworkAddress) Tries to parse a string into a NetworkAddress instance. Declaration public static bool TryParse(string s, out NetworkAddress address) Parameters String s The string. NetworkAddress address The network address. Returns Boolean Whether the string could be parsed into an address. TryParse(String, out IEnumerable<NetworkAddress>) Tries to parse a string into all possible NetworkAddress instance. Declaration public static bool TryParse(string s, out IEnumerable<NetworkAddress> addresses) Parameters String s The string. IEnumerable < NetworkAddress > addresses The network addresses. Returns Boolean Whether the string could be parsed into addresses."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.Addresses.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.Addresses.html",
    "title": "Addresses Property | Hazelcast .NET Documentation",
    "keywords": "Addresses Property Addresses Gets or sets the list initial addresses. Declaration public IList<string> Addresses { get; } Property Value IList < String > Remarks The client uses this list to find a running member and connect to it. This initial member will then send the list of other members to the client."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.Cloud.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.Cloud.html",
    "title": "Cloud Property | Hazelcast .NET Documentation",
    "keywords": "Cloud Property Cloud Gets the cloud options. Declaration public CloudOptions Cloud { get; } Property Value CloudOptions"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html",
    "title": "ConnectionRetry Property | Hazelcast .NET Documentation",
    "keywords": "ConnectionRetry Property ConnectionRetry Gets the connection retry options. Declaration public RetryOptions ConnectionRetry { get; } Property Value RetryOptions"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html",
    "title": "ConnectionTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "ConnectionTimeoutMilliseconds Property ConnectionTimeoutMilliseconds Gets or sets the connection timeout. Declaration public int ConnectionTimeoutMilliseconds { get; set; } Property Value Int32 Remarks Specifies the Hazelcast client connection timeout, i.e. the maximum amount of time the Hazelcast can spend trying to establish a connection to the cluster. See SocketOptions for specifying the individual socket connection timeout."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.-ctor.html",
    "title": "NetworkingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "NetworkingOptions Constructor NetworkingOptions() Initializes a new instance of the NetworkingOptions class. Declaration public NetworkingOptions()"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.html",
    "title": "NetworkingOptions Class | Hazelcast .NET Documentation",
    "keywords": "NetworkingOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the networking options. public class NetworkingOptions Inheritance Object NetworkingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors NetworkingOptions() Initializes a new instance of the NetworkingOptions class. Properties Addresses Gets or sets the list initial addresses. Cloud Gets the cloud options. ConnectionRetry Gets the connection retry options. ConnectionTimeoutMilliseconds Gets or sets the connection timeout. ReconnectMode Gets or sets the reconnection mode in case the client is disconnected. RetryOnTargetDisconnected Whether to redo operations. ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. SmartRouting Whether smart routing is enabled. Socket Gets the socket options. SocketInterception Gets the socket interceptor options. Ssl Gets the SSL options. WaitForClientMilliseconds Gets or sets the delay to pause for when looking for a client to handle cluster view events and no client is available."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html",
    "title": "ReconnectMode Property | Hazelcast .NET Documentation",
    "keywords": "ReconnectMode Property ReconnectMode Gets or sets the reconnection mode in case the client is disconnected. Declaration public ReconnectMode ReconnectMode { get; set; } Property Value ReconnectMode"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.RetryOnTargetDisconnected.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.RetryOnTargetDisconnected.html",
    "title": "RetryOnTargetDisconnected Property | Hazelcast .NET Documentation",
    "keywords": "RetryOnTargetDisconnected Property RetryOnTargetDisconnected Whether to redo operations. Declaration public bool RetryOnTargetDisconnected { get; set; } Property Value Boolean Remarks If true, the client will redo the operations that were executing on the server and the client lost the connection. This can happen because of network, or simply because the member died. Note that it is not clear whether the operation is performed or not. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html",
    "title": "ShuffleAddresses Property | Hazelcast .NET Documentation",
    "keywords": "ShuffleAddresses Property ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. Declaration public bool ShuffleAddresses { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html",
    "title": "SmartRouting Property | Hazelcast .NET Documentation",
    "keywords": "SmartRouting Property SmartRouting Whether smart routing is enabled. Declaration public bool SmartRouting { get; set; } Property Value Boolean Remarks If true (default), client will route the key based operations to owner of the key at the best effort. Note that it however does not guarantee that the operation will always be executed on the owner, as the member table is only updated every 10 seconds."
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.Socket.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.Socket.html",
    "title": "Socket Property | Hazelcast .NET Documentation",
    "keywords": "Socket Property Socket Gets the socket options. Declaration public SocketOptions Socket { get; } Property Value SocketOptions"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.SocketInterception.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.SocketInterception.html",
    "title": "SocketInterception Property | Hazelcast .NET Documentation",
    "keywords": "SocketInterception Property SocketInterception Gets the socket interceptor options. Declaration public SocketInterceptionOptions SocketInterception { get; } Property Value SocketInterceptionOptions"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.Ssl.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.Ssl.html",
    "title": "Ssl Property | Hazelcast .NET Documentation",
    "keywords": "Ssl Property Ssl Gets the SSL options. Declaration public SslOptions Ssl { get; } Property Value SslOptions"
  },
  "dev/api/Hazelcast.Networking.NetworkingOptions.WaitForClientMilliseconds.html": {
    "href": "dev/api/Hazelcast.Networking.NetworkingOptions.WaitForClientMilliseconds.html",
    "title": "WaitForClientMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "WaitForClientMilliseconds Property WaitForClientMilliseconds Gets or sets the delay to pause for when looking for a client to handle cluster view events and no client is available. Declaration public int WaitForClientMilliseconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Networking.ReconnectMode.html": {
    "href": "dev/api/Hazelcast.Networking.ReconnectMode.html",
    "title": "ReconnectMode Enum | Hazelcast .NET Documentation",
    "keywords": "ReconnectMode Enum Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Defines options for reconnecting a disconnected client. public enum ReconnectMode Fields DoNotReconnect Do not reconnect. ReconnectAsync Reconnect without blocking invocations. Invocations will fail. ReconnectSync Reconnect while blocking invocations. Extension Methods EnumExtensions.HasAll<ReconnectMode>(ReconnectMode) EnumExtensions.HasAny<ReconnectMode>(ReconnectMode)"
  },
  "dev/api/Hazelcast.Networking.SocketInterceptionOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.SocketInterceptionOptions.-ctor.html",
    "title": "SocketInterceptionOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SocketInterceptionOptions Constructor SocketInterceptionOptions() Initializes a new instance of the SocketInterceptionOptions class. Declaration public SocketInterceptionOptions()"
  },
  "dev/api/Hazelcast.Networking.SocketInterceptionOptions.Enabled.html": {
    "href": "dev/api/Hazelcast.Networking.SocketInterceptionOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether socket interception is enabled. Declaration public bool Enabled { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SocketInterceptionOptions.html": {
    "href": "dev/api/Hazelcast.Networking.SocketInterceptionOptions.html",
    "title": "SocketInterceptionOptions Class | Hazelcast .NET Documentation",
    "keywords": "SocketInterceptionOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Contains the configuration for interceptor socket. public class SocketInterceptionOptions Inheritance Object SocketInterceptionOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SocketInterceptionOptions() Initializes a new instance of the SocketInterceptionOptions class. Properties Enabled Whether socket interception is enabled. Interceptor Gets the interceptor service factory. Methods ToString()"
  },
  "dev/api/Hazelcast.Networking.SocketInterceptionOptions.Interceptor.html": {
    "href": "dev/api/Hazelcast.Networking.SocketInterceptionOptions.Interceptor.html",
    "title": "Interceptor Property | Hazelcast .NET Documentation",
    "keywords": "Interceptor Property Interceptor Gets the interceptor service factory. Declaration public SingletonServiceFactory<ISocketInterceptor> Interceptor { get; } Property Value SingletonServiceFactory < ISocketInterceptor >"
  },
  "dev/api/Hazelcast.Networking.SocketInterceptionOptions.ToString.html": {
    "href": "dev/api/Hazelcast.Networking.SocketInterceptionOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html",
    "title": "BufferSizeKiB Property | Hazelcast .NET Documentation",
    "keywords": "BufferSizeKiB Property BufferSizeKiB The buffer size. Declaration public int BufferSizeKiB { get; set; } Property Value Int32 Remarks The buffer size is expressed in Kibibytes, ie units of 1024 bytes."
  },
  "dev/api/Hazelcast.Networking.SocketOptions.ConnectionTimeoutMilliseconds.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.ConnectionTimeoutMilliseconds.html",
    "title": "ConnectionTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "ConnectionTimeoutMilliseconds Property ConnectionTimeoutMilliseconds The socket connection timeout. Declaration public int ConnectionTimeoutMilliseconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Networking.SocketOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.-ctor.html",
    "title": "SocketOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SocketOptions Constructor SocketOptions() Initializes a new instance of the SocketOptions class. Declaration public SocketOptions()"
  },
  "dev/api/Hazelcast.Networking.SocketOptions.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.html",
    "title": "SocketOptions Class | Hazelcast .NET Documentation",
    "keywords": "SocketOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the TCP socket options. public class SocketOptions Inheritance Object SocketOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SocketOptions() Initializes a new instance of the SocketOptions class. Properties BufferSizeKiB The buffer size. ConnectionTimeoutMilliseconds The socket connection timeout. KeepAlive Whether to keep the socket alive. LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. TcpNoDelay Whether the socket is using the Nagle algorithm."
  },
  "dev/api/Hazelcast.Networking.SocketOptions.KeepAlive.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.KeepAlive.html",
    "title": "KeepAlive Property | Hazelcast .NET Documentation",
    "keywords": "KeepAlive Property KeepAlive Whether to keep the socket alive. Declaration public bool KeepAlive { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html",
    "title": "LingerSeconds Property | Hazelcast .NET Documentation",
    "keywords": "LingerSeconds Property LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. Declaration public int LingerSeconds { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html": {
    "href": "dev/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html",
    "title": "TcpNoDelay Property | Hazelcast .NET Documentation",
    "keywords": "TcpNoDelay Property TcpNoDelay Whether the socket is using the Nagle algorithm. Declaration public bool TcpNoDelay { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SslOptions.CertificateName.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.CertificateName.html",
    "title": "CertificateName Property | Hazelcast .NET Documentation",
    "keywords": "CertificateName Property CertificateName Gets or sets the name of the certificate. Declaration public string CertificateName { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Networking.SslOptions.CertificatePassword.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.CertificatePassword.html",
    "title": "CertificatePassword Property | Hazelcast .NET Documentation",
    "keywords": "CertificatePassword Property CertificatePassword Gets or sets the password for the certificate file. Declaration public string CertificatePassword { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Networking.SslOptions.CertificatePath.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.CertificatePath.html",
    "title": "CertificatePath Property | Hazelcast .NET Documentation",
    "keywords": "CertificatePath Property CertificatePath Gets or sets the full path to the certificate file. Declaration public string CertificatePath { get; set; } Property Value String"
  },
  "dev/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html",
    "title": "CheckCertificateRevocation Property | Hazelcast .NET Documentation",
    "keywords": "CheckCertificateRevocation Property CheckCertificateRevocation Whether to check for certificate revocation. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SslOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.-ctor.html",
    "title": "SslOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SslOptions Constructor SslOptions() Initializes a new instance of the SslOptions class. Declaration public SslOptions()"
  },
  "dev/api/Hazelcast.Networking.SslOptions.Enabled.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether to enable SSL. Declaration public bool Enabled { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SslOptions.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.html",
    "title": "SslOptions Class | Hazelcast .NET Documentation",
    "keywords": "SslOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the SSL options. public class SslOptions Inheritance Object SslOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SslOptions() Initializes a new instance of the SslOptions class. Properties CertificateName Gets or sets the name of the certificate. CertificatePassword Gets or sets the password for the certificate file. CertificatePath Gets or sets the full path to the certificate file. CheckCertificateRevocation Whether to check for certificate revocation. Enabled Whether to enable SSL. Protocol Gets or sets the SSL protocol. ValidateCertificateChain Whether to validate the certificate chain. ValidateCertificateName Whether to validate the certificate name. Methods ToString()"
  },
  "dev/api/Hazelcast.Networking.SslOptions.Protocol.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.Protocol.html",
    "title": "Protocol Property | Hazelcast .NET Documentation",
    "keywords": "Protocol Property Protocol Gets or sets the SSL protocol. Declaration public SslProtocols Protocol { get; set; } Property Value SslProtocols"
  },
  "dev/api/Hazelcast.Networking.SslOptions.ToString.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html",
    "title": "ValidateCertificateChain Property | Hazelcast .NET Documentation",
    "keywords": "ValidateCertificateChain Property ValidateCertificateChain Whether to validate the certificate chain. Declaration public bool ValidateCertificateChain { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html": {
    "href": "dev/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html",
    "title": "ValidateCertificateName Property | Hazelcast .NET Documentation",
    "keywords": "ValidateCertificateName Property ValidateCertificateName Whether to validate the certificate name. Declaration public bool ValidateCertificateName { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Partitioning.html": {
    "href": "dev/api/Hazelcast.Partitioning.html",
    "title": "Hazelcast.Partitioning Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Partitioning Namespace Classes Partitioner"
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.Count.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of partitions. Declaration public int Count { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionHashOwner.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionHashOwner.html",
    "title": "GetPartitionHashOwner Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionHashOwner Method GetPartitionHashOwner(Int32) Gets the unique identifier of the member owning the partition corresponding to a partition hash. Declaration public Guid GetPartitionHashOwner(int partitionHash) Parameters Int32 partitionHash The partition hash. Returns Guid The unique identifier of the owner owning the partition corresponding to the specified partitionHash , or an empty Guid if that partition has no owner."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionId.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionId.html",
    "title": "GetPartitionId Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionId Method GetPartitionId(Int32) Gets the identifier of the partition corresponding to a partition hash. Declaration public int GetPartitionId(int partitionHash) Parameters Int32 partitionHash The partition hash. Returns Int32 The identifier of the partition corresponding to the specified partitionHash ."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionOwner.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.GetPartitionOwner.html",
    "title": "GetPartitionOwner Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionOwner Method GetPartitionOwner(Int32) Gets the unique identifier of the member owning a partition. Declaration public Guid GetPartitionOwner(int partitionId) Parameters Int32 partitionId The identifier of the partition. Returns Guid The unique identifier of the member owning the partition with the specified partitionId , or an empty Guid if that partition has no owner."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.GetRandomPartitionId.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.GetRandomPartitionId.html",
    "title": "GetRandomPartitionId Method | Hazelcast .NET Documentation",
    "keywords": "GetRandomPartitionId Method GetRandomPartitionId() Gets a random partition identifier. Declaration public int GetRandomPartitionId() Returns Int32 A random partition identifier."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.html",
    "title": "Partitioner Class | Hazelcast .NET Documentation",
    "keywords": "Partitioner Class Namespace: Hazelcast.Partitioning Assembly: Hazelcast.Net.dll public class Partitioner Inheritance Object Partitioner Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Count Gets the number of partitions. Methods GetPartitionHashOwner(Int32) Gets the unique identifier of the member owning the partition corresponding to a partition hash. GetPartitionId(Int32) Gets the identifier of the partition corresponding to a partition hash. GetPartitionOwner(Int32) Gets the unique identifier of the member owning a partition. GetRandomPartitionId() Gets a random partition identifier. NotifyPartitionsCount(Int32) Notifies the partitioner of the partitions count. NotifyPartitionView(Guid, Int32, Dictionary<Int32, Guid>) Notifies the partitioner of a new partition view."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.NotifyPartitionsCount.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.NotifyPartitionsCount.html",
    "title": "NotifyPartitionsCount Method | Hazelcast .NET Documentation",
    "keywords": "NotifyPartitionsCount Method NotifyPartitionsCount(Int32) Notifies the partitioner of the partitions count. Declaration public void NotifyPartitionsCount(int count) Parameters Int32 count The partitions count."
  },
  "dev/api/Hazelcast.Partitioning.Partitioner.NotifyPartitionView.html": {
    "href": "dev/api/Hazelcast.Partitioning.Partitioner.NotifyPartitionView.html",
    "title": "NotifyPartitionView Method | Hazelcast .NET Documentation",
    "keywords": "NotifyPartitionView Method NotifyPartitionView(Guid, Int32, Dictionary<Int32, Guid>) Notifies the partitioner of a new partition view. Declaration public void NotifyPartitionView(Guid originClientId, int version, Dictionary<int, Guid> partitionsMap) Parameters Guid originClientId The unique identifier of the client originating the view. Int32 version The version of the view. Dictionary < Int32 , Guid > partitionsMap The partitions map."
  },
  "dev/api/Hazelcast.Partitioning.Strategies.html": {
    "href": "dev/api/Hazelcast.Partitioning.Strategies.html",
    "title": "Hazelcast.Partitioning.Strategies Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Partitioning.Strategies Namespace Interfaces IPartitionAware Describes objects that provide their own partition keys. IPartitioningStrategy Defines ways to get the partition key of objects."
  },
  "dev/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html": {
    "href": "dev/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html",
    "title": "GetPartitionKey Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionKey Method GetPartitionKey() Gets the partition key. Declaration object GetPartitionKey() Returns Object The partition key of the object, or null to fallback to the default strategy."
  },
  "dev/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html": {
    "href": "dev/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html",
    "title": "IPartitionAware Interface | Hazelcast .NET Documentation",
    "keywords": "IPartitionAware Interface Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Describes objects that provide their own partition keys. public interface IPartitionAware Methods GetPartitionKey() Gets the partition key."
  },
  "dev/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html": {
    "href": "dev/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html",
    "title": "GetPartitionKey Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionKey Method GetPartitionKey(Object) Gets the partition key of an object. Declaration object GetPartitionKey(object o) Parameters Object o The object. Returns Object The partition key of the object, or null to fallback to the default strategy."
  },
  "dev/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html": {
    "href": "dev/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html",
    "title": "IPartitioningStrategy Interface | Hazelcast .NET Documentation",
    "keywords": "IPartitioningStrategy Interface Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Defines ways to get the partition key of objects. public interface IPartitioningStrategy Methods GetPartitionKey(Object) Gets the partition key of an object."
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.-ctor.html",
    "title": "AndPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "AndPredicate Constructor AndPredicate() Declaration public AndPredicate() AndPredicate(IPredicate[]) Declaration public AndPredicate(params IPredicate[] predicates) Parameters IPredicate [] predicates"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.html",
    "title": "AndPredicate Class | Hazelcast .NET Documentation",
    "keywords": "AndPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class AndPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object AndPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors AndPredicate() AndPredicate(IPredicate[]) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.AndPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.AndPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.-ctor.html",
    "title": "BetweenPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "BetweenPredicate Constructor BetweenPredicate() Declaration public BetweenPredicate() BetweenPredicate(String, Object, Object) Declaration public BetweenPredicate(string attributeName, object from, object to) Parameters String attributeName Object from Object to"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.html",
    "title": "BetweenPredicate Class | Hazelcast .NET Documentation",
    "keywords": "BetweenPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class BetweenPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object BetweenPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors BetweenPredicate() BetweenPredicate(String, Object, Object) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.BetweenPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.BetweenPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public override int ClassId { get; } Property Value Int32 Overrides LikePredicate.ClassId Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.-ctor.html",
    "title": "CaseInsensitiveLikePredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "CaseInsensitiveLikePredicate Constructor CaseInsensitiveLikePredicate() Declaration public CaseInsensitiveLikePredicate() CaseInsensitiveLikePredicate(String, String) Declaration public CaseInsensitiveLikePredicate(string attributeName, string expression) Parameters String attributeName String expression"
  },
  "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.html",
    "title": "CaseInsensitiveLikePredicate Class | Hazelcast .NET Documentation",
    "keywords": "CaseInsensitiveLikePredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class CaseInsensitiveLikePredicate : LikePredicate, IPredicate, IIdentifiedDataSerializable Inheritance Object LikePredicate CaseInsensitiveLikePredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members LikePredicate.AttributeName LikePredicate.Expression LikePredicate.ReadData(IObjectDataInput) LikePredicate.WriteData(IObjectDataOutput) LikePredicate.FactoryId LikePredicate.Equals(Object) LikePredicate.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors CaseInsensitiveLikePredicate() CaseInsensitiveLikePredicate(String, String) Properties ClassId Methods ToString() Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.CaseInsensitiveLikePredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides LikePredicate.ToString()"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.AttributeName.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.AttributeName.html",
    "title": "AttributeName Property | Hazelcast .NET Documentation",
    "keywords": "AttributeName Property AttributeName Declaration protected string AttributeName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public virtual int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.-ctor.html",
    "title": "EqualPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "EqualPredicate Constructor EqualPredicate() Declaration public EqualPredicate() EqualPredicate(String, Object) Declaration public EqualPredicate(string attributeName, object value) Parameters String attributeName Object value"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.html",
    "title": "EqualPredicate Class | Hazelcast .NET Documentation",
    "keywords": "EqualPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class EqualPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object EqualPredicate NotEqualPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors EqualPredicate() EqualPredicate(String, Object) Properties AttributeName ClassId FactoryId Value Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.Value.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Declaration protected object Value { get; } Property Value Object"
  },
  "dev/api/Hazelcast.Predicates.EqualPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.EqualPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.html",
    "title": "FalsePredicate Class | Hazelcast .NET Documentation",
    "keywords": "FalsePredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class FalsePredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object FalsePredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.FalsePredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.FalsePredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.-ctor.html",
    "title": "GreaterLessPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "GreaterLessPredicate Constructor GreaterLessPredicate() Declaration public GreaterLessPredicate() GreaterLessPredicate(String, Object, Boolean, Boolean) Declaration public GreaterLessPredicate(string attributeName, object value, bool isEqual, bool isLess) Parameters String attributeName Object value Boolean isEqual Boolean isLess"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.html",
    "title": "GreaterLessPredicate Class | Hazelcast .NET Documentation",
    "keywords": "GreaterLessPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class GreaterLessPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object GreaterLessPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors GreaterLessPredicate() GreaterLessPredicate(String, Object, Boolean, Boolean) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.GreaterLessPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.GreaterLessPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.html": {
    "href": "dev/api/Hazelcast.Predicates.html",
    "title": "Hazelcast.Predicates Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Predicates Namespace Classes AndPredicate BetweenPredicate CaseInsensitiveLikePredicate EqualPredicate FalsePredicate GreaterLessPredicate InPredicate InstanceofPredicate LikePredicate NotEqualPredicate NotPredicate OrPredicate PagingPredicate This class is a special Predicate which helps to get a page-by-page result of a query. It can be constructed with a page-size, an inner predicate for filtering, and a comparator for sorting. PartitionPredicate A builtin predicate that restricts the execution of a target Predicate to a single Partition. Predicate Creates predicates. PredicateExtentions Provides extension methods for the IPredicate interface. PredicateProperty RegexPredicate SqlPredicate SQL Predicate TruePredicate Interfaces IPredicate A place holder interface for com.hazelcast.query.Predicate on server side. Enums IterationType To differentiate users selection on result collection on map-wide operations like values , keySet , query etc."
  },
  "dev/api/Hazelcast.Predicates.InPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.-ctor.html",
    "title": "InPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "InPredicate Constructor InPredicate() Declaration public InPredicate() InPredicate(String, Object[]) Declaration public InPredicate(string attributeName, params object[] values) Parameters String attributeName Object [] values"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.html",
    "title": "InPredicate Class | Hazelcast .NET Documentation",
    "keywords": "InPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class InPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object InPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors InPredicate() InPredicate(String, Object[]) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.InPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.InPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.-ctor.html",
    "title": "InstanceofPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "InstanceofPredicate Constructor InstanceofPredicate() Declaration public InstanceofPredicate() InstanceofPredicate(String) Declaration public InstanceofPredicate(string className) Parameters String className"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.html",
    "title": "InstanceofPredicate Class | Hazelcast .NET Documentation",
    "keywords": "InstanceofPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class InstanceofPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object InstanceofPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors InstanceofPredicate() InstanceofPredicate(String) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.InstanceofPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.InstanceofPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.IPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.IPredicate.html",
    "title": "IPredicate Interface | Hazelcast .NET Documentation",
    "keywords": "IPredicate Interface Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll A place holder interface for com.hazelcast.query.Predicate on server side. public interface IPredicate Remarks All builtin predicates can be accessed via Predicate static class. A custom predicate must be serializable via Hazelcast serialization, and have a counterpart on the server. Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.IterationType.html": {
    "href": "dev/api/Hazelcast.Predicates.IterationType.html",
    "title": "IterationType Enum | Hazelcast .NET Documentation",
    "keywords": "IterationType Enum Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll To differentiate users selection on result collection on map-wide operations like values , keySet , query etc. public enum IterationType Fields Entry Iterate over whole entry (so key and value) Key Iterate over keys Value Iterate over values Extension Methods EnumExtensions.HasAll<IterationType>(IterationType) EnumExtensions.HasAny<IterationType>(IterationType)"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.AttributeName.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.AttributeName.html",
    "title": "AttributeName Property | Hazelcast .NET Documentation",
    "keywords": "AttributeName Property AttributeName Declaration protected string AttributeName { get; } Property Value String"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public virtual int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.-ctor.html",
    "title": "LikePredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "LikePredicate Constructor LikePredicate() Declaration public LikePredicate() LikePredicate(String, String) Declaration public LikePredicate(string attributeName, string expression) Parameters String attributeName String expression"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.Expression.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.Expression.html",
    "title": "Expression Property | Hazelcast .NET Documentation",
    "keywords": "Expression Property Expression Declaration protected string Expression { get; } Property Value String"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.html",
    "title": "LikePredicate Class | Hazelcast .NET Documentation",
    "keywords": "LikePredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class LikePredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object LikePredicate CaseInsensitiveLikePredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors LikePredicate() LikePredicate(String, String) Properties AttributeName ClassId Expression FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.LikePredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.LikePredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.NotEqualPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.NotEqualPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public override int ClassId { get; } Property Value Int32 Overrides EqualPredicate.ClassId"
  },
  "dev/api/Hazelcast.Predicates.NotEqualPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.NotEqualPredicate.-ctor.html",
    "title": "NotEqualPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "NotEqualPredicate Constructor NotEqualPredicate() Declaration public NotEqualPredicate() NotEqualPredicate(String, Object) Declaration public NotEqualPredicate(string attributeName, object value) Parameters String attributeName Object value"
  },
  "dev/api/Hazelcast.Predicates.NotEqualPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.NotEqualPredicate.html",
    "title": "NotEqualPredicate Class | Hazelcast .NET Documentation",
    "keywords": "NotEqualPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class NotEqualPredicate : EqualPredicate, IPredicate, IIdentifiedDataSerializable Inheritance Object EqualPredicate NotEqualPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members EqualPredicate.AttributeName EqualPredicate.Value EqualPredicate.ReadData(IObjectDataInput) EqualPredicate.WriteData(IObjectDataOutput) EqualPredicate.FactoryId EqualPredicate.Equals(Object) EqualPredicate.GetHashCode() Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NotEqualPredicate() NotEqualPredicate(String, Object) Properties ClassId Methods ToString() Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.NotEqualPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.NotEqualPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides EqualPredicate.ToString()"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.-ctor.html",
    "title": "NotPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "NotPredicate Constructor NotPredicate() Declaration public NotPredicate() NotPredicate(IPredicate) Declaration public NotPredicate(IPredicate predicate) Parameters IPredicate predicate"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.html",
    "title": "NotPredicate Class | Hazelcast .NET Documentation",
    "keywords": "NotPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class NotPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object NotPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NotPredicate() NotPredicate(IPredicate) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.NotPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.NotPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.-ctor.html",
    "title": "OrPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "OrPredicate Constructor OrPredicate() Declaration public OrPredicate() OrPredicate(IPredicate[]) Declaration public OrPredicate(params IPredicate[] predicates) Parameters IPredicate [] predicates"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.html",
    "title": "OrPredicate Class | Hazelcast .NET Documentation",
    "keywords": "OrPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class OrPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object OrPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors OrPredicate() OrPredicate(IPredicate[]) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.OrPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.OrPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.Comparer.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.Comparer.html",
    "title": "Comparer Property | Hazelcast .NET Documentation",
    "keywords": "Comparer Property Comparer IComparer<KeyValuePair<object, object>> > implementation used to sort the result on client side. Declaration public IComparer<KeyValuePair<object, object>> Comparer { get; } Property Value IComparer < KeyValuePair < Object , Object >> Remarks WARNING: This comparer implementation should be hazelcast serializable and must have the same implementation on server side."
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.-ctor.html",
    "title": "PagingPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "PagingPredicate Constructor PagingPredicate(Int32, IPredicate, IComparer<KeyValuePair<Object, Object>>) Creates a Paging predicate with provided page size and optional predicate and comparer. Declaration public PagingPredicate(int pageSize, IPredicate predicate = null, IComparer<KeyValuePair<object, object>> comparer = null) Parameters Int32 pageSize page size of each result set IPredicate predicate Optional predicate to filter of the results. if null, no filtering applied IComparer < KeyValuePair < Object , Object >> comparer Optional IComparer implementation used to sort the results. see warning at Comparer Exceptions ArgumentOutOfRangeException if page size is negative ArgumentException Nested PagingPredicate is not supported"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.html",
    "title": "PagingPredicate Class | Hazelcast .NET Documentation",
    "keywords": "PagingPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll This class is a special Predicate which helps to get a page-by-page result of a query. It can be constructed with a page-size, an inner predicate for filtering, and a comparator for sorting. public class PagingPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object PagingPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks This class is not thread-safe and stateless. To be able to reuse for another query, one should call Reset() Examples Predicate lessEqualThanFour = Predicates.IsLessThanOrEqual(\"this\", 4); // We are constructing our paging predicate with a predicate and page size. In this case query results fetched two by two. PagingPredicate predicate = new PagingPredicate(2, lessEqualThanFour); // we are initializing our map with integers from 0 to 10 as keys and values. var map = hazelcastInstance.GetMap(\"myMap\"); for (int i = 0; i < 10; i++) { map.Put(i, i); } //invoking the query var values = map.Values(predicate); Console.WriteLine(\"values = \" + values); // will print 'values = [0, 1]' predicate.NextPage(); // we are setting up paging predicate to fetch next page in the next call. values = map.Values(predicate); Console.WriteLine(\"values = \" + values);// will print 'values = [2, 3]' var anchor = predicate.GetAnchor(); Console.WriteLine(\"anchor -> \" + anchor); // will print 'anchor -> 1=1', since the anchor is the last entry of the previous page. predicate.previousPage(); // we are setting up paging predicate to fetch previous page in the next call values = map.Values(predicate); Console.WriteLine(\"values = \" + values) // will print 'values = [0, 1]' Constructors PagingPredicate(Int32, IPredicate, IComparer<KeyValuePair<Object, Object>>) Creates a Paging predicate with provided page size and optional predicate and comparer. Properties ClassId Comparer IComparer<KeyValuePair<object, object>> > implementation used to sort the result on client side. FactoryId IterationType Iteration type this paging predicate: One of Key, Value or Entry Page Current page index PageSize Page size of each iteration Predicate Methods NextPage() sets the page value to next page PreviousPage() sets the page value to previous page ReadData(IObjectDataInput) Reset() resets for reuse WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.IterationType.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.IterationType.html",
    "title": "IterationType Property | Hazelcast .NET Documentation",
    "keywords": "IterationType Property IterationType Iteration type this paging predicate: One of Key, Value or Entry Declaration public IterationType? IterationType { get; set; } Property Value Nullable < IterationType >"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.NextPage.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.NextPage.html",
    "title": "NextPage Method | Hazelcast .NET Documentation",
    "keywords": "NextPage Method NextPage() sets the page value to next page Declaration public void NextPage()"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.Page.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.Page.html",
    "title": "Page Property | Hazelcast .NET Documentation",
    "keywords": "Page Property Page Current page index Declaration public int Page { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.PageSize.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.PageSize.html",
    "title": "PageSize Property | Hazelcast .NET Documentation",
    "keywords": "PageSize Property PageSize Page size of each iteration Declaration public int PageSize { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.Predicate.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.Predicate.html",
    "title": "Predicate Property | Hazelcast .NET Documentation",
    "keywords": "Predicate Property Predicate Declaration public IPredicate Predicate { get; } Property Value IPredicate"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.PreviousPage.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.PreviousPage.html",
    "title": "PreviousPage Method | Hazelcast .NET Documentation",
    "keywords": "PreviousPage Method PreviousPage() sets the page value to previous page Declaration public void PreviousPage()"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.Reset.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.Reset.html",
    "title": "Reset Method | Hazelcast .NET Documentation",
    "keywords": "Reset Method Reset() resets for reuse Declaration public void Reset()"
  },
  "dev/api/Hazelcast.Predicates.PagingPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.PagingPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.-ctor.html",
    "title": "PartitionPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "PartitionPredicate Constructor PartitionPredicate() Declaration public PartitionPredicate() PartitionPredicate(Object, IPredicate) Declaration public PartitionPredicate(object partitionKey, IPredicate predicate) Parameters Object partitionKey IPredicate predicate"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.html",
    "title": "PartitionPredicate Class | Hazelcast .NET Documentation",
    "keywords": "PartitionPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll A builtin predicate that restricts the execution of a target Predicate to a single Partition. public class PartitionPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object PartitionPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks This can help to speed up query execution since only a single instead of all partitions needs to be queried. This predicate can only be used as an outer predicate Constructors PartitionPredicate() PartitionPredicate(Object, IPredicate) Properties ClassId FactoryId PartitionKey Returns the partition key that determines the partition the target Predicate is going to execute on Target Returns the predicate that will run on target partition Methods ReadData(IObjectDataInput) WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.PartitionKey.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.PartitionKey.html",
    "title": "PartitionKey Property | Hazelcast .NET Documentation",
    "keywords": "PartitionKey Property PartitionKey Returns the partition key that determines the partition the target Predicate is going to execute on Declaration public object PartitionKey { get; } Property Value Object the partition key"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.Target.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.Target.html",
    "title": "Target Property | Hazelcast .NET Documentation",
    "keywords": "Target Property Target Returns the predicate that will run on target partition Declaration public IPredicate Target { get; } Property Value IPredicate"
  },
  "dev/api/Hazelcast.Predicates.PartitionPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.PartitionPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.Predicate.And.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.And.html",
    "title": "And Method | Hazelcast .NET Documentation",
    "keywords": "And Method And(IPredicate[]) Declaration public static AndPredicate And(params IPredicate[] predicates) Parameters IPredicate [] predicates Returns AndPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.False.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.False.html",
    "title": "False Method | Hazelcast .NET Documentation",
    "keywords": "False Method False() Declaration public static FalsePredicate False() Returns FalsePredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.html",
    "title": "Predicate Class | Hazelcast .NET Documentation",
    "keywords": "Predicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll Creates predicates. public static class Predicate Inheritance Object Predicate Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields KeyConst Methods And(IPredicate[]) False() InstanceOf(String) IsBetween(String, Object, Object) IsEqual(String, Object) IsGreaterThan(String, Object) IsGreaterThanOrEqual(String, Object) IsILike(String, String) IsIn(String, Object[]) IsLessThan(String, Object) IsLessThanOrEqual(String, Object) IsLike(String, String) IsNotEqual(String, Object) Key(String) MatchesRegex(String, String) Not(IPredicate) Or(IPredicate[]) Property(String) Sql(String) This() True()"
  },
  "dev/api/Hazelcast.Predicates.Predicate.InstanceOf.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.InstanceOf.html",
    "title": "InstanceOf Method | Hazelcast .NET Documentation",
    "keywords": "InstanceOf Method InstanceOf(String) Declaration public static InstanceofPredicate InstanceOf(string fullJavaClassName) Parameters String fullJavaClassName Returns InstanceofPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsBetween.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsBetween.html",
    "title": "IsBetween Method | Hazelcast .NET Documentation",
    "keywords": "IsBetween Method IsBetween(String, Object, Object) Declaration public static BetweenPredicate IsBetween(string attributeName, object from, object to) Parameters String attributeName Object from Object to Returns BetweenPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsEqual.html",
    "title": "IsEqual Method | Hazelcast .NET Documentation",
    "keywords": "IsEqual Method IsEqual(String, Object) Declaration public static EqualPredicate IsEqual(string attributeName, object value) Parameters String attributeName Object value Returns EqualPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsGreaterThan.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsGreaterThan.html",
    "title": "IsGreaterThan Method | Hazelcast .NET Documentation",
    "keywords": "IsGreaterThan Method IsGreaterThan(String, Object) Declaration public static GreaterLessPredicate IsGreaterThan(string attributeName, object value) Parameters String attributeName Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsGreaterThanOrEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsGreaterThanOrEqual.html",
    "title": "IsGreaterThanOrEqual Method | Hazelcast .NET Documentation",
    "keywords": "IsGreaterThanOrEqual Method IsGreaterThanOrEqual(String, Object) Declaration public static GreaterLessPredicate IsGreaterThanOrEqual(string attributeName, object value) Parameters String attributeName Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsILike.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsILike.html",
    "title": "IsILike Method | Hazelcast .NET Documentation",
    "keywords": "IsILike Method IsILike(String, String) Declaration public static CaseInsensitiveLikePredicate IsILike(string attributeName, string expression) Parameters String attributeName String expression Returns CaseInsensitiveLikePredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsIn.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsIn.html",
    "title": "IsIn Method | Hazelcast .NET Documentation",
    "keywords": "IsIn Method IsIn(String, Object[]) Declaration public static InPredicate IsIn(string attributeName, params object[] values) Parameters String attributeName Object [] values Returns InPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsLessThan.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsLessThan.html",
    "title": "IsLessThan Method | Hazelcast .NET Documentation",
    "keywords": "IsLessThan Method IsLessThan(String, Object) Declaration public static GreaterLessPredicate IsLessThan(string attributeName, object value) Parameters String attributeName Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsLessThanOrEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsLessThanOrEqual.html",
    "title": "IsLessThanOrEqual Method | Hazelcast .NET Documentation",
    "keywords": "IsLessThanOrEqual Method IsLessThanOrEqual(String, Object) Declaration public static GreaterLessPredicate IsLessThanOrEqual(string attributeName, object value) Parameters String attributeName Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsLike.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsLike.html",
    "title": "IsLike Method | Hazelcast .NET Documentation",
    "keywords": "IsLike Method IsLike(String, String) Declaration public static LikePredicate IsLike(string attributeName, string expression) Parameters String attributeName String expression Returns LikePredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.IsNotEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.IsNotEqual.html",
    "title": "IsNotEqual Method | Hazelcast .NET Documentation",
    "keywords": "IsNotEqual Method IsNotEqual(String, Object) Declaration public static NotEqualPredicate IsNotEqual(string attributeName, object value) Parameters String attributeName Object value Returns NotEqualPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.Key.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.Key.html",
    "title": "Key Method | Hazelcast .NET Documentation",
    "keywords": "Key Method Key(String) Declaration public static PredicateProperty Key(string property = null) Parameters String property Returns PredicateProperty"
  },
  "dev/api/Hazelcast.Predicates.Predicate.KeyConst.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.KeyConst.html",
    "title": "KeyConst Field | Hazelcast .NET Documentation",
    "keywords": "KeyConst Field Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public const string KeyConst = \"__key\" Returns String"
  },
  "dev/api/Hazelcast.Predicates.Predicate.MatchesRegex.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.MatchesRegex.html",
    "title": "MatchesRegex Method | Hazelcast .NET Documentation",
    "keywords": "MatchesRegex Method MatchesRegex(String, String) Declaration public static RegexPredicate MatchesRegex(string attributeName, string regex) Parameters String attributeName String regex Returns RegexPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.Not.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.Not.html",
    "title": "Not Method | Hazelcast .NET Documentation",
    "keywords": "Not Method Not(IPredicate) Declaration public static NotPredicate Not(IPredicate predicate) Parameters IPredicate predicate Returns NotPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.Or.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.Or.html",
    "title": "Or Method | Hazelcast .NET Documentation",
    "keywords": "Or Method Or(IPredicate[]) Declaration public static OrPredicate Or(params IPredicate[] predicates) Parameters IPredicate [] predicates Returns OrPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.Property.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.Property.html",
    "title": "Property Method | Hazelcast .NET Documentation",
    "keywords": "Property Method Property(String) Declaration public static PredicateProperty Property(string property) Parameters String property Returns PredicateProperty"
  },
  "dev/api/Hazelcast.Predicates.Predicate.Sql.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.Sql.html",
    "title": "Sql Method | Hazelcast .NET Documentation",
    "keywords": "Sql Method Sql(String) Declaration public static SqlPredicate Sql(string sql) Parameters String sql Returns SqlPredicate"
  },
  "dev/api/Hazelcast.Predicates.Predicate.This.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.This.html",
    "title": "This Method | Hazelcast .NET Documentation",
    "keywords": "This Method This() Declaration public static PredicateProperty This() Returns PredicateProperty"
  },
  "dev/api/Hazelcast.Predicates.Predicate.True.html": {
    "href": "dev/api/Hazelcast.Predicates.Predicate.True.html",
    "title": "True Method | Hazelcast .NET Documentation",
    "keywords": "True Method True() Declaration public static TruePredicate True() Returns TruePredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.And.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.And.html",
    "title": "And Method | Hazelcast .NET Documentation",
    "keywords": "And Method And(IPredicate, IPredicate) Declaration public static AndPredicate And(this IPredicate firstPredicate, IPredicate secondPredicate) Parameters IPredicate firstPredicate IPredicate secondPredicate Returns AndPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.Between.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.Between.html",
    "title": "Between Method | Hazelcast .NET Documentation",
    "keywords": "Between Method Between(PredicateProperty, Object, Object) Declaration public static BetweenPredicate Between(this PredicateProperty predicateProperty, object from, object to) Parameters PredicateProperty predicateProperty Object from Object to Returns BetweenPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.Equal.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.Equal.html",
    "title": "Equal Method | Hazelcast .NET Documentation",
    "keywords": "Equal Method Equal(PredicateProperty, Object) Declaration public static EqualPredicate Equal(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns EqualPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.GreaterThan.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.GreaterThan.html",
    "title": "GreaterThan Method | Hazelcast .NET Documentation",
    "keywords": "GreaterThan Method GreaterThan(PredicateProperty, Object) Declaration public static GreaterLessPredicate GreaterThan(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.GreaterThanOrEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.GreaterThanOrEqual.html",
    "title": "GreaterThanOrEqual Method | Hazelcast .NET Documentation",
    "keywords": "GreaterThanOrEqual Method GreaterThanOrEqual(PredicateProperty, Object) Declaration public static GreaterLessPredicate GreaterThanOrEqual(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.html",
    "title": "PredicateExtentions Class | Hazelcast .NET Documentation",
    "keywords": "PredicateExtentions Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll Provides extension methods for the IPredicate interface. public static class PredicateExtentions Inheritance Object PredicateExtentions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods And(IPredicate, IPredicate) Between(PredicateProperty, Object, Object) Equal(PredicateProperty, Object) GreaterThan(PredicateProperty, Object) GreaterThanOrEqual(PredicateProperty, Object) ILike(PredicateProperty, String) In(PredicateProperty, Object[]) LessThan(PredicateProperty, Object) LessThanOrEqual(PredicateProperty, Object) Like(PredicateProperty, String) MatchesRegex(PredicateProperty, String) Not(IPredicate) NotEqual(PredicateProperty, Object) Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.ILike.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.ILike.html",
    "title": "ILike Method | Hazelcast .NET Documentation",
    "keywords": "ILike Method ILike(PredicateProperty, String) Declaration public static CaseInsensitiveLikePredicate ILike(this PredicateProperty predicateProperty, string expression) Parameters PredicateProperty predicateProperty String expression Returns CaseInsensitiveLikePredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.In.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.In.html",
    "title": "In Method | Hazelcast .NET Documentation",
    "keywords": "In Method In(PredicateProperty, Object[]) Declaration public static InPredicate In(this PredicateProperty predicateProperty, params object[] values) Parameters PredicateProperty predicateProperty Object [] values Returns InPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.LessThan.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.LessThan.html",
    "title": "LessThan Method | Hazelcast .NET Documentation",
    "keywords": "LessThan Method LessThan(PredicateProperty, Object) Declaration public static GreaterLessPredicate LessThan(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.LessThanOrEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.LessThanOrEqual.html",
    "title": "LessThanOrEqual Method | Hazelcast .NET Documentation",
    "keywords": "LessThanOrEqual Method LessThanOrEqual(PredicateProperty, Object) Declaration public static GreaterLessPredicate LessThanOrEqual(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns GreaterLessPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.Like.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.Like.html",
    "title": "Like Method | Hazelcast .NET Documentation",
    "keywords": "Like Method Like(PredicateProperty, String) Declaration public static LikePredicate Like(this PredicateProperty predicateProperty, string expression) Parameters PredicateProperty predicateProperty String expression Returns LikePredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.MatchesRegex.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.MatchesRegex.html",
    "title": "MatchesRegex Method | Hazelcast .NET Documentation",
    "keywords": "MatchesRegex Method MatchesRegex(PredicateProperty, String) Declaration public static RegexPredicate MatchesRegex(this PredicateProperty predicateProperty, string regex) Parameters PredicateProperty predicateProperty String regex Returns RegexPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.Not.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.Not.html",
    "title": "Not Method | Hazelcast .NET Documentation",
    "keywords": "Not Method Not(IPredicate) Declaration public static NotPredicate Not(this IPredicate predicate) Parameters IPredicate predicate Returns NotPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.NotEqual.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.NotEqual.html",
    "title": "NotEqual Method | Hazelcast .NET Documentation",
    "keywords": "NotEqual Method NotEqual(PredicateProperty, Object) Declaration public static NotEqualPredicate NotEqual(this PredicateProperty predicateProperty, object value) Parameters PredicateProperty predicateProperty Object value Returns NotEqualPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateExtentions.Or.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateExtentions.Or.html",
    "title": "Or Method | Hazelcast .NET Documentation",
    "keywords": "Or Method Or(IPredicate, IPredicate) Declaration public static OrPredicate Or(this IPredicate firstPredicate, IPredicate secondPredicate) Parameters IPredicate firstPredicate IPredicate secondPredicate Returns OrPredicate"
  },
  "dev/api/Hazelcast.Predicates.PredicateProperty.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateProperty.-ctor.html",
    "title": "PredicateProperty Constructor | Hazelcast .NET Documentation",
    "keywords": "PredicateProperty Constructor PredicateProperty(String) Declaration public PredicateProperty(string property) Parameters String property"
  },
  "dev/api/Hazelcast.Predicates.PredicateProperty.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateProperty.html",
    "title": "PredicateProperty Class | Hazelcast .NET Documentation",
    "keywords": "PredicateProperty Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class PredicateProperty Inheritance Object PredicateProperty Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PredicateProperty(String) Properties Property Extension Methods PredicateExtentions.Between(PredicateProperty, Object, Object) PredicateExtentions.Equal(PredicateProperty, Object) PredicateExtentions.GreaterThan(PredicateProperty, Object) PredicateExtentions.GreaterThanOrEqual(PredicateProperty, Object) PredicateExtentions.ILike(PredicateProperty, String) PredicateExtentions.In(PredicateProperty, Object[]) PredicateExtentions.LessThan(PredicateProperty, Object) PredicateExtentions.LessThanOrEqual(PredicateProperty, Object) PredicateExtentions.Like(PredicateProperty, String) PredicateExtentions.NotEqual(PredicateProperty, Object) PredicateExtentions.MatchesRegex(PredicateProperty, String)"
  },
  "dev/api/Hazelcast.Predicates.PredicateProperty.Property.html": {
    "href": "dev/api/Hazelcast.Predicates.PredicateProperty.Property.html",
    "title": "Property Property | Hazelcast .NET Documentation",
    "keywords": "Property Property Property Declaration public string Property { get; } Property Value String"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.-ctor.html",
    "title": "RegexPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "RegexPredicate Constructor RegexPredicate() Declaration public RegexPredicate() RegexPredicate(String, String) Declaration public RegexPredicate(string attributeName, string regex) Parameters String attributeName String regex"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.html",
    "title": "RegexPredicate Class | Hazelcast .NET Documentation",
    "keywords": "RegexPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class RegexPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object RegexPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors RegexPredicate() RegexPredicate(String, String) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.RegexPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.RegexPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.-ctor.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.-ctor.html",
    "title": "SqlPredicate Constructor | Hazelcast .NET Documentation",
    "keywords": "SqlPredicate Constructor SqlPredicate() Declaration public SqlPredicate() SqlPredicate(String) Declaration public SqlPredicate(string sql) Parameters String sql"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.html",
    "title": "SqlPredicate Class | Hazelcast .NET Documentation",
    "keywords": "SqlPredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll SQL Predicate public class SqlPredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object SqlPredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SqlPredicate() SqlPredicate(String) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.SqlPredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.SqlPredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.ClassId.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.ClassId"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.Equals.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.FactoryId.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32 Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.html",
    "title": "TruePredicate Class | Hazelcast .NET Documentation",
    "keywords": "TruePredicate Class Namespace: Hazelcast.Predicates Assembly: Hazelcast.Net.dll public class TruePredicate : IPredicate, IIdentifiedDataSerializable Inheritance Object TruePredicate Implements IPredicate IIdentifiedDataSerializable Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Properties ClassId FactoryId Methods Equals(Object) GetHashCode() ReadData(IObjectDataInput) ToString() WriteData(IObjectDataOutput) Extension Methods PredicateExtentions.And(IPredicate, IPredicate) PredicateExtentions.Not(IPredicate) PredicateExtentions.Or(IPredicate, IPredicate)"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.ReadData.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.ToString.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Predicates.TruePredicate.WriteData.html": {
    "href": "dev/api/Hazelcast.Predicates.TruePredicate.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Projections.html": {
    "href": "dev/api/Hazelcast.Projections.html",
    "title": "Hazelcast.Projections Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Projections Namespace Classes SingleAttributeProjection Represents a simple attribute projection. Interfaces IProjection Defines a projection that can transform an object into other objects."
  },
  "dev/api/Hazelcast.Projections.IProjection.html": {
    "href": "dev/api/Hazelcast.Projections.IProjection.html",
    "title": "IProjection Interface | Hazelcast .NET Documentation",
    "keywords": "IProjection Interface Namespace: Hazelcast.Projections Assembly: Hazelcast.Net.dll Defines a projection that can transform an object into other objects. public interface IProjection : IIdentifiedDataSerializable Inherited Members IIdentifiedDataSerializable.ReadData(IObjectDataInput) IIdentifiedDataSerializable.WriteData(IObjectDataOutput) IIdentifiedDataSerializable.FactoryId IIdentifiedDataSerializable.ClassId Remarks Only 1-to-1 projections are allowed. Use an to perform n-to-1 or n-to-n projections. Projections must have a server-side counterpart."
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.ClassId.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration public int ClassId { get; } Property Value Int32 The identifier of the class. Implements IIdentifiedDataSerializable.ClassId Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.-ctor.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.-ctor.html",
    "title": "SingleAttributeProjection Constructor | Hazelcast .NET Documentation",
    "keywords": "SingleAttributeProjection Constructor SingleAttributeProjection() Initializes a new instance of the SingleAttributeProjection class/. Declaration public SingleAttributeProjection() SingleAttributeProjection(String) Initializes a new instance of the SingleAttributeProjection class/. Declaration public SingleAttributeProjection(string attributePath) Parameters String attributePath The attribute path."
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.FactoryId.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Declaration public int FactoryId { get; } Property Value Int32 The identifier of the factory. Implements IIdentifiedDataSerializable.FactoryId"
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.html",
    "title": "SingleAttributeProjection Class | Hazelcast .NET Documentation",
    "keywords": "SingleAttributeProjection Class Namespace: Hazelcast.Projections Assembly: Hazelcast.Net.dll Represents a simple attribute projection. public class SingleAttributeProjection : IProjection, IIdentifiedDataSerializable Inheritance Object SingleAttributeProjection Implements IProjection IIdentifiedDataSerializable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SingleAttributeProjection() Initializes a new instance of the SingleAttributeProjection class/. SingleAttributeProjection(String) Initializes a new instance of the SingleAttributeProjection class/. Properties ClassId Gets the identifier of the class. FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Methods ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.ReadData.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . Declaration public void ReadData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data. Implements IIdentifiedDataSerializable.ReadData(IObjectDataInput)"
  },
  "dev/api/Hazelcast.Projections.SingleAttributeProjection.WriteData.html": {
    "href": "dev/api/Hazelcast.Projections.SingleAttributeProjection.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration public void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data. Implements IIdentifiedDataSerializable.WriteData(IObjectDataOutput)"
  },
  "dev/api/Hazelcast.Protocol.CodecConstants.GetMessageTypeName.html": {
    "href": "dev/api/Hazelcast.Protocol.CodecConstants.GetMessageTypeName.html",
    "title": "GetMessageTypeName Method | Hazelcast .NET Documentation",
    "keywords": "GetMessageTypeName Method GetMessageTypeName(Int32) Declaration public static string GetMessageTypeName(int type) Parameters Int32 type Returns String"
  },
  "dev/api/Hazelcast.Protocol.CodecConstants.html": {
    "href": "dev/api/Hazelcast.Protocol.CodecConstants.html",
    "title": "CodecConstants Class | Hazelcast .NET Documentation",
    "keywords": "CodecConstants Class Namespace: Hazelcast.Protocol Assembly: Hazelcast.Net.dll public static class CodecConstants Inheritance Object CodecConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods GetMessageTypeName(Int32)"
  },
  "dev/api/Hazelcast.Protocol.Data.html": {
    "href": "dev/api/Hazelcast.Protocol.Data.html",
    "title": "Hazelcast.Protocol.Data Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Protocol.Data Namespace Enums RemoteError Defines the error codes that can be returned by a remote server."
  },
  "dev/api/Hazelcast.Protocol.Data.RemoteError.html": {
    "href": "dev/api/Hazelcast.Protocol.Data.RemoteError.html",
    "title": "RemoteError Enum | Hazelcast .NET Documentation",
    "keywords": "RemoteError Enum Namespace: Hazelcast.Protocol.Data Assembly: Hazelcast.Net.dll Defines the error codes that can be returned by a remote server. public enum RemoteError Fields AccessControl ArrayIndexOutOfBounds ArrayStore AssertionError Authentication Cache CacheLoader CacheNotExists CacheWriter CallerNotMember Cancellation CannotReplicateException ClassCast ClassNotFound ConcurrentModification ConfigMismatch ConsistencyLostException CpGroupDestroyedException DistributedObjectDestroyed DuplicateTask EntryProcessor Eof Execution FlakeIdNodeIdOutOfRangeException Hazelcast HazelcastInstanceNotActive HazelcastOverload HazelcastSerialization IllegalAccessError IllegalAccessException IllegalArgument IllegalMonitorState IllegalState IllegalThreadState IndeterminateOperationState IndexOutOfBounds Interrupted InvalidAddress InvalidConfiguration IO JetExceptionsRangeEnd JetExceptionsRangeStart LeaderDemotedException LocalMemberReset LockAcquireLimitReachedException LockOwnershipLostException Login MaxMessageSizeExceeded MemberLeft MutationDisallowedException NativeOutOfMemoryError NegativeArraySize NoDataMember NoSuchElement NotLeaderException NotSerializable NullPointer OperationTimeout OutOfMemoryError PartitionMigrating Query QueryResultSizeExceeded ReachedMaxSize RejectedExecution ReplicatedMapCantBeCreated ResponseAlreadySent RetryableHazelcast RetryableIO Runtime Security ServiceNotFound SessionExpiredException Socket SplitBrainProtection StackOverflowError StaleAppendRequestException StaleSequence StaleTask StaleTaskId TargetDisconnected TargetNotMember TargetNotReplicaException Timeout TopicOverload Transaction TransactionNotActive TransactionTimedOut Undefined UnsupportedCallback UnsupportedOperation UriSyntax UserExceptionsRangeStart UTFDataFormat VersionMismatchException WaitKeyCancelledException WanReplicationQueueFull WrongTarget Xa Extension Methods EnumExtensions.HasAll<RemoteError>(RemoteError) EnumExtensions.HasAny<RemoteError>(RemoteError)"
  },
  "dev/api/Hazelcast.Protocol.html": {
    "href": "dev/api/Hazelcast.Protocol.html",
    "title": "Hazelcast.Protocol Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Protocol Namespace Classes CodecConstants RemoteException Represents an exception that was thrown remotely on a server."
  },
  "dev/api/Hazelcast.Protocol.RemoteException.-ctor.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.-ctor.html",
    "title": "RemoteException Constructor | Hazelcast .NET Documentation",
    "keywords": "RemoteException Constructor RemoteException() Initializes a new instance of the HazelcastException class. Declaration public RemoteException() RemoteException(String) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message) Parameters String message The message that describes the error. RemoteException(String, Exception) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception. RemoteException(RemoteError, Boolean) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(RemoteError error, bool retryable = false) Parameters RemoteError error The client protocol error. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, String, Boolean) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public RemoteException(RemoteError error, string message, bool retryable = false) Parameters RemoteError error The client protocol error. String message The message that describes the error. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, Exception, Boolean) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(RemoteError error, Exception innerException, bool retryable = false) Parameters RemoteError error The client protocol error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, String, Exception, Boolean) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(RemoteError error, string message, Exception innerException, bool retryable = false) Parameters RemoteError error The client protocol error. String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Boolean retryable Whether the operation that threw the exception can be retried."
  },
  "dev/api/Hazelcast.Protocol.RemoteException.Error.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.Error.html",
    "title": "Error Property | Hazelcast .NET Documentation",
    "keywords": "Error Property Error Gets the protocol error. Declaration public RemoteError Error { get; set; } Property Value RemoteError"
  },
  "dev/api/Hazelcast.Protocol.RemoteException.GetObjectData.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.GetObjectData.html",
    "title": "GetObjectData Method | Hazelcast .NET Documentation",
    "keywords": "GetObjectData Method GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "dev/api/Hazelcast.Protocol.RemoteException.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.html",
    "title": "RemoteException Class | Hazelcast .NET Documentation",
    "keywords": "RemoteException Class Namespace: Hazelcast.Protocol Assembly: Hazelcast.Net.dll Represents an exception that was thrown remotely on a server. [Serializable] public sealed class RemoteException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException RemoteException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors RemoteException() Initializes a new instance of the HazelcastException class. RemoteException(RemoteError, Boolean) Initializes a new instance of the HazelcastException class. RemoteException(RemoteError, Exception, Boolean) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. RemoteException(RemoteError, String, Boolean) Initializes a new instance of the HazelcastException class with a specified error message. RemoteException(RemoteError, String, Exception, Boolean) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. RemoteException(String) Initializes a new instance of the HazelcastException class. RemoteException(String, Exception) Initializes a new instance of the HazelcastException class. Properties Error Gets the protocol error. Retryable Whether the operation that threw the exception can be retried. Methods GetObjectData(SerializationInfo, StreamingContext) ToString()"
  },
  "dev/api/Hazelcast.Protocol.RemoteException.Retryable.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.Retryable.html",
    "title": "Retryable Property | Hazelcast .NET Documentation",
    "keywords": "Retryable Property Retryable Whether the operation that threw the exception can be retried. Declaration public bool Retryable { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Protocol.RemoteException.ToString.html": {
    "href": "dev/api/Hazelcast.Protocol.RemoteException.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Exception.ToString()"
  },
  "dev/api/Hazelcast.Security.DefaultCredentialsFactory.Dispose.html": {
    "href": "dev/api/Hazelcast.Security.DefaultCredentialsFactory.Dispose.html",
    "title": "Dispose Method | Hazelcast .NET Documentation",
    "keywords": "Dispose Method Dispose() Declaration public void Dispose() Implements IDisposable.Dispose()"
  },
  "dev/api/Hazelcast.Security.DefaultCredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.DefaultCredentialsFactory.html",
    "title": "DefaultCredentialsFactory Class | Hazelcast .NET Documentation",
    "keywords": "DefaultCredentialsFactory Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Represents a default ICredentialsFactory . public sealed class DefaultCredentialsFactory : ICredentialsFactory, IDisposable Inheritance Object DefaultCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks This factory provides username + password credentials, with username being 'default' and password being '', and is used whenever no other factory has been configured. Methods Dispose() NewCredentials() Creates and returns a new ICredentials object."
  },
  "dev/api/Hazelcast.Security.DefaultCredentialsFactory.NewCredentials.html": {
    "href": "dev/api/Hazelcast.Security.DefaultCredentialsFactory.NewCredentials.html",
    "title": "NewCredentials Method | Hazelcast .NET Documentation",
    "keywords": "NewCredentials Method NewCredentials() Creates and returns a new ICredentials object. Declaration public ICredentials NewCredentials() Returns ICredentials The new credentials object. Implements ICredentialsFactory.NewCredentials() Remarks This method is invoked any time a new connection is authenticated."
  },
  "dev/api/Hazelcast.Security.html": {
    "href": "dev/api/Hazelcast.Security.html",
    "title": "Hazelcast.Security Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Security Namespace Classes DefaultCredentialsFactory Represents a default ICredentialsFactory . StaticCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. TokenCredentials Implements ITokenCredentials for simple token-based protocols. TokenCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static token ICredentials . UsernamePasswordCredentials Implements IPasswordCredentials . UsernamePasswordCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static username+password ICredentials . Interfaces ICredentials Defines an identity to be authenticated. ICredentialsFactory Defines a factory of ICredentials . IPasswordCredentials Defines an ICredentials that relies on a password. IResettableCredentialsFactory Defines an ICredentialsFactory that can be reset. ITokenCredentials Defines an ICredentials that relies on a token."
  },
  "dev/api/Hazelcast.Security.ICredentials.html": {
    "href": "dev/api/Hazelcast.Security.ICredentials.html",
    "title": "ICredentials Interface | Hazelcast .NET Documentation",
    "keywords": "ICredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an identity to be authenticated. public interface ICredentials Properties Name Gets the name of the entity."
  },
  "dev/api/Hazelcast.Security.ICredentials.Name.html": {
    "href": "dev/api/Hazelcast.Security.ICredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration string Name { get; } Property Value String"
  },
  "dev/api/Hazelcast.Security.ICredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.ICredentialsFactory.html",
    "title": "ICredentialsFactory Interface | Hazelcast .NET Documentation",
    "keywords": "ICredentialsFactory Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines a factory of ICredentials . public interface ICredentialsFactory : IDisposable Inherited Members IDisposable.Dispose() Methods NewCredentials() Creates and returns a new ICredentials object."
  },
  "dev/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html": {
    "href": "dev/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html",
    "title": "NewCredentials Method | Hazelcast .NET Documentation",
    "keywords": "NewCredentials Method NewCredentials() Creates and returns a new ICredentials object. Declaration ICredentials NewCredentials() Returns ICredentials The new credentials object. Remarks This method is invoked any time a new connection is authenticated."
  },
  "dev/api/Hazelcast.Security.IPasswordCredentials.html": {
    "href": "dev/api/Hazelcast.Security.IPasswordCredentials.html",
    "title": "IPasswordCredentials Interface | Hazelcast .NET Documentation",
    "keywords": "IPasswordCredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentials that relies on a password. public interface IPasswordCredentials : ICredentials Inherited Members ICredentials.Name Properties Password Gets the password."
  },
  "dev/api/Hazelcast.Security.IPasswordCredentials.Password.html": {
    "href": "dev/api/Hazelcast.Security.IPasswordCredentials.Password.html",
    "title": "Password Property | Hazelcast .NET Documentation",
    "keywords": "Password Property Password Gets the password. Declaration string Password { get; } Property Value String"
  },
  "dev/api/Hazelcast.Security.IResettableCredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.IResettableCredentialsFactory.html",
    "title": "IResettableCredentialsFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IResettableCredentialsFactory Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentialsFactory that can be reset. public interface IResettableCredentialsFactory : ICredentialsFactory, IDisposable Inherited Members ICredentialsFactory.NewCredentials() IDisposable.Dispose() Methods Reset() Resets the factory."
  },
  "dev/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html": {
    "href": "dev/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html",
    "title": "Reset Method | Hazelcast .NET Documentation",
    "keywords": "Reset Method Reset() Resets the factory. Declaration void Reset()"
  },
  "dev/api/Hazelcast.Security.ITokenCredentials.GetToken.html": {
    "href": "dev/api/Hazelcast.Security.ITokenCredentials.GetToken.html",
    "title": "GetToken Method | Hazelcast .NET Documentation",
    "keywords": "GetToken Method GetToken() Gets the token. Declaration byte[] GetToken() Returns Byte []"
  },
  "dev/api/Hazelcast.Security.ITokenCredentials.html": {
    "href": "dev/api/Hazelcast.Security.ITokenCredentials.html",
    "title": "ITokenCredentials Interface | Hazelcast .NET Documentation",
    "keywords": "ITokenCredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentials that relies on a token. public interface ITokenCredentials : ICredentials Inherited Members ICredentials.Name Methods GetToken() Gets the token."
  },
  "dev/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html": {
    "href": "dev/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html",
    "title": "StaticCredentialsFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "StaticCredentialsFactory Constructor StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Declaration public StaticCredentialsFactory(ICredentials credentials) Parameters ICredentials credentials The credentials."
  },
  "dev/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html": {
    "href": "dev/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html",
    "title": "Dispose Method | Hazelcast .NET Documentation",
    "keywords": "Dispose Method Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(Boolean) Disposes resources. Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing true when disposing deterministically."
  },
  "dev/api/Hazelcast.Security.StaticCredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.StaticCredentialsFactory.html",
    "title": "StaticCredentialsFactory Class | Hazelcast .NET Documentation",
    "keywords": "StaticCredentialsFactory Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. public class StaticCredentialsFactory : ICredentialsFactory, IDisposable Inheritance Object StaticCredentialsFactory TokenCredentialsFactory UsernamePasswordCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Methods Dispose() Dispose(Boolean) Disposes resources. NewCredentials() Creates and returns a new ICredentials object."
  },
  "dev/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html": {
    "href": "dev/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html",
    "title": "NewCredentials Method | Hazelcast .NET Documentation",
    "keywords": "NewCredentials Method NewCredentials() Creates and returns a new ICredentials object. Declaration public ICredentials NewCredentials() Returns ICredentials The new credentials object. Implements ICredentialsFactory.NewCredentials() Remarks This method is invoked any time a new connection is authenticated."
  },
  "dev/api/Hazelcast.Security.TokenCredentials.-ctor.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentials.-ctor.html",
    "title": "TokenCredentials Constructor | Hazelcast .NET Documentation",
    "keywords": "TokenCredentials Constructor TokenCredentials(Byte[]) Initializes a new instance of the TokenCredentials class with a token. Declaration public TokenCredentials(byte[] token) Parameters Byte [] token The credentials token."
  },
  "dev/api/Hazelcast.Security.TokenCredentials.GetToken.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentials.GetToken.html",
    "title": "GetToken Method | Hazelcast .NET Documentation",
    "keywords": "GetToken Method GetToken() Gets the token representing the credentials. Declaration public byte[] GetToken() Returns Byte [] Implements ITokenCredentials.GetToken()"
  },
  "dev/api/Hazelcast.Security.TokenCredentials.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentials.html",
    "title": "TokenCredentials Class | Hazelcast .NET Documentation",
    "keywords": "TokenCredentials Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Implements ITokenCredentials for simple token-based protocols. [Serializable] public class TokenCredentials : ITokenCredentials, ICredentials Inheritance Object TokenCredentials Implements ITokenCredentials ICredentials Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TokenCredentials(Byte[]) Initializes a new instance of the TokenCredentials class with a token. Properties Name Gets the name of the entity. Methods GetToken() Gets the token representing the credentials. ToString()"
  },
  "dev/api/Hazelcast.Security.TokenCredentials.Name.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration public string Name { get; } Property Value String Implements ICredentials.Name"
  },
  "dev/api/Hazelcast.Security.TokenCredentials.ToString.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentials.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Security.TokenCredentialsFactory.-ctor.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentialsFactory.-ctor.html",
    "title": "TokenCredentialsFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "TokenCredentialsFactory Constructor TokenCredentialsFactory(Byte[]) Initializes a new instance of the TokenCredentialsFactory . Declaration public TokenCredentialsFactory(byte[] token) Parameters Byte [] token A token. TokenCredentialsFactory(String) Initializes a new instance of the TokenCredentialsFactory . Declaration public TokenCredentialsFactory(string token) Parameters String token A token. TokenCredentialsFactory(IReadOnlyDictionary<String, String>) Initializes a new instance of the TokenCredentialsFactory . Declaration public TokenCredentialsFactory(IReadOnlyDictionary<string, string> args) Parameters IReadOnlyDictionary < String , String > args Arguments."
  },
  "dev/api/Hazelcast.Security.TokenCredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.TokenCredentialsFactory.html",
    "title": "TokenCredentialsFactory Class | Hazelcast .NET Documentation",
    "keywords": "TokenCredentialsFactory Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Provides an implementation of ICredentialsFactory that returns a static token ICredentials . public class TokenCredentialsFactory : StaticCredentialsFactory, ICredentialsFactory, IDisposable Inheritance Object StaticCredentialsFactory TokenCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members StaticCredentialsFactory.NewCredentials() StaticCredentialsFactory.Dispose() StaticCredentialsFactory.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors TokenCredentialsFactory(Byte[]) Initializes a new instance of the TokenCredentialsFactory . TokenCredentialsFactory(IReadOnlyDictionary<String, String>) Initializes a new instance of the TokenCredentialsFactory . TokenCredentialsFactory(String) Initializes a new instance of the TokenCredentialsFactory ."
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentials.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentials.html",
    "title": "UsernamePasswordCredentials Class | Hazelcast .NET Documentation",
    "keywords": "UsernamePasswordCredentials Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Implements IPasswordCredentials . [Serializable] public class UsernamePasswordCredentials : IPasswordCredentials, ICredentials Inheritance Object UsernamePasswordCredentials Implements IPasswordCredentials ICredentials Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Properties Name Gets the name of the entity. Password Gets the password. Methods ToString()"
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration public string Name { get; set; } Property Value String Implements ICredentials.Name"
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html",
    "title": "Password Property | Hazelcast .NET Documentation",
    "keywords": "Password Property Password Gets the password. Declaration public string Password { get; set; } Property Value String Implements IPasswordCredentials.Password"
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentialsFactory.-ctor.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentialsFactory.-ctor.html",
    "title": "UsernamePasswordCredentialsFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "UsernamePasswordCredentialsFactory Constructor UsernamePasswordCredentialsFactory(String, String) Initializes a new instance of the UsernamePasswordCredentialsFactory class. Declaration public UsernamePasswordCredentialsFactory(string username, string password) Parameters String username A username. String password A password. UsernamePasswordCredentialsFactory(IReadOnlyDictionary<String, String>) Initializes a new instance of the UsernamePasswordCredentialsFactory class. Declaration public UsernamePasswordCredentialsFactory(IReadOnlyDictionary<string, string> args) Parameters IReadOnlyDictionary < String , String > args Arguments."
  },
  "dev/api/Hazelcast.Security.UsernamePasswordCredentialsFactory.html": {
    "href": "dev/api/Hazelcast.Security.UsernamePasswordCredentialsFactory.html",
    "title": "UsernamePasswordCredentialsFactory Class | Hazelcast .NET Documentation",
    "keywords": "UsernamePasswordCredentialsFactory Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Provides an implementation of ICredentialsFactory that returns a static username+password ICredentials . public class UsernamePasswordCredentialsFactory : StaticCredentialsFactory, ICredentialsFactory, IDisposable Inheritance Object StaticCredentialsFactory UsernamePasswordCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members StaticCredentialsFactory.NewCredentials() StaticCredentialsFactory.Dispose() StaticCredentialsFactory.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors UsernamePasswordCredentialsFactory(IReadOnlyDictionary<String, String>) Initializes a new instance of the UsernamePasswordCredentialsFactory class. UsernamePasswordCredentialsFactory(String, String) Initializes a new instance of the UsernamePasswordCredentialsFactory class."
  },
  "dev/api/Hazelcast.Serialization.BufferObjectDataInputConstants.html": {
    "href": "dev/api/Hazelcast.Serialization.BufferObjectDataInputConstants.html",
    "title": "BufferObjectDataInputConstants Class | Hazelcast .NET Documentation",
    "keywords": "BufferObjectDataInputConstants Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public static class BufferObjectDataInputConstants Inheritance Object BufferObjectDataInputConstants Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Fields UtfBufferSize"
  },
  "dev/api/Hazelcast.Serialization.BufferObjectDataInputConstants.UtfBufferSize.html": {
    "href": "dev/api/Hazelcast.Serialization.BufferObjectDataInputConstants.UtfBufferSize.html",
    "title": "UtfBufferSize Field | Hazelcast .NET Documentation",
    "keywords": "UtfBufferSize Field Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public const int UtfBufferSize = 1024 Returns Int32"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html",
    "title": "AddBooleanArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddBooleanArrayField Method AddBooleanArrayField(String) Declaration public ClassDefinitionBuilder AddBooleanArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html",
    "title": "AddBooleanField Method | Hazelcast .NET Documentation",
    "keywords": "AddBooleanField Method AddBooleanField(String) Declaration public ClassDefinitionBuilder AddBooleanField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html",
    "title": "AddByteArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddByteArrayField Method AddByteArrayField(String) Declaration public ClassDefinitionBuilder AddByteArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html",
    "title": "AddByteField Method | Hazelcast .NET Documentation",
    "keywords": "AddByteField Method AddByteField(String) Declaration public ClassDefinitionBuilder AddByteField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html",
    "title": "AddCharArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddCharArrayField Method AddCharArrayField(String) Declaration public ClassDefinitionBuilder AddCharArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html",
    "title": "AddCharField Method | Hazelcast .NET Documentation",
    "keywords": "AddCharField Method AddCharField(String) Declaration public ClassDefinitionBuilder AddCharField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html",
    "title": "AddDoubleArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddDoubleArrayField Method AddDoubleArrayField(String) Declaration public ClassDefinitionBuilder AddDoubleArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html",
    "title": "AddDoubleField Method | Hazelcast .NET Documentation",
    "keywords": "AddDoubleField Method AddDoubleField(String) Declaration public ClassDefinitionBuilder AddDoubleField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html",
    "title": "AddFloatArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddFloatArrayField Method AddFloatArrayField(String) Declaration public ClassDefinitionBuilder AddFloatArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html",
    "title": "AddFloatField Method | Hazelcast .NET Documentation",
    "keywords": "AddFloatField Method AddFloatField(String) Declaration public ClassDefinitionBuilder AddFloatField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html",
    "title": "AddIntArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddIntArrayField Method AddIntArrayField(String) Declaration public ClassDefinitionBuilder AddIntArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html",
    "title": "AddIntField Method | Hazelcast .NET Documentation",
    "keywords": "AddIntField Method AddIntField(String) Declaration public ClassDefinitionBuilder AddIntField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html",
    "title": "AddLongArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddLongArrayField Method AddLongArrayField(String) Declaration public ClassDefinitionBuilder AddLongArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html",
    "title": "AddLongField Method | Hazelcast .NET Documentation",
    "keywords": "AddLongField Method AddLongField(String) Declaration public ClassDefinitionBuilder AddLongField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html",
    "title": "AddPortableArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableArrayField Method AddPortableArrayField(String, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableArrayField(string fieldName, IClassDefinition def) Parameters String fieldName IClassDefinition def Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html",
    "title": "AddPortableField Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableField Method AddPortableField(String, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableField(string fieldName, IClassDefinition def) Parameters String fieldName IClassDefinition def Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html",
    "title": "AddShortArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddShortArrayField Method AddShortArrayField(String) Declaration public ClassDefinitionBuilder AddShortArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html",
    "title": "AddShortField Method | Hazelcast .NET Documentation",
    "keywords": "AddShortField Method AddShortField(String) Declaration public ClassDefinitionBuilder AddShortField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddUTFArrayField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddUTFArrayField.html",
    "title": "AddUTFArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddUTFArrayField Method AddUTFArrayField(String) Declaration public ClassDefinitionBuilder AddUTFArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddUTFField.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddUTFField.html",
    "title": "AddUTFField Method | Hazelcast .NET Documentation",
    "keywords": "AddUTFField Method AddUTFField(String) Declaration public ClassDefinitionBuilder AddUTFField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build() Declaration public IClassDefinition Build() Returns IClassDefinition"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html",
    "title": "ClassDefinitionBuilder Constructor | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitionBuilder Constructor ClassDefinitionBuilder(Int32, Int32) Declaration public ClassDefinitionBuilder(int factoryId, int classId) Parameters Int32 factoryId Int32 classId ClassDefinitionBuilder(Int32, Int32, Int32) Declaration public ClassDefinitionBuilder(int factoryId, int classId, int version) Parameters Int32 factoryId Int32 classId Int32 version"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.html",
    "title": "ClassDefinitionBuilder Class | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitionBuilder Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll ClassDefinitionBuilder is used to build and register ClassDefinitions manually. public sealed class ClassDefinitionBuilder Inheritance Object ClassDefinitionBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks ClassDefinitionBuilder is used to build and register ClassDefinitions manually. Constructors ClassDefinitionBuilder(Int32, Int32) ClassDefinitionBuilder(Int32, Int32, Int32) Properties ClassId FactoryId Version Methods AddBooleanArrayField(String) AddBooleanField(String) AddByteArrayField(String) AddByteField(String) AddCharArrayField(String) AddCharField(String) AddDoubleArrayField(String) AddDoubleField(String) AddFloatArrayField(String) AddFloatField(String) AddIntArrayField(String) AddIntField(String) AddLongArrayField(String) AddLongField(String) AddPortableArrayField(String, IClassDefinition) AddPortableField(String, IClassDefinition) AddShortArrayField(String) AddShortField(String) AddUTFArrayField(String) AddUTFField(String) Build() See Also IClassDefinition IPortable"
  },
  "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html": {
    "href": "dev/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration public int Version { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html",
    "title": "FactoryOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "FactoryOptions Constructor FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Declaration public FactoryOptions()"
  },
  "dev/api/Hazelcast.Serialization.FactoryOptions-1.html": {
    "href": "dev/api/Hazelcast.Serialization.FactoryOptions-1.html",
    "title": "FactoryOptions<T> Class | Hazelcast .NET Documentation",
    "keywords": "FactoryOptions<T> Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public class FactoryOptions<T> : SingletonServiceFactory<T>, IDisposable where T : class Inheritance Object SingletonServiceFactory <T> FactoryOptions<T> Implements IDisposable Inherited Members SingletonServiceFactory<T>.Creator SingletonServiceFactory<T>.ServiceProvider SingletonServiceFactory<T>.OwnsService SingletonServiceFactory<T>.Service SingletonServiceFactory<T>.Clone(Boolean) SingletonServiceFactory<T>.Dispose() SingletonServiceFactory<T>.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T Constructors FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Properties Id Gets or sets the identifier of the factory."
  },
  "dev/api/Hazelcast.Serialization.FactoryOptions-1.Id.html": {
    "href": "dev/api/Hazelcast.Serialization.FactoryOptions-1.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets or sets the identifier of the factory. Declaration public int Id { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.FieldType.html": {
    "href": "dev/api/Hazelcast.Serialization.FieldType.html",
    "title": "FieldType Enum | Hazelcast .NET Documentation",
    "keywords": "FieldType Enum Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public enum FieldType Fields Boolean BooleanArray Byte ByteArray Char CharArray Double DoubleArray Float FloatArray Int IntArray Long LongArray Portable PortableArray Short ShortArray Utf UtfArray Extension Methods EnumExtensions.HasAll<FieldType>(FieldType) EnumExtensions.HasAny<FieldType>(FieldType)"
  },
  "dev/api/Hazelcast.Serialization.html": {
    "href": "dev/api/Hazelcast.Serialization.html",
    "title": "Hazelcast.Serialization Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Serialization Namespace Classes BufferObjectDataInputConstants ClassDefinitionBuilder ClassDefinitionBuilder is used to build and register ClassDefinitions manually. FactoryOptions<T> JavaClass Class for serializing/deserializing Java Class types JavaEnum Class for serializing/deserializing Java enums SerializationException Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. SerializationOptions Contains the serialization options SerializerHooks Represents a collection of ISerializerHook<T> types. SerializerOptions Interfaces IBufferObjectDataInput Extends IObjectDataInput with support for a buffer. IBufferObjectDataOutput Extends IObjectDataOutput with support for a buffer. IByteArraySerializer<T> For sample usage custom serialization and other way of custom serialization see IStreamSerializer<T> . Note that read and write methods should be compatible IClassDefinition ClassDefinition defines a class schema for Portable classes. IData Represents the basic unit of serialization. IDataInput Defines a source of data that can be read from, to deserialize an object. IDataOutput Defines a destination of data that can be written to, to serialize an object. IDataSerializableFactory Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable . IDataSerializerHook Provides an IDataSerializableFactory . IFieldDefinition FieldDefinition defines name, type, index of a field IIdentifiedDataSerializable Defines the interface that classes of objects can implement to take control of their own serialization. IObjectDataInput Extends IDataInput with support for IData and objects. IObjectDataOutput Extends IDataOutput with support for IData and objects. IPortable Portable provides an alternative serialization method. IPortableContext IPortableFactory PortableFactory is used to create Portable instances during de-serialization. IPortableReader Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. IPortableWriter Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. ISerializationService ISerializer Base interface of custom serialization interfaces see IByteArraySerializer<T> see IStreamSerializer<T> ISerializerHook<T> IStreamSerializer<T> A base class for custom serialization. IVersionedPortable VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. Enums FieldType"
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Clear.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Clear.html",
    "title": "Clear Method | Hazelcast .NET Documentation",
    "keywords": "Clear Method Clear() Clears the buffer after use (releases inner bytes). Declaration void Clear()"
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.html",
    "title": "IBufferObjectDataInput Interface | Hazelcast .NET Documentation",
    "keywords": "IBufferObjectDataInput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Extends IObjectDataInput with support for a buffer. public interface IBufferObjectDataInput : IObjectDataInput, IDataInput, IDisposable Inherited Members IObjectDataInput.ReadData() IObjectDataInput.ReadObject<T>() IDataInput.ReadByte() IDataInput.TryReadByte() IDataInput.ReadByteArray(Endianness) IDataInput.ReadShort(Endianness) IDataInput.ReadShortArray(Endianness) IDataInput.ReadUnsignedShort(Endianness) IDataInput.ReadUnsignedShortArray(Endianness) IDataInput.ReadInt(Endianness) IDataInput.ReadIntArray(Endianness) IDataInput.ReadLong(Endianness) IDataInput.ReadLongArray(Endianness) IDataInput.ReadBool() IDataInput.ReadBoolArray(Endianness) IDataInput.ReadChar(Endianness) IDataInput.ReadCharArray(Endianness) IDataInput.ReadFloat(Endianness) IDataInput.ReadFloatArray(Endianness) IDataInput.ReadDouble(Endianness) IDataInput.ReadDoubleArray(Endianness) IDataInput.ReadString() IDataInput.ReadStringArray(Endianness) IDataInput.ReadBytes(Byte[]) IDataInput.ReadBytes(Byte[], Int32, Int32) IDataInput.Skip(Int32) IDisposable.Dispose() Properties Position Gets or sets the position in the buffer. Methods Clear() Clears the buffer after use (releases inner bytes). Initialize(Byte[], Int32) Initializes the buffer for re-use. ReadBool(Int32) Reads a Boolean value at a given position. ReadByte(Int32) Reads a Byte value at a given position. ReadChar(Int32, Endianness) Reads a Char value at a given position. ReadDouble(Int32, Endianness) Reads a Double value at a given position. ReadFloat(Int32, Endianness) Reads a Single value at a given position. ReadInt(Int32, Endianness) Reads an Int32 value at a given position. ReadLong(Int32, Endianness) Reads a Int64 value at a given position. ReadShort(Int32, Endianness) Reads a Int16 value at a given position. TryReadByte(Int32) Tries to read a Byte value at a given position."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Initialize.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Initialize.html",
    "title": "Initialize Method | Hazelcast .NET Documentation",
    "keywords": "Initialize Method Initialize(Byte[], Int32) Initializes the buffer for re-use. Declaration void Initialize(byte[] data, int offset) Parameters Byte [] data The buffer data. Int32 offset The buffer data offset."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Position.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.Position.html",
    "title": "Position Property | Hazelcast .NET Documentation",
    "keywords": "Position Property Position Gets or sets the position in the buffer. Declaration int Position { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadBool.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadBool.html",
    "title": "ReadBool Method | Hazelcast .NET Documentation",
    "keywords": "ReadBool Method ReadBool(Int32) Reads a Boolean value at a given position. Declaration bool ReadBool(int position) Parameters Int32 position The position. Returns Boolean The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte(Int32) Reads a Byte value at a given position. Declaration byte ReadByte(int position) Parameters Int32 position The position. Returns Byte The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadChar.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar(Int32, Endianness) Reads a Char value at a given position. Declaration char ReadChar(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Char The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadDouble.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble(Int32, Endianness) Reads a Double value at a given position. Declaration double ReadDouble(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Double The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadFloat.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat(Int32, Endianness) Reads a Single value at a given position. Declaration float ReadFloat(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Single The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadInt.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt(Int32, Endianness) Reads an Int32 value at a given position. Declaration int ReadInt(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Int32 The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadLong.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong(Int32, Endianness) Reads a Int64 value at a given position. Declaration long ReadLong(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Int64 The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadShort.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort(Int32, Endianness) Reads a Int16 value at a given position. Declaration short ReadShort(int position, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Endianness endianness The endianness. Returns Int16 The value. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.TryReadByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataInput.TryReadByte.html",
    "title": "TryReadByte Method | Hazelcast .NET Documentation",
    "keywords": "TryReadByte Method TryReadByte(Int32) Tries to read a Byte value at a given position. Declaration Attempt<byte> TryReadByte(int position) Parameters Int32 position The position. Returns Attempt < Byte > An attempt at reading a byte value, which may fail if the end of the buffer has been reached. Remarks This method does not alter the current position of the buffer."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Clear.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Clear.html",
    "title": "Clear Method | Hazelcast .NET Documentation",
    "keywords": "Clear Method Clear() Clears the buffer. Declaration void Clear()"
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.html",
    "title": "IBufferObjectDataOutput Interface | Hazelcast .NET Documentation",
    "keywords": "IBufferObjectDataOutput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Extends IObjectDataOutput with support for a buffer. public interface IBufferObjectDataOutput : IObjectDataOutput, IDataOutput, IDisposable Inherited Members IObjectDataOutput.WriteData(IData) IObjectDataOutput.WriteObject(Object) IObjectDataOutput.ToByteArray() IDataOutput.Write(Byte) IDataOutput.WriteArray(Byte[], Endianness) IDataOutput.Write(Int16, Endianness) IDataOutput.WriteArray(Int16[], Endianness) IDataOutput.Write(Int32, Endianness) IDataOutput.WriteArray(Int32[], Endianness) IDataOutput.Write(Int64, Endianness) IDataOutput.WriteArray(Int64[], Endianness) IDataOutput.Write(Boolean) IDataOutput.WriteArray(Boolean[], Endianness) IDataOutput.Write(Char, Endianness) IDataOutput.WriteArray(Char[], Endianness) IDataOutput.Write(Single, Endianness) IDataOutput.WriteArray(Single[], Endianness) IDataOutput.Write(Double, Endianness) IDataOutput.WriteArray(Double[], Endianness) IDataOutput.Write(String, Endianness) IDataOutput.WriteAsCharArray(String, Endianness) IDataOutput.WriteAsBytes(String) IDataOutput.WriteArray(String[], Endianness) IDataOutput.WriteBytes(Byte[]) IDataOutput.WriteBytes(Byte[], Int32, Int32) IDisposable.Dispose() Properties Position Gets the position in the buffer. Methods Clear() Clears the buffer. Write(Int32, Boolean) Writes a Boolean value at a given position. Write(Int32, Byte) Writes a Byte value at a given position. Write(Int32, Char, Endianness) Writes a Char value at a given position. Write(Int32, Double, Endianness) Writes a Double value at a given position. Write(Int32, Int16, Endianness) Writes a Int16 value at a given position. Write(Int32, Int32, Endianness) Writes a Int32 value at a given position. Write(Int32, Int64, Endianness) Writes a Int64 value at a given position. Write(Int32, Single, Endianness) Writes a Single value at a given position. WriteZeroBytes(Int32) Writes zero bytes."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Position.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Position.html",
    "title": "Position Property | Hazelcast .NET Documentation",
    "keywords": "Position Property Position Gets the position in the buffer. Declaration int Position { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Write.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(Int32, Byte) Writes a Byte value at a given position. Declaration void Write(int position, byte value) Parameters Int32 position The position. Byte value The value. Write(Int32, Int16, Endianness) Writes a Int16 value at a given position. Declaration void Write(int position, short value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Int16 value The value. Endianness endianness The endianness. Write(Int32, Int32, Endianness) Writes a Int32 value at a given position. Declaration void Write(int position, int value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Int32 value The value. Endianness endianness The endianness. Write(Int32, Int64, Endianness) Writes a Int64 value at a given position. Declaration void Write(int position, long value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Int64 value The value. Endianness endianness The endianness. Write(Int32, Boolean) Writes a Boolean value at a given position. Declaration void Write(int position, bool value) Parameters Int32 position The position. Boolean value The value. Write(Int32, Char, Endianness) Writes a Char value at a given position. Declaration void Write(int position, char value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Char value The value. Endianness endianness The endianness. Write(Int32, Single, Endianness) Writes a Single value at a given position. Declaration void Write(int position, float value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Single value The value. Endianness endianness The endianness. Write(Int32, Double, Endianness) Writes a Double value at a given position. Declaration void Write(int position, double value, Endianness endianness = Endianness.Unspecified) Parameters Int32 position The position. Double value The value. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.WriteZeroBytes.html": {
    "href": "dev/api/Hazelcast.Serialization.IBufferObjectDataOutput.WriteZeroBytes.html",
    "title": "WriteZeroBytes Method | Hazelcast .NET Documentation",
    "keywords": "WriteZeroBytes Method WriteZeroBytes(Int32) Writes zero bytes. Declaration void WriteZeroBytes(int count) Parameters Int32 count"
  },
  "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.html": {
    "href": "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.html",
    "title": "IByteArraySerializer<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IByteArraySerializer<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll For sample usage custom serialization and other way of custom serialization see IStreamSerializer<T> . Note that read and write methods should be compatible public interface IByteArraySerializer<T> : ISerializer Inherited Members ISerializer.Destroy() ISerializer.TypeId Type Parameters T Methods Read(Byte[]) Converts given byte array to object Write(T) Converts given object to byte array"
  },
  "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html": {
    "href": "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html",
    "title": "Read Method | Hazelcast .NET Documentation",
    "keywords": "Read Method Read(Byte[]) Converts given byte array to object Declaration T Read(byte[] buffer) Parameters Byte [] buffer that object will be read from Returns T deserialized object Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html": {
    "href": "dev/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(T) Converts given object to byte array Declaration byte[] Write(T obj) Parameters T obj that will be serialized Returns Byte [] byte array that object is serialized into Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.ClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration int ClassId { get; } Property Value Int32 class id"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration int FactoryId { get; } Property Value Int32 factory id"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.GetField.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.GetField.html",
    "title": "GetField Method | Hazelcast .NET Documentation",
    "keywords": "GetField Method GetField(String) Declaration IFieldDefinition GetField(string name) Parameters String name name of the field Returns IFieldDefinition field definition by given name or null GetField(Int32) Declaration IFieldDefinition GetField(int fieldIndex) Parameters Int32 fieldIndex index of the field Returns IFieldDefinition field definition by given index Exceptions IndexOutOfRangeException"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html",
    "title": "GetFieldClassId Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldClassId Method GetFieldClassId(String) Declaration int GetFieldClassId(string fieldName) Parameters String fieldName name of the field Returns Int32 class id of given field Exceptions ArgumentException"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html",
    "title": "GetFieldCount Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldCount Method GetFieldCount() Declaration int GetFieldCount() Returns Int32 total field count"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html",
    "title": "GetFieldNames Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldNames Method GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns ICollection < String > all field names contained in this class definition"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html",
    "title": "GetFieldType Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldType Method GetFieldType(String) Declaration FieldType GetFieldType(string fieldName) Parameters String fieldName name of the field Returns FieldType type of given field Exceptions ArgumentException"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.HasField.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.HasField.html",
    "title": "HasField Method | Hazelcast .NET Documentation",
    "keywords": "HasField Method HasField(String) Declaration bool HasField(string fieldName) Parameters String fieldName field name Returns Boolean true if this class definition contains a field named by given name"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.html",
    "title": "IClassDefinition Interface | Hazelcast .NET Documentation",
    "keywords": "IClassDefinition Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll ClassDefinition defines a class schema for Portable classes. public interface IClassDefinition Remarks ClassDefinition defines a class schema for Portable classes. It allows to query field names, types, class id etc. It can be created manually using ClassDefinitionBuilder or ondemand during serialization phase. Properties ClassId FactoryId Version Methods GetField(Int32) GetField(String) GetFieldClassId(String) GetFieldCount() GetFieldNames() GetFieldType(String) HasField(String) See Also IPortable ClassDefinitionBuilder"
  },
  "dev/api/Hazelcast.Serialization.IClassDefinition.Version.html": {
    "href": "dev/api/Hazelcast.Serialization.IClassDefinition.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 version"
  },
  "dev/api/Hazelcast.Serialization.IData.DataSize.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.DataSize.html",
    "title": "DataSize Property | Hazelcast .NET Documentation",
    "keywords": "DataSize Property DataSize Gets the size of the data contained in this instance. Declaration int DataSize { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.IData.HasPartitionHash.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.HasPartitionHash.html",
    "title": "HasPartitionHash Property | Hazelcast .NET Documentation",
    "keywords": "HasPartitionHash Property HasPartitionHash Determines whether this instance has a partition hash. Declaration bool HasPartitionHash { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Serialization.IData.HeapCost.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.HeapCost.html",
    "title": "HeapCost Property | Hazelcast .NET Documentation",
    "keywords": "HeapCost Property HeapCost Gets the approximate heap cost of this instance in bytes. Declaration int HeapCost { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.IData.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.html",
    "title": "IData Interface | Hazelcast .NET Documentation",
    "keywords": "IData Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Represents the basic unit of serialization. public interface IData Properties DataSize Gets the size of the data contained in this instance. HasPartitionHash Determines whether this instance has a partition hash. HeapCost Gets the approximate heap cost of this instance in bytes. IsPortable Determines whether this instance was created from an instance. PartitionHash Gets the partition hash. TotalSize Gets the total size of this instance in bytes. TypeId Returns serialization type of binary form. Methods ToByteArray() Gets the byte array representation of this instance."
  },
  "dev/api/Hazelcast.Serialization.IData.IsPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.IsPortable.html",
    "title": "IsPortable Property | Hazelcast .NET Documentation",
    "keywords": "IsPortable Property IsPortable Determines whether this instance was created from an instance. Declaration bool IsPortable { get; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Serialization.IData.PartitionHash.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.PartitionHash.html",
    "title": "PartitionHash Property | Hazelcast .NET Documentation",
    "keywords": "PartitionHash Property PartitionHash Gets the partition hash. Declaration int PartitionHash { get; } Property Value Int32 The partition hash."
  },
  "dev/api/Hazelcast.Serialization.IData.ToByteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.ToByteArray.html",
    "title": "ToByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ToByteArray Method ToByteArray() Gets the byte array representation of this instance. Declaration byte[] ToByteArray() Returns Byte [] Remarks Can return an empty array but never null ."
  },
  "dev/api/Hazelcast.Serialization.IData.TotalSize.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.TotalSize.html",
    "title": "TotalSize Property | Hazelcast .NET Documentation",
    "keywords": "TotalSize Property TotalSize Gets the total size of this instance in bytes. Declaration int TotalSize { get; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.IData.TypeId.html": {
    "href": "dev/api/Hazelcast.Serialization.IData.TypeId.html",
    "title": "TypeId Property | Hazelcast .NET Documentation",
    "keywords": "TypeId Property TypeId Returns serialization type of binary form. Declaration int TypeId { get; } Property Value Int32 serializer type id Remarks Returns serialization type of binary form. It's defined by"
  },
  "dev/api/Hazelcast.Serialization.IDataInput.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.html",
    "title": "IDataInput Interface | Hazelcast .NET Documentation",
    "keywords": "IDataInput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines a source of data that can be read from, to deserialize an object. public interface IDataInput Methods ReadBool() Reads a Boolean value. ReadBoolArray(Endianness) Reads an array of Boolean items. ReadByte() Reads a Byte value. ReadByteArray(Endianness) Reads an array of Byte items. ReadBytes(Byte[]) Reads bytes. ReadBytes(Byte[], Int32, Int32) Reads bytes. ReadChar(Endianness) Reads a Char value. ReadCharArray(Endianness) Reads an array of Char items. ReadDouble(Endianness) Reads a Double value. ReadDoubleArray(Endianness) Reads an array of Double items. ReadFloat(Endianness) Reads a Single value. ReadFloatArray(Endianness) Reads an array of Single items. ReadInt(Endianness) Reads an Int32 value. ReadIntArray(Endianness) Reads an array of Int32 items. ReadLong(Endianness) Reads a Int64 value. ReadLongArray(Endianness) Reads an array of Int64 items. ReadShort(Endianness) Reads a Int16 value. ReadShortArray(Endianness) Reads an array of Int16 items. ReadString() Reads an UTF8 String value. ReadStringArray(Endianness) Reads an array of UTF8 String items. ReadUnsignedShort(Endianness) Reads an UInt16 value. ReadUnsignedShortArray(Endianness) Reads an array of UInt16 items. Skip(Int32) Skips bytes. TryReadByte() Tries to read a Byte value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadBool.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadBool.html",
    "title": "ReadBool Method | Hazelcast .NET Documentation",
    "keywords": "ReadBool Method ReadBool() Reads a Boolean value. Declaration bool ReadBool() Returns Boolean The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadBoolArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadBoolArray.html",
    "title": "ReadBoolArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadBoolArray Method ReadBoolArray(Endianness) Reads an array of Boolean items. Declaration bool[] ReadBoolArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Boolean [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte() Reads a Byte value. Declaration byte ReadByte() Returns Byte The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadByteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadByteArray.html",
    "title": "ReadByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadByteArray Method ReadByteArray(Endianness) Reads an array of Byte items. Declaration byte[] ReadByteArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Byte [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadBytes.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadBytes.html",
    "title": "ReadBytes Method | Hazelcast .NET Documentation",
    "keywords": "ReadBytes Method ReadBytes(Byte[]) Reads bytes. Declaration int ReadBytes(byte[] bytes) Parameters Byte [] bytes The destination array of bytes. Returns Int32 ReadBytes(Byte[], Int32, Int32) Reads bytes. Declaration int ReadBytes(byte[] bytes, int offset, int count) Parameters Byte [] bytes The destination array of bytes. Int32 offset The destination offset. Int32 count The number of bytes to read. Returns Int32"
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadChar.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar(Endianness) Reads a Char value. Declaration char ReadChar(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Char The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadCharArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadCharArray.html",
    "title": "ReadCharArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadCharArray Method ReadCharArray(Endianness) Reads an array of Char items. Declaration char[] ReadCharArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Char [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadDouble.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble(Endianness) Reads a Double value. Declaration double ReadDouble(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Double The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadDoubleArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadDoubleArray.html",
    "title": "ReadDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadDoubleArray Method ReadDoubleArray(Endianness) Reads an array of Double items. Declaration double[] ReadDoubleArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Double [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadFloat.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat(Endianness) Reads a Single value. Declaration float ReadFloat(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Single The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadFloatArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadFloatArray.html",
    "title": "ReadFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloatArray Method ReadFloatArray(Endianness) Reads an array of Single items. Declaration float[] ReadFloatArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Single [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadInt.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt(Endianness) Reads an Int32 value. Declaration int ReadInt(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int32 The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadIntArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadIntArray.html",
    "title": "ReadIntArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadIntArray Method ReadIntArray(Endianness) Reads an array of Int32 items. Declaration int[] ReadIntArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int32 []"
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadLong.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong(Endianness) Reads a Int64 value. Declaration long ReadLong(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int64 The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadLongArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadLongArray.html",
    "title": "ReadLongArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadLongArray Method ReadLongArray(Endianness) Reads an array of Int64 items. Declaration long[] ReadLongArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int64 []"
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadShort.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort(Endianness) Reads a Int16 value. Declaration short ReadShort(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int16 The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadShortArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadShortArray.html",
    "title": "ReadShortArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadShortArray Method ReadShortArray(Endianness) Reads an array of Int16 items. Declaration short[] ReadShortArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns Int16 [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadString.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadString.html",
    "title": "ReadString Method | Hazelcast .NET Documentation",
    "keywords": "ReadString Method ReadString() Reads an UTF8 String value. Declaration string ReadString() Returns String The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadStringArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadStringArray.html",
    "title": "ReadStringArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadStringArray Method ReadStringArray(Endianness) Reads an array of UTF8 String items. Declaration string[] ReadStringArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness Returns String [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadUnsignedShort.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadUnsignedShort.html",
    "title": "ReadUnsignedShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadUnsignedShort Method ReadUnsignedShort(Endianness) Reads an UInt16 value. Declaration ushort ReadUnsignedShort(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns UInt16 The value."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.ReadUnsignedShortArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.ReadUnsignedShortArray.html",
    "title": "ReadUnsignedShortArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadUnsignedShortArray Method ReadUnsignedShortArray(Endianness) Reads an array of UInt16 items. Declaration ushort[] ReadUnsignedShortArray(Endianness endianness = Endianness.Unspecified) Parameters Endianness endianness The endianness. Returns UInt16 [] The array."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.Skip.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.Skip.html",
    "title": "Skip Method | Hazelcast .NET Documentation",
    "keywords": "Skip Method Skip(Int32) Skips bytes. Declaration int Skip(int count) Parameters Int32 count The number of bytes to skip. Returns Int32 The number of skipped bytes. Remarks The number of skipped bytes can be lower than count it the end of the buffer is reached."
  },
  "dev/api/Hazelcast.Serialization.IDataInput.TryReadByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataInput.TryReadByte.html",
    "title": "TryReadByte Method | Hazelcast .NET Documentation",
    "keywords": "TryReadByte Method TryReadByte() Tries to read a Byte value. Declaration Attempt<byte> TryReadByte() Returns Attempt < Byte > An attempt at reading a byte value, which may fail if the end of the buffer has been reached."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.html",
    "title": "IDataOutput Interface | Hazelcast .NET Documentation",
    "keywords": "IDataOutput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines a destination of data that can be written to, to serialize an object. public interface IDataOutput Methods Write(Boolean) Writes a Boolean value. Write(Byte) Writes a Byte value. Write(Char, Endianness) Writes a Char value. Write(Double, Endianness) Writes a Double value. Write(Int16, Endianness) Writes a Int16 value. Write(Int32, Endianness) Writes an Int32 value. Write(Int64, Endianness) Writes an Int64 value. Write(Single, Endianness) Writes a Single value. Write(String, Endianness) Writes an UTF8 String value. WriteArray(Boolean[], Endianness) Writes an array of Boolean items. WriteArray(Byte[], Endianness) Writes an array of Byte items. WriteArray(Char[], Endianness) Writes an array of Char items. WriteArray(Double[], Endianness) Writes an array of Double items. WriteArray(Int16[], Endianness) Writes an array of Int16 items. WriteArray(Int32[], Endianness) Writes an array of Int32 items. WriteArray(Int64[], Endianness) Writes an array of Int64 items. WriteArray(Single[], Endianness) Writes an array of Single items. WriteArray(String[], Endianness) Writes an array of UTF8 String items. WriteAsBytes(String) Writes a String value as bytes, assuming each char is 1-byte. WriteAsCharArray(String, Endianness) Writes a String value as chars. WriteBytes(Byte[]) Writes bytes. WriteBytes(Byte[], Int32, Int32) Writes bytes."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.Write.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(Byte) Writes a Byte value. Declaration void Write(byte value) Parameters Byte value The value. Write(Int16, Endianness) Writes a Int16 value. Declaration void Write(short value, Endianness endianness = Endianness.Unspecified) Parameters Int16 value The value. Endianness endianness The optional endianness. Write(Int32, Endianness) Writes an Int32 value. Declaration void Write(int value, Endianness endianness = Endianness.Unspecified) Parameters Int32 value The value. Endianness endianness The optional endianness. Write(Int64, Endianness) Writes an Int64 value. Declaration void Write(long value, Endianness endianness = Endianness.Unspecified) Parameters Int64 value The value. Endianness endianness The optional endianness. Write(Boolean) Writes a Boolean value. Declaration void Write(bool value) Parameters Boolean value The value. Write(Char, Endianness) Writes a Char value. Declaration void Write(char value, Endianness endianness = Endianness.Unspecified) Parameters Char value The value. Endianness endianness The endianness. Write(Single, Endianness) Writes a Single value. Declaration void Write(float value, Endianness endianness = Endianness.Unspecified) Parameters Single value The value. Endianness endianness The optional endianness. Write(Double, Endianness) Writes a Double value. Declaration void Write(double value, Endianness endianness = Endianness.Unspecified) Parameters Double value The value. Endianness endianness The optional endianness. Write(String, Endianness) Writes an UTF8 String value. Declaration void Write(string value, Endianness endianness = Endianness.Unspecified) Parameters String value The value. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.WriteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.WriteArray.html",
    "title": "WriteArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteArray Method WriteArray(Byte[], Endianness) Writes an array of Byte items. Declaration void WriteArray(byte[] values, Endianness endianness = Endianness.Unspecified) Parameters Byte [] values The array. Endianness endianness The endianness. WriteArray(Int16[], Endianness) Writes an array of Int16 items. Declaration void WriteArray(short[] values, Endianness endianness = Endianness.Unspecified) Parameters Int16 [] values The array. Endianness endianness The endianness. WriteArray(Int32[], Endianness) Writes an array of Int32 items. Declaration void WriteArray(int[] values, Endianness endianness = Endianness.Unspecified) Parameters Int32 [] values The array. Endianness endianness The endianness. WriteArray(Int64[], Endianness) Writes an array of Int64 items. Declaration void WriteArray(long[] values, Endianness endianness = Endianness.Unspecified) Parameters Int64 [] values The array. Endianness endianness The endianness. WriteArray(Boolean[], Endianness) Writes an array of Boolean items. Declaration void WriteArray(bool[] values, Endianness endianness = Endianness.Unspecified) Parameters Boolean [] values The array. Endianness endianness The endianness. WriteArray(Char[], Endianness) Writes an array of Char items. Declaration void WriteArray(char[] values, Endianness endianness = Endianness.Unspecified) Parameters Char [] values The array. Endianness endianness The endianness. WriteArray(Single[], Endianness) Writes an array of Single items. Declaration void WriteArray(float[] values, Endianness endianness = Endianness.Unspecified) Parameters Single [] values The array. Endianness endianness The endianness. WriteArray(Double[], Endianness) Writes an array of Double items. Declaration void WriteArray(double[] values, Endianness endianness = Endianness.Unspecified) Parameters Double [] values The array. Endianness endianness The endianness. WriteArray(String[], Endianness) Writes an array of UTF8 String items. Declaration void WriteArray(string[] values, Endianness endianness = Endianness.Unspecified) Parameters String [] values The array. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.WriteAsBytes.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.WriteAsBytes.html",
    "title": "WriteAsBytes Method | Hazelcast .NET Documentation",
    "keywords": "WriteAsBytes Method WriteAsBytes(String) Writes a String value as bytes, assuming each char is 1-byte. Declaration void WriteAsBytes(string value) Parameters String value The value."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.WriteAsCharArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.WriteAsCharArray.html",
    "title": "WriteAsCharArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteAsCharArray Method WriteAsCharArray(String, Endianness) Writes a String value as chars. Declaration void WriteAsCharArray(string value, Endianness endianness = Endianness.Unspecified) Parameters String value The value. Endianness endianness The endianness."
  },
  "dev/api/Hazelcast.Serialization.IDataOutput.WriteBytes.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataOutput.WriteBytes.html",
    "title": "WriteBytes Method | Hazelcast .NET Documentation",
    "keywords": "WriteBytes Method WriteBytes(Byte[]) Writes bytes. Declaration void WriteBytes(byte[] bytes) Parameters Byte [] bytes The bytes to write. WriteBytes(Byte[], Int32, Int32) Writes bytes. Declaration void WriteBytes(byte[] bytes, int offset, int count) Parameters Byte [] bytes The source bytes to write. Int32 offset The source offset. Int32 count The number of bytes to write."
  },
  "dev/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html",
    "title": "Create Method | Hazelcast .NET Documentation",
    "keywords": "Create Method Create(Int32) Creates an instance of a type. Declaration IIdentifiedDataSerializable Create(int typeId) Parameters Int32 typeId The unique identified of the type. Returns IIdentifiedDataSerializable An instance of the specified type, or null if the type identifier is not know by the factory."
  },
  "dev/api/Hazelcast.Serialization.IDataSerializableFactory.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataSerializableFactory.html",
    "title": "IDataSerializableFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IDataSerializableFactory Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable . public interface IDataSerializableFactory Methods Create(Int32) Creates an instance of a type."
  },
  "dev/api/Hazelcast.Serialization.IDataSerializerHook.CreateFactory.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataSerializerHook.CreateFactory.html",
    "title": "CreateFactory Method | Hazelcast .NET Documentation",
    "keywords": "CreateFactory Method CreateFactory() Creates the IDataSerializableFactory provided by this hook. Declaration IDataSerializableFactory CreateFactory() Returns IDataSerializableFactory The IDataSerializableFactory provided by this hook."
  },
  "dev/api/Hazelcast.Serialization.IDataSerializerHook.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataSerializerHook.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Gets the identifier of the IDataSerializableFactory provided by this hook. Declaration int FactoryId { get; } Property Value Int32 The identifier of the IDataSerializableFactory provided by this hook."
  },
  "dev/api/Hazelcast.Serialization.IDataSerializerHook.html": {
    "href": "dev/api/Hazelcast.Serialization.IDataSerializerHook.html",
    "title": "IDataSerializerHook Interface | Hazelcast .NET Documentation",
    "keywords": "IDataSerializerHook Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides an IDataSerializableFactory . public interface IDataSerializerHook Properties FactoryId Gets the identifier of the IDataSerializableFactory provided by this hook. Methods CreateFactory() Creates the IDataSerializableFactory provided by this hook."
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration int ClassId { get; } Property Value Int32 class id of this field's class"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration int FactoryId { get; } Property Value Int32 factory id of this field's class"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html",
    "title": "FieldType Property | Hazelcast .NET Documentation",
    "keywords": "FieldType Property FieldType Declaration FieldType FieldType { get; } Property Value FieldType field type"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.html",
    "title": "IFieldDefinition Interface | Hazelcast .NET Documentation",
    "keywords": "IFieldDefinition Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll FieldDefinition defines name, type, index of a field public interface IFieldDefinition Properties ClassId FactoryId FieldType Index Name Version"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.Index.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.Index.html",
    "title": "Index Property | Hazelcast .NET Documentation",
    "keywords": "Index Property Index Declaration int Index { get; } Property Value Int32 field index"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.Name.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Declaration string Name { get; } Property Value String field name"
  },
  "dev/api/Hazelcast.Serialization.IFieldDefinition.Version.html": {
    "href": "dev/api/Hazelcast.Serialization.IFieldDefinition.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 field version"
  },
  "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration int ClassId { get; } Property Value Int32 The identifier of the class. Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Declaration int FactoryId { get; } Property Value Int32 The identifier of the factory."
  },
  "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html": {
    "href": "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html",
    "title": "IIdentifiedDataSerializable Interface | Hazelcast .NET Documentation",
    "keywords": "IIdentifiedDataSerializable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines the interface that classes of objects can implement to take control of their own serialization. public interface IIdentifiedDataSerializable Remarks Classes that implement IIdentifiedDataSerializable rely on a declared factory to create instances, and deserialize fields, thus avoiding the costs otherwise associated with reflection. Properties ClassId Gets the identifier of the class. FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Methods ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html": {
    "href": "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . Declaration void ReadData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data."
  },
  "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html": {
    "href": "dev/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataInput.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataInput.html",
    "title": "IObjectDataInput Interface | Hazelcast .NET Documentation",
    "keywords": "IObjectDataInput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Extends IDataInput with support for IData and objects. public interface IObjectDataInput : IDataInput Inherited Members IDataInput.ReadByte() IDataInput.TryReadByte() IDataInput.ReadByteArray(Endianness) IDataInput.ReadShort(Endianness) IDataInput.ReadShortArray(Endianness) IDataInput.ReadUnsignedShort(Endianness) IDataInput.ReadUnsignedShortArray(Endianness) IDataInput.ReadInt(Endianness) IDataInput.ReadIntArray(Endianness) IDataInput.ReadLong(Endianness) IDataInput.ReadLongArray(Endianness) IDataInput.ReadBool() IDataInput.ReadBoolArray(Endianness) IDataInput.ReadChar(Endianness) IDataInput.ReadCharArray(Endianness) IDataInput.ReadFloat(Endianness) IDataInput.ReadFloatArray(Endianness) IDataInput.ReadDouble(Endianness) IDataInput.ReadDoubleArray(Endianness) IDataInput.ReadString() IDataInput.ReadStringArray(Endianness) IDataInput.ReadBytes(Byte[]) IDataInput.ReadBytes(Byte[], Int32, Int32) IDataInput.Skip(Int32) Methods ReadData() Reads an IData instance. ReadObject<T>() Reads an object."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataInput.ReadData.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataInput.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData() Reads an IData instance. Declaration IData ReadData() Returns IData The IData instance."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html",
    "title": "ReadObject Method | Hazelcast .NET Documentation",
    "keywords": "ReadObject Method ReadObject<T>() Reads an object. Declaration T ReadObject<T>() Returns T The object. Type Parameters T The type of the object."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataOutput.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataOutput.html",
    "title": "IObjectDataOutput Interface | Hazelcast .NET Documentation",
    "keywords": "IObjectDataOutput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Extends IDataOutput with support for IData and objects. public interface IObjectDataOutput : IDataOutput Inherited Members IDataOutput.Write(Byte) IDataOutput.WriteArray(Byte[], Endianness) IDataOutput.Write(Int16, Endianness) IDataOutput.WriteArray(Int16[], Endianness) IDataOutput.Write(Int32, Endianness) IDataOutput.WriteArray(Int32[], Endianness) IDataOutput.Write(Int64, Endianness) IDataOutput.WriteArray(Int64[], Endianness) IDataOutput.Write(Boolean) IDataOutput.WriteArray(Boolean[], Endianness) IDataOutput.Write(Char, Endianness) IDataOutput.WriteArray(Char[], Endianness) IDataOutput.Write(Single, Endianness) IDataOutput.WriteArray(Single[], Endianness) IDataOutput.Write(Double, Endianness) IDataOutput.WriteArray(Double[], Endianness) IDataOutput.Write(String, Endianness) IDataOutput.WriteAsCharArray(String, Endianness) IDataOutput.WriteAsBytes(String) IDataOutput.WriteArray(String[], Endianness) IDataOutput.WriteBytes(Byte[]) IDataOutput.WriteBytes(Byte[], Int32, Int32) Methods ToByteArray() Gets a byte array representation of the object. WriteData(IData) Writes an IData instance. WriteObject(Object) Writes an object."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html",
    "title": "ToByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ToByteArray Method ToByteArray() Gets a byte array representation of the object. Declaration byte[] ToByteArray() Returns Byte [] An array of byte representing the object."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataOutput.WriteData.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataOutput.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IData) Writes an IData instance. Declaration void WriteData(IData value) Parameters IData value The IData instance."
  },
  "dev/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html": {
    "href": "dev/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html",
    "title": "WriteObject Method | Hazelcast .NET Documentation",
    "keywords": "WriteObject Method WriteObject(Object) Writes an object. Declaration void WriteObject(object value) Parameters Object value The object."
  },
  "dev/api/Hazelcast.Serialization.IPortable.ClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortable.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Returns class identifier for this portable class. Declaration int ClassId { get; } Property Value Int32 class id Remarks Returns class identifier for this portable class. Class id should be unique per PortableFactory."
  },
  "dev/api/Hazelcast.Serialization.IPortable.FactoryId.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortable.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Returns PortableFactory id for this portable class Declaration int FactoryId { get; } Property Value Int32 factory id"
  },
  "dev/api/Hazelcast.Serialization.IPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortable.html",
    "title": "IPortable Interface | Hazelcast .NET Documentation",
    "keywords": "IPortable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Portable provides an alternative serialization method. public interface IPortable Remarks Portable provides an alternative serialization method. Instead of relying on reflection, each Portable is created by a registere IPortableFactory . Portable serialization that have the following advantages: Support multiversion of the same object type. (See ) Fetching individual fields without having to rely on reflection. Querying and indexing support without de-serialization and/or reflection. Properties ClassId Returns class identifier for this portable class. FactoryId Returns PortableFactory id for this portable class Methods ReadPortable(IPortableReader) Read portable fields using PortableReader WritePortable(IPortableWriter) Serialize this portable object using PortableWriter See Also IPortableFactory IPortableWriter IPortableReader IClassDefinition IIdentifiedDataSerializable SerializationOptions"
  },
  "dev/api/Hazelcast.Serialization.IPortable.ReadPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortable.ReadPortable.html",
    "title": "ReadPortable Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortable Method ReadPortable(IPortableReader) Read portable fields using PortableReader Declaration void ReadPortable(IPortableReader reader) Parameters IPortableReader reader PortableReader Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortable.WritePortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortable.WritePortable.html",
    "title": "WritePortable Method | Hazelcast .NET Documentation",
    "keywords": "WritePortable Method WritePortable(IPortableWriter) Serialize this portable object using PortableWriter Declaration void WritePortable(IPortableWriter writer) Parameters IPortableWriter writer PortableWriter Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.Endianness.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness Declaration Endianness Endianness { get; } Property Value Endianness"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.GetClassVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.GetClassVersion.html",
    "title": "GetClassVersion Method | Hazelcast .NET Documentation",
    "keywords": "GetClassVersion Method GetClassVersion(Int32, Int32) Declaration int GetClassVersion(int factoryId, int classId) Parameters Int32 factoryId Int32 classId Returns Int32"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.GetFieldDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.GetFieldDefinition.html",
    "title": "GetFieldDefinition Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldDefinition Method GetFieldDefinition(IClassDefinition, String) Declaration IFieldDefinition GetFieldDefinition(IClassDefinition cd, string name) Parameters IClassDefinition cd String name Returns IFieldDefinition"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.GetVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.GetVersion.html",
    "title": "GetVersion Method | Hazelcast .NET Documentation",
    "keywords": "GetVersion Method GetVersion() Declaration int GetVersion() Returns Int32"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.html",
    "title": "IPortableContext Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableContext Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public interface IPortableContext Properties Endianness Methods GetClassVersion(Int32, Int32) GetFieldDefinition(IClassDefinition, String) GetVersion() LookupClassDefinition(IData) LookupClassDefinition(Int32, Int32, Int32) LookupOrRegisterClassDefinition(IPortable) RegisterClassDefinition(IClassDefinition) SetClassVersion(Int32, Int32, Int32)"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.LookupClassDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.LookupClassDefinition.html",
    "title": "LookupClassDefinition Method | Hazelcast .NET Documentation",
    "keywords": "LookupClassDefinition Method LookupClassDefinition(Int32, Int32, Int32) Declaration IClassDefinition LookupClassDefinition(int factoryId, int classId, int version) Parameters Int32 factoryId Int32 classId Int32 version Returns IClassDefinition LookupClassDefinition(IData) Declaration IClassDefinition LookupClassDefinition(IData data) Parameters IData data Returns IClassDefinition Exceptions IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.LookupOrRegisterClassDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.LookupOrRegisterClassDefinition.html",
    "title": "LookupOrRegisterClassDefinition Method | Hazelcast .NET Documentation",
    "keywords": "LookupOrRegisterClassDefinition Method LookupOrRegisterClassDefinition(IPortable) Declaration IClassDefinition LookupOrRegisterClassDefinition(IPortable portable) Parameters IPortable portable Returns IClassDefinition Exceptions IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.RegisterClassDefinition.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.RegisterClassDefinition.html",
    "title": "RegisterClassDefinition Method | Hazelcast .NET Documentation",
    "keywords": "RegisterClassDefinition Method RegisterClassDefinition(IClassDefinition) Declaration IClassDefinition RegisterClassDefinition(IClassDefinition cd) Parameters IClassDefinition cd Returns IClassDefinition"
  },
  "dev/api/Hazelcast.Serialization.IPortableContext.SetClassVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableContext.SetClassVersion.html",
    "title": "SetClassVersion Method | Hazelcast .NET Documentation",
    "keywords": "SetClassVersion Method SetClassVersion(Int32, Int32, Int32) Declaration void SetClassVersion(int factoryId, int classId, int version) Parameters Int32 factoryId Int32 classId Int32 version"
  },
  "dev/api/Hazelcast.Serialization.IPortableFactory.Create.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableFactory.Create.html",
    "title": "Create Method | Hazelcast .NET Documentation",
    "keywords": "Create Method Create(Int32) Creates a Portable instance using given class id Declaration IPortable Create(int classId) Parameters Int32 classId portable class id Returns IPortable portable instance or null if class id is not known by this factory"
  },
  "dev/api/Hazelcast.Serialization.IPortableFactory.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableFactory.html",
    "title": "IPortableFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableFactory Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll PortableFactory is used to create Portable instances during de-serialization. public interface IPortableFactory Remarks PortableFactory is used to create Portable instances during de-serialization. Methods Create(Int32) Creates a Portable instance using given class id See Also IPortable IVersionedPortable"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html",
    "title": "GetFieldClassId Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldClassId Method GetFieldClassId(String) Declaration int GetFieldClassId(string fieldName) Parameters String fieldName name of the field Returns Int32 classId of given field"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html",
    "title": "GetFieldNames Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldNames Method GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns ICollection < String > set of field names on this portable class"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html",
    "title": "GetFieldType Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldType Method GetFieldType(String) Declaration FieldType GetFieldType(string fieldName) Parameters String fieldName name of the field Returns FieldType field type of given fieldName"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html",
    "title": "GetRawDataInput Method | Hazelcast .NET Documentation",
    "keywords": "GetRawDataInput Method GetRawDataInput() GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. Declaration IObjectDataInput GetRawDataInput() Returns IObjectDataInput rawDataInput Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.HasField.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.HasField.html",
    "title": "HasField Method | Hazelcast .NET Documentation",
    "keywords": "HasField Method HasField(String) Declaration bool HasField(string fieldName) Parameters String fieldName name of the field Returns Boolean true if field exist in this class."
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.html",
    "title": "IPortableReader Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableReader Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. public interface IPortableReader Remarks Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Properties Version Methods GetFieldClassId(String) GetFieldNames() GetFieldType(String) GetRawDataInput() GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. HasField(String) ReadBoolean(String) ReadBooleanArray(String) ReadByte(String) ReadByteArray(String) ReadChar(String) ReadCharArray(String) ReadDouble(String) ReadDoubleArray(String) ReadFloat(String) ReadFloatArray(String) ReadInt(String) ReadIntArray(String) ReadLong(String) ReadLongArray(String) ReadPortable<TPortable>(String) ReadPortableArray(String) ReadShort(String) ReadShortArray(String) ReadUTF(String) ReadUTFArray(String)"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html",
    "title": "ReadBoolean Method | Hazelcast .NET Documentation",
    "keywords": "ReadBoolean Method ReadBoolean(String) Declaration bool ReadBoolean(string fieldName) Parameters String fieldName name of the field Returns Boolean the boolean value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html",
    "title": "ReadBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadBooleanArray Method ReadBooleanArray(String) Declaration bool[] ReadBooleanArray(string fieldName) Parameters String fieldName name of the field Returns Boolean [] the boolean array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte(String) Declaration byte ReadByte(string fieldName) Parameters String fieldName name of the field Returns Byte the byte value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html",
    "title": "ReadByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadByteArray Method ReadByteArray(String) Declaration byte[] ReadByteArray(string fieldName) Parameters String fieldName name of the field Returns Byte [] the byte array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadChar.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar(String) Declaration char ReadChar(string fieldName) Parameters String fieldName name of the field Returns Char the char value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html",
    "title": "ReadCharArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadCharArray Method ReadCharArray(String) Declaration char[] ReadCharArray(string fieldName) Parameters String fieldName name of the field Returns Char [] the char array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble(String) Declaration double ReadDouble(string fieldName) Parameters String fieldName name of the field Returns Double the double value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html",
    "title": "ReadDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadDoubleArray Method ReadDoubleArray(String) Declaration double[] ReadDoubleArray(string fieldName) Parameters String fieldName name of the field Returns Double [] the double array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat(String) Declaration float ReadFloat(string fieldName) Parameters String fieldName name of the field Returns Single the float value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html",
    "title": "ReadFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloatArray Method ReadFloatArray(String) Declaration float[] ReadFloatArray(string fieldName) Parameters String fieldName name of the field Returns Single [] the float array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadInt.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt(String) Declaration int ReadInt(string fieldName) Parameters String fieldName name of the field Returns Int32 the int value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html",
    "title": "ReadIntArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadIntArray Method ReadIntArray(String) Declaration int[] ReadIntArray(string fieldName) Parameters String fieldName name of the field Returns Int32 [] the int array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadLong.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong(String) Declaration long ReadLong(string fieldName) Parameters String fieldName name of the field Returns Int64 the long value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html",
    "title": "ReadLongArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadLongArray Method ReadLongArray(String) Declaration long[] ReadLongArray(string fieldName) Parameters String fieldName name of the field Returns Int64 [] the long array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html",
    "title": "ReadPortable Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortable Method ReadPortable<TPortable>(String) Declaration TPortable ReadPortable<TPortable>(string fieldName) where TPortable : IPortable Parameters String fieldName name of the field Returns TPortable the portable value read Type Parameters TPortable Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html",
    "title": "ReadPortableArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortableArray Method ReadPortableArray(String) Declaration IPortable[] ReadPortableArray(string fieldName) Parameters String fieldName name of the field Returns IPortable [] the portabke value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadShort.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort(String) Declaration short ReadShort(string fieldName) Parameters String fieldName name of the field Returns Int16 the short value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html",
    "title": "ReadShortArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadShortArray Method ReadShortArray(String) Declaration short[] ReadShortArray(string fieldName) Parameters String fieldName name of the field Returns Int16 [] the short array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadUTF.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadUTF.html",
    "title": "ReadUTF Method | Hazelcast .NET Documentation",
    "keywords": "ReadUTF Method ReadUTF(String) Declaration string ReadUTF(string fieldName) Parameters String fieldName name of the field Returns String the utf string value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.ReadUTFArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.ReadUTFArray.html",
    "title": "ReadUTFArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadUTFArray Method ReadUTFArray(String) Declaration string[] ReadUTFArray(string fieldName) Parameters String fieldName name of the field Returns String [] the string array value read Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableReader.Version.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableReader.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 version global version of portable classes"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html",
    "title": "GetRawDataOutput Method | Hazelcast .NET Documentation",
    "keywords": "GetRawDataOutput Method GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. Declaration IObjectDataOutput GetRawDataOutput() Returns IObjectDataOutput ObjectDataOutput Remarks After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. User should not that after getting raw dataoutput trying to write portable fields will result in IOException Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.html",
    "title": "IPortableWriter Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableWriter Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. public interface IPortableWriter Remarks Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Methods GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. WriteBoolean(String, Boolean) Writes a primitive boolean. WriteBooleanArray(String, Boolean[]) Writes a primitive boolean-array. WriteByte(String, Byte) Writes a primitive byte. WriteByteArray(String, Byte[]) Writes a primitive byte-array. WriteChar(String, Char) Writes a primitive char. WriteCharArray(String, Char[]) Writes a primitive char-array. WriteDouble(String, Double) Writes a primitive double. WriteDoubleArray(String, Double[]) Writes a primitive double array. WriteFloat(String, Single) Writes a primitive float. WriteFloatArray(String, Single[]) Writes a primitive float array. WriteInt(String, Int32) Writes a primitive int. WriteIntArray(String, Int32[]) Writes a primitive int-array. WriteLong(String, Int64) Writes a primitive long. WriteLongArray(String, Int64[]) Writes a primitive long-array. WriteNullPortable(String, Int32, Int32) To write a null portable value, user needs to provide class and factoryIds of related class. WritePortable(String, IPortable) Writes a Portable. WritePortableArray(String, IPortable[]) Writes a an array of Portables. WriteShort(String, Int16) Writes a primitive short. WriteShortArray(String, Int16[]) Writes a primitive short-array. WriteUTF(String, String) Writes an UTF string. WriteUTFArray(String, String[]) Writes a primitive string-array."
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html",
    "title": "WriteBoolean Method | Hazelcast .NET Documentation",
    "keywords": "WriteBoolean Method WriteBoolean(String, Boolean) Writes a primitive boolean. Declaration void WriteBoolean(string fieldName, bool value) Parameters String fieldName name of the field Boolean value int value to be written Remarks Writes a primitive boolean. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html",
    "title": "WriteBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteBooleanArray Method WriteBooleanArray(String, Boolean[]) Writes a primitive boolean-array. Declaration void WriteBooleanArray(string fieldName, bool[] bools) Parameters String fieldName name of the field Boolean [] bools boolean array to be written Remarks Writes a primitive boolean-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html",
    "title": "WriteByte Method | Hazelcast .NET Documentation",
    "keywords": "WriteByte Method WriteByte(String, Byte) Writes a primitive byte. Declaration void WriteByte(string fieldName, byte value) Parameters String fieldName name of the field Byte value int value to be written Remarks Writes a primitive byte. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html",
    "title": "WriteByteArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteByteArray Method WriteByteArray(String, Byte[]) Writes a primitive byte-array. Declaration void WriteByteArray(string fieldName, byte[] bytes) Parameters String fieldName name of the field Byte [] bytes byte array to be written Remarks Writes a primitive byte-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html",
    "title": "WriteChar Method | Hazelcast .NET Documentation",
    "keywords": "WriteChar Method WriteChar(String, Char) Writes a primitive char. Declaration void WriteChar(string fieldName, char value) Parameters String fieldName name of the field Char value int value to be written Remarks Writes a primitive char. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html",
    "title": "WriteCharArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteCharArray Method WriteCharArray(String, Char[]) Writes a primitive char-array. Declaration void WriteCharArray(string fieldName, char[] chars) Parameters String fieldName name of the field Char [] chars char array to be written Remarks Writes a primitive char-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html",
    "title": "WriteDouble Method | Hazelcast .NET Documentation",
    "keywords": "WriteDouble Method WriteDouble(String, Double) Writes a primitive double. Declaration void WriteDouble(string fieldName, double value) Parameters String fieldName name of the field Double value int value to be written Remarks Writes a primitive double. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html",
    "title": "WriteDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteDoubleArray Method WriteDoubleArray(String, Double[]) Writes a primitive double array. Declaration void WriteDoubleArray(string fieldName, double[] values) Parameters String fieldName name of the field Double [] values double array to be written Remarks Writes a primitive double array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html",
    "title": "WriteFloat Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloat Method WriteFloat(String, Single) Writes a primitive float. Declaration void WriteFloat(string fieldName, float value) Parameters String fieldName name of the field Single value int value to be written Remarks Writes a primitive float. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html",
    "title": "WriteFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloatArray Method WriteFloatArray(String, Single[]) Writes a primitive float array. Declaration void WriteFloatArray(string fieldName, float[] values) Parameters String fieldName name of the field Single [] values float array to be written Remarks Writes a primitive float array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html",
    "title": "WriteInt Method | Hazelcast .NET Documentation",
    "keywords": "WriteInt Method WriteInt(String, Int32) Writes a primitive int. Declaration void WriteInt(string fieldName, int value) Parameters String fieldName name of the field Int32 value int value to be written Remarks Writes a primitive int. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html",
    "title": "WriteIntArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteIntArray Method WriteIntArray(String, Int32[]) Writes a primitive int-array. Declaration void WriteIntArray(string fieldName, int[] ints) Parameters String fieldName name of the field Int32 [] ints int array to be written Remarks Writes a primitive int-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html",
    "title": "WriteLong Method | Hazelcast .NET Documentation",
    "keywords": "WriteLong Method WriteLong(String, Int64) Writes a primitive long. Declaration void WriteLong(string fieldName, long value) Parameters String fieldName name of the field Int64 value long value to be written Remarks Writes a primitive long. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html",
    "title": "WriteLongArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteLongArray Method WriteLongArray(String, Int64[]) Writes a primitive long-array. Declaration void WriteLongArray(string fieldName, long[] longs) Parameters String fieldName name of the field Int64 [] longs long array to be written Remarks Writes a primitive long-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html",
    "title": "WriteNullPortable Method | Hazelcast .NET Documentation",
    "keywords": "WriteNullPortable Method WriteNullPortable(String, Int32, Int32) To write a null portable value, user needs to provide class and factoryIds of related class. Declaration void WriteNullPortable(string fieldName, int factoryId, int classId) Parameters String fieldName name of the field Int32 factoryId factory id of related portable class Int32 classId class id of related portable class Remarks To write a null portable value, user needs to provide class and factoryIds of related class. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html",
    "title": "WritePortable Method | Hazelcast .NET Documentation",
    "keywords": "WritePortable Method WritePortable(String, IPortable) Writes a Portable. Declaration void WritePortable(string fieldName, IPortable portable) Parameters String fieldName name of the field IPortable portable Portable to be written Remarks Writes a Portable. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html",
    "title": "WritePortableArray Method | Hazelcast .NET Documentation",
    "keywords": "WritePortableArray Method WritePortableArray(String, IPortable[]) Writes a an array of Portables. Declaration void WritePortableArray(string fieldName, IPortable[] portables) Parameters String fieldName name of the field IPortable [] portables portable array to be written Remarks Writes a an array of Portables. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html",
    "title": "WriteShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteShort Method WriteShort(String, Int16) Writes a primitive short. Declaration void WriteShort(string fieldName, short value) Parameters String fieldName name of the field Int16 value int value to be written Remarks Writes a primitive short. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html",
    "title": "WriteShortArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteShortArray Method WriteShortArray(String, Int16[]) Writes a primitive short-array. Declaration void WriteShortArray(string fieldName, short[] values) Parameters String fieldName name of the field Int16 [] values short array to be written Remarks Writes a primitive short-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteUTF.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteUTF.html",
    "title": "WriteUTF Method | Hazelcast .NET Documentation",
    "keywords": "WriteUTF Method WriteUTF(String, String) Writes an UTF string. Declaration void WriteUTF(string fieldName, string value) Parameters String fieldName name of the field String value utf string value to be written Remarks Writes an UTF string. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.IPortableWriter.WriteUTFArray.html": {
    "href": "dev/api/Hazelcast.Serialization.IPortableWriter.WriteUTFArray.html",
    "title": "WriteUTFArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteUTFArray Method WriteUTFArray(String, String[]) Writes a primitive string-array. Declaration void WriteUTFArray(string fieldName, string[] strings) Parameters String fieldName name of the field String [] strings string array to be written Remarks Writes a primitive string-array. Exceptions IOException System.IO.IOException"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.CreateObjectDataInput.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.CreateObjectDataInput.html",
    "title": "CreateObjectDataInput Method | Hazelcast .NET Documentation",
    "keywords": "CreateObjectDataInput Method CreateObjectDataInput(Byte[]) Declaration IBufferObjectDataInput CreateObjectDataInput(byte[] data) Parameters Byte [] data Returns IBufferObjectDataInput CreateObjectDataInput(IData) Declaration IBufferObjectDataInput CreateObjectDataInput(IData data) Parameters IData data Returns IBufferObjectDataInput"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.CreateObjectDataOutput.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.CreateObjectDataOutput.html",
    "title": "CreateObjectDataOutput Method | Hazelcast .NET Documentation",
    "keywords": "CreateObjectDataOutput Method CreateObjectDataOutput(Int32) Declaration IBufferObjectDataOutput CreateObjectDataOutput(int size) Parameters Int32 size Returns IBufferObjectDataOutput CreateObjectDataOutput() Declaration IBufferObjectDataOutput CreateObjectDataOutput() Returns IBufferObjectDataOutput"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.CreatePortableReader.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.CreatePortableReader.html",
    "title": "CreatePortableReader Method | Hazelcast .NET Documentation",
    "keywords": "CreatePortableReader Method CreatePortableReader(IData) Declaration IPortableReader CreatePortableReader(IData data) Parameters IData data Returns IPortableReader"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.Destroy.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.Destroy.html",
    "title": "Destroy Method | Hazelcast .NET Documentation",
    "keywords": "Destroy Method Destroy() Declaration void Destroy()"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.DisposeData.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.DisposeData.html",
    "title": "DisposeData Method | Hazelcast .NET Documentation",
    "keywords": "DisposeData Method DisposeData(IData) Declaration void DisposeData(IData data) Parameters IData data"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.Endianness.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness Declaration Endianness Endianness { get; } Property Value Endianness"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.GetPortableContext.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.GetPortableContext.html",
    "title": "GetPortableContext Method | Hazelcast .NET Documentation",
    "keywords": "GetPortableContext Method GetPortableContext() Declaration IPortableContext GetPortableContext() Returns IPortableContext"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.GetVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.GetVersion.html",
    "title": "GetVersion Method | Hazelcast .NET Documentation",
    "keywords": "GetVersion Method GetVersion() Declaration byte GetVersion() Returns Byte"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.html",
    "title": "ISerializationService Interface | Hazelcast .NET Documentation",
    "keywords": "ISerializationService Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public interface ISerializationService : IDisposable Inherited Members IDisposable.Dispose() Properties Endianness Methods CreateObjectDataInput(IData) CreateObjectDataInput(Byte[]) CreateObjectDataOutput() CreateObjectDataOutput(Int32) CreatePortableReader(IData) Destroy() DisposeData(IData) GetPortableContext() GetVersion() ReadObject<T>(IObjectDataInput) ToData(Object) ToData(Object, IPartitioningStrategy) ToObject(Object) ToObject<T>(Object) WriteObject(IObjectDataOutput, Object)"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.ReadObject.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.ReadObject.html",
    "title": "ReadObject Method | Hazelcast .NET Documentation",
    "keywords": "ReadObject Method ReadObject<T>(IObjectDataInput) Declaration T ReadObject<T>(IObjectDataInput input) Parameters IObjectDataInput input Returns T Type Parameters T"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.ToData.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.ToData.html",
    "title": "ToData Method | Hazelcast .NET Documentation",
    "keywords": "ToData Method ToData(Object) Declaration IData ToData(object obj) Parameters Object obj Returns IData ToData(Object, IPartitioningStrategy) Declaration IData ToData(object obj, IPartitioningStrategy strategy) Parameters Object obj IPartitioningStrategy strategy Returns IData"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.ToObject.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.ToObject.html",
    "title": "ToObject Method | Hazelcast .NET Documentation",
    "keywords": "ToObject Method ToObject<T>(Object) Declaration T ToObject<T>(object data) Parameters Object data Returns T Type Parameters T ToObject(Object) Declaration object ToObject(object data) Parameters Object data Returns Object"
  },
  "dev/api/Hazelcast.Serialization.ISerializationService.WriteObject.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializationService.WriteObject.html",
    "title": "WriteObject Method | Hazelcast .NET Documentation",
    "keywords": "WriteObject Method WriteObject(IObjectDataOutput, Object) Declaration void WriteObject(IObjectDataOutput output, object obj) Parameters IObjectDataOutput output Object obj"
  },
  "dev/api/Hazelcast.Serialization.ISerializer.Destroy.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializer.Destroy.html",
    "title": "Destroy Method | Hazelcast .NET Documentation",
    "keywords": "Destroy Method Destroy() Called when instance is shutting down. Declaration void Destroy() Remarks Called when instance is shutting down. It can be used to clear used resources."
  },
  "dev/api/Hazelcast.Serialization.ISerializer.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializer.html",
    "title": "ISerializer Interface | Hazelcast .NET Documentation",
    "keywords": "ISerializer Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Base interface of custom serialization interfaces see IByteArraySerializer<T> see IStreamSerializer<T> public interface ISerializer Properties TypeId Methods Destroy() Called when instance is shutting down."
  },
  "dev/api/Hazelcast.Serialization.ISerializer.TypeId.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializer.TypeId.html",
    "title": "TypeId Property | Hazelcast .NET Documentation",
    "keywords": "TypeId Property TypeId Declaration int TypeId { get; } Property Value Int32 typeId of serializer"
  },
  "dev/api/Hazelcast.Serialization.ISerializerHook-1.CreateSerializer.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializerHook-1.CreateSerializer.html",
    "title": "CreateSerializer Method | Hazelcast .NET Documentation",
    "keywords": "CreateSerializer Method CreateSerializer() Creates a new serializer for the serialization type Declaration ISerializer CreateSerializer() Returns ISerializer a new serializer instance"
  },
  "dev/api/Hazelcast.Serialization.ISerializerHook-1.GetSerializationType.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializerHook-1.GetSerializationType.html",
    "title": "GetSerializationType Method | Hazelcast .NET Documentation",
    "keywords": "GetSerializationType Method GetSerializationType() Returns the actual class type of the serialized object Declaration Type GetSerializationType() Returns Type the serialized object type"
  },
  "dev/api/Hazelcast.Serialization.ISerializerHook-1.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializerHook-1.html",
    "title": "ISerializerHook<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ISerializerHook<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public interface ISerializerHook<T> Type Parameters T Methods CreateSerializer() Creates a new serializer for the serialization type GetSerializationType() Returns the actual class type of the serialized object IsOverwritable() Defines if this serializer can be overridden by defining a custom serializer in the configurations (codebase or configuration file)"
  },
  "dev/api/Hazelcast.Serialization.ISerializerHook-1.IsOverwritable.html": {
    "href": "dev/api/Hazelcast.Serialization.ISerializerHook-1.IsOverwritable.html",
    "title": "IsOverwritable Method | Hazelcast .NET Documentation",
    "keywords": "IsOverwritable Method IsOverwritable() Defines if this serializer can be overridden by defining a custom serializer in the configurations (codebase or configuration file) Declaration bool IsOverwritable() Returns Boolean if the serializer is overwritable"
  },
  "dev/api/Hazelcast.Serialization.IStreamSerializer-1.html": {
    "href": "dev/api/Hazelcast.Serialization.IStreamSerializer-1.html",
    "title": "IStreamSerializer<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IStreamSerializer<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll A base class for custom serialization. public interface IStreamSerializer<T> : ISerializer Inherited Members ISerializer.Destroy() ISerializer.TypeId Type Parameters T Remarks A base class for custom serialization. User can register custom serializer. Methods Read(IObjectDataInput) Reads object from objectDataInputStream Write(IObjectDataOutput, T) This method writes object to ObjectDataOutput"
  },
  "dev/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html": {
    "href": "dev/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html",
    "title": "Read Method | Hazelcast .NET Documentation",
    "keywords": "Read Method Read(IObjectDataInput) Reads object from objectDataInputStream Declaration T Read(IObjectDataInput input) Parameters IObjectDataInput input ObjectDataInput stream that object will read from Returns T read object Exceptions IOException in case of failure to read"
  },
  "dev/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html": {
    "href": "dev/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(IObjectDataOutput, T) This method writes object to ObjectDataOutput Declaration void Write(IObjectDataOutput output, T obj) Parameters IObjectDataOutput output ObjectDataOutput stream that object will be written to T obj that will be written to out Exceptions IOException in case of failure to write"
  },
  "dev/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html",
    "title": "ClassVersion Property | Hazelcast .NET Documentation",
    "keywords": "ClassVersion Property ClassVersion Returns version for this Portable class Declaration int ClassVersion { get; } Property Value Int32 class version"
  },
  "dev/api/Hazelcast.Serialization.IVersionedPortable.html": {
    "href": "dev/api/Hazelcast.Serialization.IVersionedPortable.html",
    "title": "IVersionedPortable Interface | Hazelcast .NET Documentation",
    "keywords": "IVersionedPortable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. public interface IVersionedPortable : IPortable Inherited Members IPortable.ClassId IPortable.FactoryId IPortable.ReadPortable(IPortableReader) IPortable.WritePortable(IPortableWriter) Properties ClassVersion Returns version for this Portable class See Also IPortable IPortableFactory"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.-ctor.html",
    "title": "JavaClass Constructor | Hazelcast .NET Documentation",
    "keywords": "JavaClass Constructor JavaClass(String) Declaration public JavaClass(string name) Parameters String name"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.Equals.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object other) Parameters Object other Returns Boolean Overrides Object.Equals(Object) Equals(JavaClass) Declaration protected bool Equals(JavaClass other) Parameters JavaClass other Returns Boolean Equals(JavaClass, JavaClass) Declaration public static bool Equals(JavaClass left, JavaClass right) Parameters JavaClass left JavaClass right Returns Boolean"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.html",
    "title": "JavaClass Class | Hazelcast .NET Documentation",
    "keywords": "JavaClass Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Class for serializing/deserializing Java Class types public class JavaClass Inheritance Object JavaClass Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors JavaClass(String) Properties Name Methods Equals(JavaClass) Equals(JavaClass, JavaClass) Equals(Object) GetHashCode() ToString()"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.Name.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Declaration public string Name { get; } Property Value String"
  },
  "dev/api/Hazelcast.Serialization.JavaClass.ToString.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaClass.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.-ctor.html",
    "title": "JavaEnum Constructor | Hazelcast .NET Documentation",
    "keywords": "JavaEnum Constructor JavaEnum(String, String) Declaration public JavaEnum(string type, string value) Parameters String type String value"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.Equals.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(JavaEnum) Declaration protected bool Equals(JavaEnum other) Parameters JavaEnum other Returns Boolean Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.GetHashCode.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.html",
    "title": "JavaEnum Class | Hazelcast .NET Documentation",
    "keywords": "JavaEnum Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Class for serializing/deserializing Java enums public class JavaEnum Inheritance Object JavaEnum Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors JavaEnum(String, String) Properties Type Value Methods Equals(JavaEnum) Equals(Object) GetHashCode() ToString()"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.ToString.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.Type.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Declaration public string Type { get; } Property Value String"
  },
  "dev/api/Hazelcast.Serialization.JavaEnum.Value.html": {
    "href": "dev/api/Hazelcast.Serialization.JavaEnum.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Declaration public string Value { get; } Property Value String"
  },
  "dev/api/Hazelcast.Serialization.SerializationException.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationException.-ctor.html",
    "title": "SerializationException Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializationException Constructor SerializationException() Initializes a new instance of the SerializationException class. Declaration public SerializationException() SerializationException(String) Initializes a new instance of the SerializationException class with a specified error message. Declaration public SerializationException(string message) Parameters String message The message that describes the error. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. SerializationException(String, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "dev/api/Hazelcast.Serialization.SerializationException.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationException.html",
    "title": "SerializationException Class | Hazelcast .NET Documentation",
    "keywords": "SerializationException Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. [Serializable] public sealed class SerializationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SerializationException() Initializes a new instance of the SerializationException class. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. SerializationException(String) Initializes a new instance of the SerializationException class with a specified error message. SerializationException(String, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html",
    "title": "AddDataSerializableFactory Method | Hazelcast .NET Documentation",
    "keywords": "AddDataSerializableFactory Method AddDataSerializableFactory(Int32, IDataSerializableFactory) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactory(int factoryId, IDataSerializableFactory factory) Parameters Int32 factoryId The identifier of the factory. IDataSerializableFactory factory The factory. Returns SerializationOptions The SerializationOptions ."
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html",
    "title": "AddDataSerializableFactoryClass Method | Hazelcast .NET Documentation",
    "keywords": "AddDataSerializableFactoryClass Method AddDataSerializableFactoryClass(Int32, String) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, string factoryTypeName) Parameters Int32 factoryId The identifier of the factory. String factoryTypeName The type name of the factory Returns SerializationOptions The SerializationOptions . AddDataSerializableFactoryClass(Int32, Type) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, Type factoryType) Parameters Int32 factoryId The identifier of the factory. Type factoryType The type of the factory Returns SerializationOptions The SerializationOptions ."
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html",
    "title": "AddPortableFactory Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableFactory Method AddPortableFactory(Int32, IPortableFactory) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, IPortableFactory factory) Parameters Int32 factoryId The identifier of the factory. IPortableFactory factory The factory. Returns SerializationOptions The SerializationOptions . AddPortableFactory(Int32, Type) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, Type factoryType) Parameters Int32 factoryId The identifier of the factory. Type factoryType The type of the factory Returns SerializationOptions The SerializationOptions . AddPortableFactory(Int32, String) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, string factoryTypeName) Parameters Int32 factoryId The identifier of the factory. String factoryTypeName The type name of the factory Returns SerializationOptions The SerializationOptions ."
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html",
    "title": "ClassDefinitions Property | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitions Property ClassDefinitions Declaration public ICollection<IClassDefinition> ClassDefinitions { get; } Property Value ICollection < IClassDefinition >"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.-ctor.html",
    "title": "SerializationOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializationOptions Constructor SerializationOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializationOptions()"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html",
    "title": "DataSerializableFactories Property | Hazelcast .NET Documentation",
    "keywords": "DataSerializableFactories Property DataSerializableFactories Declaration public ICollection<FactoryOptions<IDataSerializableFactory>> DataSerializableFactories { get; } Property Value ICollection < FactoryOptions < IDataSerializableFactory >>"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.DefaultSerializer.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.DefaultSerializer.html",
    "title": "DefaultSerializer Property | Hazelcast .NET Documentation",
    "keywords": "DefaultSerializer Property DefaultSerializer Declaration public SerializerOptions DefaultSerializer { get; set; } Property Value SerializerOptions"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.Endianness.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness Gets or sets the Endianness . Declaration public Endianness Endianness { get; set; } Property Value Endianness"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.html",
    "title": "SerializationOptions Class | Hazelcast .NET Documentation",
    "keywords": "SerializationOptions Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Contains the serialization options public sealed class SerializationOptions Inheritance Object SerializationOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks IIdentifiedDataSerializable , IPortable , custom serializers, and global serializer can be configured using this config. Constructors SerializationOptions() Initializes a new instance of the SerializationOptions class. Properties ClassDefinitions DataSerializableFactories DefaultSerializer Endianness Gets or sets the Endianness . PortableFactories Gets the portable factories. PortableVersion Gets or sets the portable version. Serializers ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Methods AddDataSerializableFactory(Int32, IDataSerializableFactory) Adds an IDataSerializableFactory . AddDataSerializableFactoryClass(Int32, String) Adds an IDataSerializableFactory . AddDataSerializableFactoryClass(Int32, Type) Adds an IDataSerializableFactory . AddPortableFactory(Int32, IPortableFactory) Adds an IPortableFactory . AddPortableFactory(Int32, String) Adds an IPortableFactory . AddPortableFactory(Int32, Type) Adds an IPortableFactory ."
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html",
    "title": "PortableFactories Property | Hazelcast .NET Documentation",
    "keywords": "PortableFactories Property PortableFactories Gets the portable factories. Declaration public ICollection<FactoryOptions<IPortableFactory>> PortableFactories { get; } Property Value ICollection < FactoryOptions < IPortableFactory >>"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html",
    "title": "PortableVersion Property | Hazelcast .NET Documentation",
    "keywords": "PortableVersion Property PortableVersion Gets or sets the portable version. Declaration public int PortableVersion { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.Serializers.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.Serializers.html",
    "title": "Serializers Property | Hazelcast .NET Documentation",
    "keywords": "Serializers Property Serializers Declaration public ICollection<SerializerOptions> Serializers { get; } Property Value ICollection < SerializerOptions >"
  },
  "dev/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html",
    "title": "ValidateClassDefinitions Property | Hazelcast .NET Documentation",
    "keywords": "ValidateClassDefinitions Property ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Declaration public bool ValidateClassDefinitions { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Serialization.SerializerHooks.Add.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerHooks.Add.html",
    "title": "Add Method | Hazelcast .NET Documentation",
    "keywords": "Add Method Add(Type) Adds a type. Declaration public void Add(Type type) Parameters Type type The type. Add<T>() Adds a type. Declaration public void Add<T>() Type Parameters T The type."
  },
  "dev/api/Hazelcast.Serialization.SerializerHooks.Hooks.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerHooks.Hooks.html",
    "title": "Hooks Property | Hazelcast .NET Documentation",
    "keywords": "Hooks Property Hooks Gets the hooks. Declaration public IEnumerable<IDataSerializerHook> Hooks { get; } Property Value IEnumerable < IDataSerializerHook >"
  },
  "dev/api/Hazelcast.Serialization.SerializerHooks.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerHooks.html",
    "title": "SerializerHooks Class | Hazelcast .NET Documentation",
    "keywords": "SerializerHooks Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Represents a collection of ISerializerHook<T> types. public sealed class SerializerHooks Inheritance Object SerializerHooks Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Hooks Gets the hooks. Types Gets the types. Methods Add(Type) Adds a type. Add<T>() Adds a type."
  },
  "dev/api/Hazelcast.Serialization.SerializerHooks.Types.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerHooks.Types.html",
    "title": "Types Property | Hazelcast .NET Documentation",
    "keywords": "Types Property Types Gets the types. Declaration public IEnumerable<Type> Types { get; } Property Value IEnumerable < Type >"
  },
  "dev/api/Hazelcast.Serialization.SerializerOptions.-ctor.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerOptions.-ctor.html",
    "title": "SerializerOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializerOptions Constructor SerializerOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializerOptions()"
  },
  "dev/api/Hazelcast.Serialization.SerializerOptions.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerOptions.html",
    "title": "SerializerOptions Class | Hazelcast .NET Documentation",
    "keywords": "SerializerOptions Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public class SerializerOptions : SingletonServiceFactory<ISerializer>, IDisposable Inheritance Object SingletonServiceFactory < ISerializer > SerializerOptions Implements IDisposable Inherited Members SingletonServiceFactory<ISerializer>.Creator SingletonServiceFactory<ISerializer>.ServiceProvider SingletonServiceFactory<ISerializer>.OwnsService SingletonServiceFactory<ISerializer>.Service SingletonServiceFactory<ISerializer>.Clone(Boolean) SingletonServiceFactory<ISerializer>.Dispose() SingletonServiceFactory<ISerializer>.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SerializerOptions() Initializes a new instance of the SerializationOptions class. Properties OverrideClr Whether to fully override (and ignore) the native CLR serialization. SerializedType Gets or sets the type being serialized."
  },
  "dev/api/Hazelcast.Serialization.SerializerOptions.OverrideClr.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerOptions.OverrideClr.html",
    "title": "OverrideClr Property | Hazelcast .NET Documentation",
    "keywords": "OverrideClr Property OverrideClr Whether to fully override (and ignore) the native CLR serialization. Declaration public bool OverrideClr { get; set; } Property Value Boolean"
  },
  "dev/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html": {
    "href": "dev/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html",
    "title": "SerializedType Property | Hazelcast .NET Documentation",
    "keywords": "SerializedType Property SerializedType Gets or sets the type being serialized. Declaration public Type SerializedType { get; set; } Property Value Type"
  },
  "dev/api/Hazelcast.Transactions.html": {
    "href": "dev/api/Hazelcast.Transactions.html",
    "title": "Hazelcast.Transactions Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Transactions Namespace Classes TransactionOptions Contains the configuration for a transaction Interfaces ITransactionContext Represents a transaction context. Enums TransactionOptions.TransactionType TransactionState"
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html",
    "title": "CommitAsync Method | Hazelcast .NET Documentation",
    "keywords": "CommitAsync Method CommitAsync() Commits the transaction. Declaration Task CommitAsync() Returns Task"
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetDictionaryAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetDictionaryAsync.html",
    "title": "GetDictionaryAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetDictionaryAsync Method GetDictionaryAsync<TKey, TValue>(String) Gets a IHTxDictionary<TKey, TValue> transactional distributed object. Declaration Task<IHTxDictionary<TKey, TValue>> GetDictionaryAsync<TKey, TValue>(string name) Parameters String name The unique name of the v. Returns Task < IHTxDictionary <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html",
    "title": "GetListAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetListAsync Method GetListAsync<TItem>(String) Gets a IHTxList<TItem> transactional distributed object. Declaration Task<IHTxList<TItem>> GetListAsync<TItem>(string name) Parameters String name The unique name of the list. Returns Task < IHTxList <TItem>> The transactional list that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetMultiDictionaryAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetMultiDictionaryAsync.html",
    "title": "GetMultiDictionaryAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMultiDictionaryAsync Method GetMultiDictionaryAsync<TKey, TValue>(String) Gets a IHTxMultiDictionary<TKey, TValue> transactional distributed object. Declaration Task<IHTxMultiDictionary<TKey, TValue>> GetMultiDictionaryAsync<TKey, TValue>(string name) Parameters String name The unique name of the v. Returns Task < IHTxMultiDictionary <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html",
    "title": "GetQueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetQueueAsync Method GetQueueAsync<TItem>(String) Gets a IHTxQueue<TItem> transactional distributed object. Declaration Task<IHTxQueue<TItem>> GetQueueAsync<TItem>(string name) Parameters String name The unique name of the v. Returns Task < IHTxQueue <TItem>> The transactional queue that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html",
    "title": "GetSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSetAsync Method GetSetAsync<TItem>(String) Gets a IHTxSet<TItem> transactional distributed object. Declaration Task<IHTxSet<TItem>> GetSetAsync<TItem>(string name) Parameters String name The unique name of the set. Returns Task < IHTxSet <TItem>> The transactional set that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.GetTransactionalAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.GetTransactionalAsync.html",
    "title": "GetTransactionalAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetTransactionalAsync Method GetTransactionalAsync<TItem>(IHList<TItem>) Gets a IHTxList<TItem> transactional distributed object. Declaration Task<IHTxList<TItem>> GetTransactionalAsync<TItem>(IHList<TItem> source) Parameters IHList <TItem> source The original, non-transactional list. Returns Task < IHTxList <TItem>> The transactional list that was retrieved or created. Type Parameters TItem The type of the items. GetTransactionalAsync<TItem>(IHSet<TItem>) Gets a IHTxSet<TItem> transactional distributed object. Declaration Task<IHTxSet<TItem>> GetTransactionalAsync<TItem>(IHSet<TItem> source) Parameters IHSet <TItem> source The original, non-transactional set. Returns Task < IHTxSet <TItem>> The transactional set that was retrieved or created. Type Parameters TItem The type of the items. GetTransactionalAsync<TItem>(IHQueue<TItem>) Gets a IHTxQueue<TItem> transactional distributed object. Declaration Task<IHTxQueue<TItem>> GetTransactionalAsync<TItem>(IHQueue<TItem> source) Parameters IHQueue <TItem> source The original, non-transactional queue. Returns Task < IHTxQueue <TItem>> The transactional queue that was retrieved or created. Type Parameters TItem The type of the items. GetTransactionalAsync<TKey, TValue>(IHMultiDictionary<TKey, TValue>) Gets a IHTxMultiDictionary<TKey, TValue> transactional distributed object. Declaration Task<IHTxMultiDictionary<TKey, TValue>> GetTransactionalAsync<TKey, TValue>(IHMultiDictionary<TKey, TValue> source) Parameters IHMultiDictionary <TKey, TValue> source The original, non-transactional map. Returns Task < IHTxMultiDictionary <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. GetTransactionalAsync<TKey, TValue>(IHDictionary<TKey, TValue>) Gets a IHTxDictionary<TKey, TValue> transactional distributed object. Declaration Task<IHTxDictionary<TKey, TValue>> GetTransactionalAsync<TKey, TValue>(IHDictionary<TKey, TValue> source) Parameters IHDictionary <TKey, TValue> source The original, non-transactional map. Returns Task < IHTxDictionary <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.html",
    "title": "ITransactionContext Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionContext Interface Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Represents a transaction context. public interface ITransactionContext : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties State Gets the state of the transaction. TransactionId Gets the unique identifier of the transaction. Methods CommitAsync() Commits the transaction. GetDictionaryAsync<TKey, TValue>(String) Gets a IHTxDictionary<TKey, TValue> transactional distributed object. GetListAsync<TItem>(String) Gets a IHTxList<TItem> transactional distributed object. GetMultiDictionaryAsync<TKey, TValue>(String) Gets a IHTxMultiDictionary<TKey, TValue> transactional distributed object. GetQueueAsync<TItem>(String) Gets a IHTxQueue<TItem> transactional distributed object. GetSetAsync<TItem>(String) Gets a IHTxSet<TItem> transactional distributed object. GetTransactionalAsync<TItem>(IHList<TItem>) Gets a IHTxList<TItem> transactional distributed object. GetTransactionalAsync<TItem>(IHQueue<TItem>) Gets a IHTxQueue<TItem> transactional distributed object. GetTransactionalAsync<TItem>(IHSet<TItem>) Gets a IHTxSet<TItem> transactional distributed object. GetTransactionalAsync<TKey, TValue>(IHDictionary<TKey, TValue>) Gets a IHTxDictionary<TKey, TValue> transactional distributed object. GetTransactionalAsync<TKey, TValue>(IHMultiDictionary<TKey, TValue>) Gets a IHTxMultiDictionary<TKey, TValue> transactional distributed object. RollbackAsync() Rolls the transaction back."
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html",
    "title": "RollbackAsync Method | Hazelcast .NET Documentation",
    "keywords": "RollbackAsync Method RollbackAsync() Rolls the transaction back. Declaration Task RollbackAsync() Returns Task"
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.State.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the state of the transaction. Declaration TransactionState State { get; } Property Value TransactionState"
  },
  "dev/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html": {
    "href": "dev/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html",
    "title": "TransactionId Property | Hazelcast .NET Documentation",
    "keywords": "TransactionId Property TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Guid"
  },
  "dev/api/Hazelcast.Transactions.TransactionOptions.Durability.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionOptions.Durability.html",
    "title": "Durability Property | Hazelcast .NET Documentation",
    "keywords": "Durability Property Durability Gets or sets the transaction durability. Declaration public int Durability { get; set; } Property Value Int32"
  },
  "dev/api/Hazelcast.Transactions.TransactionOptions.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionOptions.html",
    "title": "TransactionOptions Class | Hazelcast .NET Documentation",
    "keywords": "TransactionOptions Class Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Contains the configuration for a transaction public sealed class TransactionOptions Inheritance Object TransactionOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Durability Gets or sets the transaction durability. Timeout Gets or sets the transaction timeout. Type Gets or sets the type of the transaction."
  },
  "dev/api/Hazelcast.Transactions.TransactionOptions.Timeout.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionOptions.Timeout.html",
    "title": "Timeout Property | Hazelcast .NET Documentation",
    "keywords": "Timeout Property Timeout Gets or sets the transaction timeout. Declaration public TimeSpan Timeout { get; set; } Property Value TimeSpan"
  },
  "dev/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html",
    "title": "TransactionOptions.TransactionType Enum | Hazelcast .NET Documentation",
    "keywords": "TransactionOptions.TransactionType Enum Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll public enum TransactionType Fields OnePhase Commits the transaction in one single final phase. TwoPhase Commits the transaction in two distinct phases. Extension Methods EnumExtensions.HasAll<TransactionOptions.TransactionType>(TransactionOptions.TransactionType) EnumExtensions.HasAny<TransactionOptions.TransactionType>(TransactionOptions.TransactionType)"
  },
  "dev/api/Hazelcast.Transactions.TransactionOptions.Type.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionOptions.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Gets or sets the type of the transaction. Declaration public TransactionOptions.TransactionType Type { get; set; } Property Value TransactionOptions.TransactionType"
  },
  "dev/api/Hazelcast.Transactions.TransactionState.html": {
    "href": "dev/api/Hazelcast.Transactions.TransactionState.html",
    "title": "TransactionState Enum | Hazelcast .NET Documentation",
    "keywords": "TransactionState Enum Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll public enum TransactionState Fields Active CommitFailed Committed Committing None Prepared Preparing RolledBack RollingBack Extension Methods EnumExtensions.HasAll<TransactionState>(TransactionState) EnumExtensions.HasAny<TransactionState>(TransactionState)"
  },
  "dev/api/index.html": {
    "href": "dev/api/index.html",
    "title": "API Reference | Hazelcast .NET Documentation",
    "keywords": "API Reference This section contains the full public API reference documentation, generated from source-code-level comments, and completed with DocFX additional content. Use the navigation to the left to browse namespaces and members. For extra details, including all code comments, browse the source code itself."
  },
  "dev/api/System.HashCode.Add.html": {
    "href": "dev/api/System.HashCode.Add.html",
    "title": "Add Method | Hazelcast .NET Documentation",
    "keywords": "Add Method Add<T>(T) Declaration public void Add<T>(T value) Parameters T value Type Parameters T Add<T>(T, IEqualityComparer<T>) Declaration public void Add<T>(T value, IEqualityComparer<T> comparer) Parameters T value IEqualityComparer <T> comparer Type Parameters T"
  },
  "dev/api/System.HashCode.Combine.html": {
    "href": "dev/api/System.HashCode.Combine.html",
    "title": "Combine Method | Hazelcast .NET Documentation",
    "keywords": "Combine Method Combine<T1>(T1) Declaration public static int Combine<T1>(T1 value1) Parameters T1 value1 Returns Int32 Type Parameters T1 Combine<T1, T2>(T1, T2) Declaration public static int Combine<T1, T2>(T1 value1, T2 value2) Parameters T1 value1 T2 value2 Returns Int32 Type Parameters T1 T2 Combine<T1, T2, T3>(T1, T2, T3) Declaration public static int Combine<T1, T2, T3>(T1 value1, T2 value2, T3 value3) Parameters T1 value1 T2 value2 T3 value3 Returns Int32 Type Parameters T1 T2 T3 Combine<T1, T2, T3, T4>(T1, T2, T3, T4) Declaration public static int Combine<T1, T2, T3, T4>(T1 value1, T2 value2, T3 value3, T4 value4) Parameters T1 value1 T2 value2 T3 value3 T4 value4 Returns Int32 Type Parameters T1 T2 T3 T4 Combine<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5) Declaration public static int Combine<T1, T2, T3, T4, T5>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5) Parameters T1 value1 T2 value2 T3 value3 T4 value4 T5 value5 Returns Int32 Type Parameters T1 T2 T3 T4 T5 Combine<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6) Declaration public static int Combine<T1, T2, T3, T4, T5, T6>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6) Parameters T1 value1 T2 value2 T3 value3 T4 value4 T5 value5 T6 value6 Returns Int32 Type Parameters T1 T2 T3 T4 T5 T6 Combine<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7) Declaration public static int Combine<T1, T2, T3, T4, T5, T6, T7>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7) Parameters T1 value1 T2 value2 T3 value3 T4 value4 T5 value5 T6 value6 T7 value7 Returns Int32 Type Parameters T1 T2 T3 T4 T5 T6 T7 Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8) Declaration public static int Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8) Parameters T1 value1 T2 value2 T3 value3 T4 value4 T5 value5 T6 value6 T7 value7 T8 value8 Returns Int32 Type Parameters T1 T2 T3 T4 T5 T6 T7 T8"
  },
  "dev/api/System.HashCode.html": {
    "href": "dev/api/System.HashCode.html",
    "title": "HashCode Struct | Hazelcast .NET Documentation",
    "keywords": "HashCode Struct Namespace: System Assembly: Hazelcast.Net.dll public struct HashCode Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.GetType() Object.ReferenceEquals(Object, Object) Methods Add<T>(T) Add<T>(T, IEqualityComparer<T>) Combine<T1>(T1) Combine<T1, T2>(T1, T2) Combine<T1, T2, T3>(T1, T2, T3) Combine<T1, T2, T3, T4>(T1, T2, T3, T4) Combine<T1, T2, T3, T4, T5>(T1, T2, T3, T4, T5) Combine<T1, T2, T3, T4, T5, T6>(T1, T2, T3, T4, T5, T6) Combine<T1, T2, T3, T4, T5, T6, T7>(T1, T2, T3, T4, T5, T6, T7) Combine<T1, T2, T3, T4, T5, T6, T7, T8>(T1, T2, T3, T4, T5, T6, T7, T8) RotateLeft(UInt32, Int32) Rotates the specified value left by the specified number of bits. Similar in behavior to the x86 instruction ROL. RotateLeft(UInt64, Int32) Rotates the specified value left by the specified number of bits. Similar in behavior to the x86 instruction ROL. ToHashCode()"
  },
  "dev/api/System.HashCode.RotateLeft.html": {
    "href": "dev/api/System.HashCode.RotateLeft.html",
    "title": "RotateLeft Method | Hazelcast .NET Documentation",
    "keywords": "RotateLeft Method RotateLeft(UInt32, Int32) Rotates the specified value left by the specified number of bits. Similar in behavior to the x86 instruction ROL. Declaration public static uint RotateLeft(uint value, int offset) Parameters UInt32 value The value to rotate. Int32 offset The number of bits to rotate by. Any value outside the range [0..31] is treated as congruent mod 32. Returns UInt32 The rotated value. RotateLeft(UInt64, Int32) Rotates the specified value left by the specified number of bits. Similar in behavior to the x86 instruction ROL. Declaration public static ulong RotateLeft(ulong value, int offset) Parameters UInt64 value The value to rotate. Int32 offset The number of bits to rotate by. Any value outside the range [0..63] is treated as congruent mod 64. Returns UInt64 The rotated value."
  },
  "dev/api/System.HashCode.ToHashCode.html": {
    "href": "dev/api/System.HashCode.ToHashCode.html",
    "title": "ToHashCode Method | Hazelcast .NET Documentation",
    "keywords": "ToHashCode Method ToHashCode() Declaration public int ToHashCode() Returns Int32"
  },
  "dev/api/System.html": {
    "href": "dev/api/System.html",
    "title": "System Namespace | Hazelcast .NET Documentation",
    "keywords": "System Namespace Structs HashCode"
  },
  "dev/doc/about.html": {
    "href": "dev/doc/about.html",
    "title": "About | Hazelcast .NET Documentation",
    "keywords": "About"
  },
  "dev/doc/configuration.html": {
    "href": "dev/doc/configuration.html",
    "title": "Configuration | Hazelcast .NET Documentation",
    "keywords": "Configuration Configuration follows the Microsoft.Extensions.Configuration patterns. The Hazelcast client configuration is represented by the HazelcastOptions class. When simply instantiated, this class contains the default options: var options = new HazelcastOptions(); For anything more realistic though, different approaches are available. Simple Environment In a simple, non-hosted environment without dependency injection, options need to be built using one of the Build methods. public class Program { public static void Main(string[] args) { var options = HazelcastOptions.Build(args); // ... use options ... } } This will determine the application environment ( <env> ) from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables (or, if not specified, default to Production ), and then gather configuration keys from the following ordered sources: appsettings.json file appsettings.<env>.json file Environment variables (using double-underscore separator, e.g. hazelcast__clientName ) Command line arguments (using colon separator, e.g. hazelcast:clientName ) hazelcast.json file hazelcast.<env>.json file Hazelcast-specific environment variables (using dot separator, e.g. hazelcast.clientName ) Hazelcast-specific command line arguments (using dot separator, e.g. hazelcast.clientName ) Optional in-memory key/values The Hazelcast-specific sources for environment variables and command line arguments only exist to support the non-standard dot separator, and complement the original sources. Overloads of the Build method support overriding the name and location of the hazelcast.json and hazelcast.<env>.json files, overriding the <env> environment name, and providing optional in-memory key/values. Every Hazelcast option can therefore be specified via the traditional .NET Core methods. For instance, specifying one cluster server address can be done via the following Json fragment in any of the Json files: { \"hazelcast\": { \"networking\": { \"addresses\": [ \"server:port\" ] } } } It can alternatively be specified by setting an environment variable (note that the dotted format may not be supported on every platform): hazelcast__networking__addresses__0=server:port hazelcast.networking.addresses.0=server:port It can alternatively be specified with command line arguments: $ myApp hazelcast:networking:addresses:0=server:port $ myApp hazelcast.networking.addresses.0=server:port All the .NET Core supported formats are supported (i.e. /arg value , /arg=value , -arg value , etc.). See the documentation for details. Finally, the method supports direct, in-memory key/values, where values can use either the dot or colon separator: var options = HazelcastOptions.Build(args, new[] { new KeyValuePair<string, string>(\"hazelcast.networking.addresses.0\", \"server:port\"), }); Container Environment In a container environment, one can rely on dependency injection to manage configuration. An IConfiguration must be created, in order to add Hazelcast to the services: var configuration = new ConfigurationBuilder() .AddDefaults(args) // add default configuration (appsettings.json, etc) .AddHazelcast(args) // add Hazelcast-specific configuration .Build(); var services = new ServiceCollection(); services.AddHazelcast(configuration); Configuration keys will be gathered from the same sources and in the same order as before, and options as well as the HazelcastClientFactory will be registered in the service container, and available via dependency injection. Also, the traditional Microsoft Dependency Injection patterns are supported: services.Configure<HazelcastOptions>(options => { options.Networking.Addresses.Add(\"server:port\"); }); Hosted Environment In a .NET Core hosted environment (see .NET Generic Host ), the host supplies the IConfiguration instance, and manages dependency injection. All that is needed is to tell the host how to handle the Hazelcast-specific configuration (e.g. hazelcast.json ), and to add Hazelcast to services. For example: Host.CreateDefaultBuilder(args) .ConfigureHostConfiguration(builder => { builder.AddHazelcast(args); }) .ConfigureServices((hostingContext, services) => { services.AddHazelcast(hostingContext.Configuration); }); Configuration keys will be gathered from the same sources and in the same order as before, and options as well as the HazelcastClientFactory will be registered in the service container, and available via dependency injection."
  },
  "dev/doc/contrib.html": {
    "href": "dev/doc/contrib.html",
    "title": "Contributing | Hazelcast .NET Documentation",
    "keywords": "Contributing The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This documentation also details how to obtain the source code, build the solution, interact with the community, and contribute."
  },
  "dev/doc/contrib-build.html": {
    "href": "dev/doc/contrib-build.html",
    "title": "Building | Hazelcast .NET Documentation",
    "keywords": "Building Building On Windows Requirements Although the solution builds in Visual Studio or Rider, a complete build requires Powershell, and Visual Studio 2019 or at least the Visual Studio Build Tools 2019, which you can download from the Visual Studio site. .NET Core is also required. You can download it from the Download .NET page. Recent 2.1 and 3.1 SDKs are required. You can verify whether .NET Core is installed, and which versions are supported, by running dotnet --info in a command window. Building For a complete build, start a Powershell console and build with: PS> ./hz.ps1 <options> <commands> See the build script section below for details and arguments. Building On Linux It is possible to build the Hazelcast .NET library on Linux, along with .NET Core App 2.1 and 3.1 tests and examples. It is not possible to build the .NET Framework 4.6.2 tests or examples, as .NET Framework is not supported on Linux. At the moment it is not possible to build the documentation on Linux, as DocFX does not run on .NET Core yet (see this issue for details). The upcoming v3 of DocFX will run on .NET Core. Requirements .NET Core must be installed (see .NET Core on Linux Debian for instructions for Debian). Recent 2.1 and 3.1 SDKs are required. In addition, a recent 2.2 runtime is required by dotCover to run test coverage. You can verify whether .NET Core is installed, and which versions are supported, by running dotnet --info in a command window. Powershell must be installed (see Installing Powershell Core on Linux for instructions). In order to run tests, Java is required. For Debian: apt-get update apt-get install openjdk-11-jre Building From a shell console, build with: $ ./hz.sh <options> <commands> See the build script section below for details and arguments. Build Script On Linux, hz.sh is just a proxy to hz.ps1 . The actual build is always performed by hz.ps1 , which is common to Windows and Linux. It accepts the following options: -enterprise test enterprise features -server <version> the server version to use for tests -framework <version> the framework version to build (default: all) -configuration <Release|Debug> the configuration to build (default: Release ) -version version to build (overrides src/Directory.Build.props ) -sign whether to sign the assemblies -testFilter <filter> filter for tests -test <test> filter for tests -cover whether to cover the tests -coverageFilter <filter> filter for tests coverage Server <version> must match a released Hazelcast IMDG server version, e.g. 4.0 or 4.1-SNAPSHOT . Server JARs are automatically downloaded for tests. Framework <version> must match a valid .NET target framework moniker, e.g. net462 or netcoreapp3.1 . Check the project files ( .csproj ) for supported versions. Build commands is a comma-separated list of values. Order is not important. Supported values are: clean cleans the solution (removes all bin, obj, and temporary directories) build builds the solution docs builds the documentation docsIf builds the documentation if the platform supports it docsServe serves the documentation site (alias: ds ) tests runs the tests cover when running the tests, also perform code coverage analysis nuget builds the NuGet package(s) nupush pushes the NuGet package(s) rc runs the remote controller for tests server runs the server for tests failedTests outputs extra details about failed tests (alias: ft ) When no target is specified, the script runs clean , build , docsIf and tests . For example, after a complete build, one can rebuild and serve the documentation with: PS> ./hz.ps1 docs,docsServe When the -enterprise option is set, in order to test the enterprise features, the HAZELCAST_ENTERPRISE_KEY environment variable must contain a valid Hazelcast Enterprise key. Alternatively, the key can be stored in the build/enterprise.key file. When the -sign option is set, in order to sign the assemblies, Hazelcast's private signing key must be available in the build/hazelcast.snk file. When the nupush command is executed, in order to push the packages to NuGet, the NUGET_API_KEY must contain Hazelcast's NuGet API key. SDK Selection The global.json file at the root of the project contains: { \"sdk\": { \"allowPrerelease\": false } } This ensures that any use of the dotnet command actuallys use the lastest stable release installed on the machine, and avoids any pre-release versions, as these may break the build. Should you want to experiment with pre-releases of the .NET SDK, change false to true (but do not commit the change!). For more details, see the Select the .NET Core version to use and global.json overview articles from Microsoft."
  },
  "dev/doc/contrib-faq.html": {
    "href": "dev/doc/contrib-faq.html",
    "title": "FAQ | Hazelcast .NET Documentation",
    "keywords": "FAQ Could we drop the Async suffix from all asynchronous methods? No. See this post on StackOverflow, or this issue on GitHub. Or this tweet by Nick Craver. We use the Async suffix whenever a function returns an async behavior (e.g. Task or ValueTask ) like .NET itself does. The reason for this being that it removes ambiguity and helps stop subtle bugs. For example, say a PR changes this: public string MyFunc() { ... } To this: public Task<string>MyFunc() { ... } If, elsewhere, someone uses the function: var result = MyFunc(); Console.WriteLine(result); ... that will still work. But instead of writing a string , it will write a Task . And it is hard to see it. Contrast that with changing to: public Task<string>MyFuncAsync() { ... } Now, the name change forced a name change at the call site, so the impact will show in a code review. It is a safer, unambiguous version of the change. Can we provide synchronous version of the asynchronous methods? No. Async-to-Sync such as client.StartAsync().Wait() can cause issues such as blocking, dead-locking, starving the ThreadPool etc. This is tricky, and there is no way we can provide a stable implementation of synchronous methods. We'd rather have them happen in user code."
  },
  "dev/doc/contrib-sources.html": {
    "href": "dev/doc/contrib-sources.html",
    "title": "Sources | Hazelcast .NET Documentation",
    "keywords": "Sources The source code for Hazelcast .NET is published on GitHub at Hazelcast .NET . Clone the repository to get the development branch: git clone https://github.com/hazelcast/hazelcast-csharp-client.git Development takes place in the master branch. The solution can be opened with Microsoft Visual Studio 2019 or JetBrain Rider . The code targets netstandard 2.0 and 2.1, and is using C# version 8.0. The main Hazelcast.Net project (which builds the library) is covered by Microsoft's Roslyn analyzers (installed via the Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package) which can detect and warn about many code issues. The whole solution is also regularly analyzed with the NDepend tool, which detects all sorts of anti-patterns (circular dependencies, naming inconsistencies...). Tests rely on the NUnit solution, and test coverage is provided by JetBrains dotCover . Benchmarks are powered by BenchmarkDotNet , documentation is built with Microsoft's DocFX tool. The client uses the Hazelcast Open Binary Client Protocol . The protocol repository is included in the client repository as a Git submodule in order to keep track of which exact version of the protocol was used to build the codec files in the client."
  },
  "dev/doc/distributedObjects.html": {
    "href": "dev/doc/distributedObjects.html",
    "title": "Distributed Objects | Hazelcast .NET Documentation",
    "keywords": "Distributed Objects Distributed objects are managed by an Hazelcast cluster, and accessed via the Hazelcast .NET client. Currently, the client supports the following distributed objects: HDictionary - a distributed key/value store corresponding to a cluster-side Map HList - a distributed list store corresponding to a cluster-side List (to be completed)"
  },
  "dev/doc/events.html": {
    "href": "dev/doc/events.html",
    "title": "Events | Hazelcast .NET Documentation",
    "keywords": "Events (to be completed)"
  },
  "dev/doc/gettingStarted.html": {
    "href": "dev/doc/gettingStarted.html",
    "title": "Getting Started | Hazelcast .NET Documentation",
    "keywords": "Getting Started Hazelcast client The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by the static HazelcastClientFactory . After it has been used, it needs to be disposed in order to properly release its resources. For example: var client = await HazelcastClientFactory.StartNewClientAsync(); // ... use the client ... await client.DisposeAsync(); A client is a heavy enough, multi-threaded object. Although a factory can create several, independent clients, it is recommended to store and reuse the client instance. It is not recommended to frequently create and dispose clients, as that could have an impact on performances. Here, the client is configured by default, which means by configuration files and environment variables. For more control, the client can be initialized with an HazelcastOptions instance, which represents the complete set of options of the Hazelcast client. In fact, the above example is equivalent to: var options = HazelcastOptions.Build(); var client = await HazelcastClientFactory.StartNewClientAsync(options); // ... Refer to the Configuration page for details on the various ways to build an HazelcastOptions instance, including handling command-line parameters, and to the HazelcastOptions reference for a list of all the configurable elements. Distributed Objects The client can be used to obtain distributed objects that are managed by the cluster. For instance, the cluster can manage IHDictionary<TKey, TValue> objects, which are an asynchronous equivalent of .NET IDictionary<TKey,TValue> . Each object is identified by a unique name, which is used to retrieve the object. Finally, distributed objects need to be disposed after usage, to ensure they release their resources. For example: var dict = await client.GetDictionaryAsync<string, string>(\"dict-name\"); await dict.AddOrUpdateAsync(\"key\", \"value\"); var value = await dict.GetAsync(\"key\"); await dict.DisposeAsync(); The GetDictionaryAsync method returns the existing object with the specified name, or creates a new object with that name on the cluster. That object will continue to live on the cluster after the IHDictionary<TKey, TValue> has been disposed. In order to remove the object from the cluster, one must destroy the object. For example: var dict = await client.GetDictionaryAsync<string, string>(\"dict-name\"); await dict.DestroyAsync(); or var dict = await client.GetDictionaryAsync<string, string>(\"dict-name\"); await client.DestroyAsync(dict); It is also possible to destroy objects with their name, and their corresponding service name : await client.DestroyAsync(HDictionary.ServiceName, \"dict-name\"); Transactions The client is responsible for creating transactions. For example: var transactionContext = await client.BeginTransactionAsync(); // ... do transaction work ... await transactionContext.CommitAsync(); await transactionContext.DisposeAsync(); Refer to the Transactions page for details. Events The client exposes client-level events. For example: var subscriptionId = await client.SubscribeAsync(events => events .ClientStateChanged((sender, args) => { Console.WriteLine($\"Client state changed to: {args.State}.\") }) ); // ... handle events ... var success = await client.UnsubscribeAsync(subscriptionId); The (sender, args) pattern is used to remain consistent with C# events. Here, sender is the object that triggered the event, i.e. client , and args contains the event data. Note: pure C# events ( client.StateChanged += ... ) cannot be used here, as subscribing, un-subscribing and handling events all need to support being asynchronous. Each distributed object also exposes events in the same way. For example: var subscriptionId = await dict.SubscribeAsync(events => events .EntryAdded((sender, args) => { // ... }) .EntryRemoved((sender, args) => { // ... }) ); // ... handle events ... var success = await dict.UnsubscribeAsync(subscriptionId); Refer to the Events page for details."
  },
  "dev/doc/index.html": {
    "href": "dev/doc/index.html",
    "title": "Documentation | Hazelcast .NET Documentation",
    "keywords": "Documentation This section contains the complete documentation for the Hazelcast .NET solution, with examples, guides and FAQ. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Hazelcast IMDG Reference Manual for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. This section also documents how to obtain the source code, build the solution, interact with the community, and contribute. It also documents the internals of the solution, which can be useful for contributors."
  },
  "dev/doc/kerberos.html": {
    "href": "dev/doc/kerberos.html",
    "title": "Kerberos | Hazelcast .NET Documentation",
    "keywords": "Kerberos The Hazelcast .NET client supports Kerberos as an authentication mechanism, on the Windows platform. Kerberos is not supported on other platforms at the moment. This can allow Windows client to transparently authenticate, with permissions being managed at Active Directory level. Kerberos support requires the Enterprise version of the server, release 4.1 or above. Client Configuration Kerberos support for Windows is provided in a separate Hazelcast.Net.Win32 NuGet package, which needs to be installed alongside the main Hazelcast.Net package. Kerberos authentication can be activated via the configuration file, or via code. In both cases, you will need to know the Service Principal Name (a.k.a. spn - \" hz/cluster1234 \" in the examples below) corresponding to the Hazelcast cluster. Configuration file: \"hazelcast\": { \"authentication\": { \"kerberos\": { \"spn\": \"hz/cluster1234\" } } } Code: var client = HazelcastClientFactory.CreateClient(options => { options.Authentication.ConfigureKerberosCredentials(\"hz/cluster1234\"); }); Server Configuration Until there is a 4.1 release, see this page for documentation."
  },
  "dev/doc/migratingFrom3.html": {
    "href": "dev/doc/migratingFrom3.html",
    "title": "Migrating from v3 | Hazelcast .NET Documentation",
    "keywords": "Migrating from v3 Version 4 of the Hazelcast .NET client has been massively refactored in order to benefit from the asynchronous features of the C# language. For instance, its low-level networking stack relies on Microsoft's System.IO.Pipelines library. This is the high-performance library that is used, for instance, to power the Kestrel web server. It is constantly improved, as it is the foundation of all high-performance networking in .NET Core 3.x (and the upcoming .NET Core 5.x). Threading has been greatly simplified and now entirely relies on the async/await pattern. In the current version of the code, all tasks run on the default task scheduler, and there is no limit on, for instance, the amount of concurrent tasks. All tasks run on the default .NET ThreadPool and the default Task scheduler. Depending on feedback, we could consider using custom Task schedulers and/or thread pools. The concepts however have not changed much. Configuration In previous versions, the Hazelcast .NET client used to rely on a custom configuration solution based upon an XML file. The Hazelcast .NET client now uses the configuration abstractions proposed by the Microsoft.Extensions.Configuration namespace. These abstractions provide built-in support for command-line arguments, environment variables, configuration files or in-memory configuration. For instance, they automatically support one configuration value being supplied via the configuration file, and/or a command-line argument, and/or an environment variable. They automatically parse configuration files into their strongly-typed (classes) counterpart. This also means that the same configuration mechanism can be used by the various libraries used in users' applications. The most important consequence for users is that the current XML configuration file is replaced with a very similar JSON file. Refer to the Configuration page for details on configuration. Logging In previous versions, the Hazelcast .NET client used to rely on a custom logging solution. The Hazelcast .NET client now uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. These abstractions come with a range of providers to log to the console, and other various destinations. In addition, a variety of third-party products (such as Serilog ) support complex logging patterns and more destinations (to the filesystem, the Cloud, etc). This also means that the same logging mechanism can be used by the various libraries used in users' applications. Locking TODO: move \"locking\" to its own page? Due to the systematic usage of async / await asynchronous patterns, the code for one operation can be executed by many different threads (basically, each time an operation is put on hold by an await, it can switch to another thread). Therefore, using the actual thread identifier as a \"lock owner\" for locking purpose is not possible. The \"lock owner\" is represented by an AsyncContext , a class which relies upon the .NET built-in AsyncLocal<T> type to maintain values that flow with the asynchronous operation, i.e. are transferred to the new thread when an operation resumes after awaiting. Therefore, when an operation acquires a lock, it owns the lock until it releases it, no matter what thread executes the operation. The AsyncContext uses a sequential number to ensure the uniqueness of the \"thread identifier\". In order to start a new, independent task (equivalent to starting a new thread in non async / await code), one need to explicitly start the code in a new context: // runs in the same context await DoSomethingAsync(...); // runs in a new context await TaskEx.RunWithNewContext(() => DoSomethingAsync(...)); Events (to be completed) Dependency Injection Dependency injection is becoming more and more common in large .NET applications. The Hazelcast .NET client includes support (via a separate assembly and NuGet package) for the dependency injection abstractions proposed by the Microsoft.Extensions.DependencyInjection namespace. This allows users to register Hazelcast objects in a dependency injection container."
  },
  "dev/doc/obtaining.html": {
    "href": "dev/doc/obtaining.html",
    "title": "Obtaining Hazelcast .NET | Hazelcast .NET Documentation",
    "keywords": "Obtaining Hazelcast .NET Hazelcast is composed of two parts: the server, and the client. Browse to Hazelcast IMDG to find out how to obtain and run the server part. Requirements The Hazelcast .NET client is distributed as a NuGet package which targets .NET Standard versions 2.0 and 2.1. It can therefore be used in any application targetting .NET versions that support these .NET Standard versions: .NET Framework 4.6.2 and above, on Windows .NET Core 2.1 and 3.1, on Windows, Linux and MacOS The upcoming .NET 5 version supports .NET Standard 2.1, and therefore should execute the Hazelcast .NET client without issues, but that is not supported yet. Getting the client The .NET client is distributed via NuGet as a package named Hazelcast.NET . It can be installed like any other NuGet package, either via the Visual Studio GUI, or via the package manager: PM> Install-Package Hazelcast.NET Or via the .NET CLI: > dotnet add package Hazelcast.NET Or manually added to the project as a package reference: <PackageReference Include=\"Hazelcast.NET\" Version=\"4.0.0\" />"
  },
  "dev/doc/quickStart.html": {
    "href": "dev/doc/quickStart.html",
    "title": "Quick Start | Hazelcast .NET Documentation",
    "keywords": "Quick Start Let's do a quick start!"
  },
  "doc-index.html": {
    "href": "doc-index.html",
    "title": "Documentation | Hazelcast .NET Documentation",
    "keywords": "Documentation This section contains the complete documentation for the Hazelcast .NET solution, with examples, guides and FAQ. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Hazelcast IMDG Reference Manual for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This section also documents how to obtain the source code, build the solution, interact with the community, and contribute. It also documents the internals of the solution, which can be useful for contributors. Documentation is available for the following versions: 4.0.0 development"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome! | Hazelcast .NET Documentation",
    "keywords": "Welcome! Hazelcast .NET brings the full power of the Hazelcast high-performance, in-memory computing platform to the Microsoft .NET ecosystem. The Hazelcast .NET Client allows you to elastically scale your .NET caches at high read speeds, to access all of Hazelcast data structures such as distributed maps, queues, topics and more. All, with enterprise level security through SSL and mutual authentication. This site provides a complete documentation with examples, guides and FAQs. It also provides a complete reference documentation for the public API, generated from source-code-level comments, and complemented with additional content. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This documentation also details how to obtain the source code, build the solution, interact with the community, and contribute. Oh, and a documentation documentation site is, usually, a never-ending work-in-progress. Documentation itself is open to contributions, too. Find anything that you think could be improved? Reach out to us!"
  }
}