{
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.BigIntegerSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.BigIntegerSum.html",
    "title": "BigIntegerSum Method | Hazelcast .NET Documentation",
    "keywords": "BigIntegerSum Method BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum() Returns IAggregator < BigInteger > The aggregator. BigIntegerSum(String) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Declaration public static IAggregator<BigInteger> BigIntegerSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < BigInteger > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.Count.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.Count.html",
    "title": "Count Method | Hazelcast .NET Documentation",
    "keywords": "Count Method Count() Counts input values (accepts nulls). Declaration public static IAggregator<long> Count() Returns IAggregator < Int64 > The aggregator. Count(String) Counts input values (accepts nulls). Declaration public static IAggregator<long> Count(string attributePath) Parameters String attributePath An attribute path. Returns IAggregator < Int64 > The aggregator. Remarks Values are extracted from the specified attributePath ."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.DoubleAvg.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.DoubleAvg.html",
    "title": "DoubleAvg Method | Hazelcast .NET Documentation",
    "keywords": "DoubleAvg Method DoubleAvg() Averages Double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg() Returns IAggregator < Double > The aggregator. DoubleAvg(String) Averages Double input values (does not accept nulls). Declaration public static IAggregator<double> DoubleAvg(string attributePath) Parameters String attributePath An attribute path. Returns IAggregator < Double > The aggregator. Remarks Values are extracted from the specified attributePath ."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.DoubleSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.DoubleSum.html",
    "title": "DoubleSum Method | Hazelcast .NET Documentation",
    "keywords": "DoubleSum Method DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum() Returns IAggregator < Double > The aggregator. DoubleSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. Declaration public static IAggregator<double> DoubleSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.FixedPointSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.FixedPointSum.html",
    "title": "FixedPointSum Method | Hazelcast .NET Documentation",
    "keywords": "FixedPointSum Method FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum() Returns IAggregator < Int64 > The aggregator. FixedPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<long> FixedPointSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.FloatingPointSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.FloatingPointSum.html",
    "title": "FloatingPointSum Method | Hazelcast .NET Documentation",
    "keywords": "FloatingPointSum Method FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum() Returns IAggregator < Double > The aggregator. FloatingPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> FloatingPointSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.html",
    "title": "Aggregators Class | Hazelcast .NET Documentation",
    "keywords": "Aggregators Class Namespace: Hazelcast.Aggregation Assembly: Hazelcast.Net.dll Creates IAggregator<TResult> instances. public static class Aggregators Inheritance Object Aggregators Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Min/Max/Average aggregators are type specific, so an IntegerAvg() aggregator expects all elements to be integers. There is no conversion executed while accumulating, so if there is any other type met an exception will be thrown. In order to operate on a generic Number type use the FixedPointSum(String) , FloatingPointSum(String) and NumberAvg(String) aggregators. All of them will convert the given number to either Long or Double during the accumulation phase. It will result in a lot of allocations since each number has to be converted, but it enables the user to operate on the whole family of numbers. It is especially useful if the numbers given to the aggregators may not be of one type only. The attributePath given in the factory method allows the aggregator to operate on the value extracted by navigating to the given attributePath on each object that has been returned from a query. The attribute path may be simple, e.g. \"name\", or nested \"address.city\". If an aggregator does not accept null values pass a predicate to the aggregate call that will filter them out. If the input value or the extracted value is a collection it won't be \"unfolded\" - so for example count aggregation on \"person.postalCodes\" will return 1 for each input object and not the size of the collection. In order to calculate the size of the collection use the [any] operator, e.g. \"person.postalCodes[any]\". Methods BigIntegerSum() An aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only BigInteger input values. BigIntegerSum(String) an aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only BigInteger input values. Count() Counts input values (accepts nulls). Count(String) Counts input values (accepts nulls). DoubleAvg() Averages Double input values (does not accept nulls). DoubleAvg(String) Averages Double input values (does not accept nulls). DoubleSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only double input values. DoubleSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only double input values. FixedPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FixedPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. FloatingPointSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts float or double input values. FloatingPointSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts float or double input values. IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values IntegerAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. IntegerSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values LongAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. LongSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Max<TResult>(String) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Min<TResult>(String) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. NumberAvg(String) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.IntegerAvg.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.IntegerAvg.html",
    "title": "IntegerAvg Method | Hazelcast .NET Documentation",
    "keywords": "IntegerAvg Method IntegerAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg() Returns IAggregator < Double > The aggregator. IntegerAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values Declaration public static IAggregator<double> IntegerAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.IntegerSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.IntegerSum.html",
    "title": "IntegerSum Method | Hazelcast .NET Documentation",
    "keywords": "IntegerSum Method IntegerSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum() Returns IAggregator < Int64 > The aggregator. IntegerSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only int input values. Declaration public static IAggregator<long> IntegerSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.LongAvg.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.LongAvg.html",
    "title": "LongAvg Method | Hazelcast .NET Documentation",
    "keywords": "LongAvg Method LongAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts only long input values Declaration public static IAggregator<double> LongAvg() Returns IAggregator < Double > The aggregator. LongAvg(String) an aggregator that calculates the average of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values Declaration public static IAggregator<double> LongAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.LongSum.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.LongSum.html",
    "title": "LongSum Method | Hazelcast .NET Documentation",
    "keywords": "LongSum Method LongSum() an aggregator that calculates the sum of the input values. Does NOT accept null input values. Accepts only long input values. Declaration public static IAggregator<long> LongSum() Returns IAggregator < Int64 > The aggregator. LongSum(String) An aggregator that calculates the sum of the input values extracted from the given attributePath. Does NOT accept null input values nor null extracted values. Accepts only long input values. Declaration public static IAggregator<long> LongSum(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Int64 > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.Max.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.Max.html",
    "title": "Max Method | Hazelcast .NET Documentation",
    "keywords": "Max Method Max<TResult>() an aggregator that calculates the max of the input values. Accepts null input values Declaration public static IAggregator<TResult> Max<TResult>() Returns IAggregator <TResult> The aggregator. Type Parameters TResult Max<TResult>(String) an aggregator that calculates the max of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Max<TResult>(string attributePath) Parameters String attributePath attribute Path Returns IAggregator <TResult> The aggregator. Type Parameters TResult"
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.Min.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.Min.html",
    "title": "Min Method | Hazelcast .NET Documentation",
    "keywords": "Min Method Min<TResult>() an aggregator that calculates the min of the input values. Accepts null input values Declaration public static IAggregator<TResult> Min<TResult>() Returns IAggregator <TResult> The aggregator. Type Parameters TResult Min<TResult>(String) an aggregator that calculates the min of the input values extracted from the given attributePath. Accepts null input values and null extracted values. Declaration public static IAggregator<TResult> Min<TResult>(string attributePath) Parameters String attributePath attribute Path Returns IAggregator <TResult> The aggregator. Type Parameters TResult"
  },
  "4.1.0/api/Hazelcast.Aggregation.Aggregators.NumberAvg.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.Aggregators.NumberAvg.html",
    "title": "NumberAvg Method | Hazelcast .NET Documentation",
    "keywords": "NumberAvg Method NumberAvg() an aggregator that calculates the average of the input values. Does NOT accept null input values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg() Returns IAggregator < Double > The aggregator. NumberAvg(String) an aggregator that calculates the average of the input values. Does NOT accept null input values nor null extracted values. Accepts float or double input values. Declaration public static IAggregator<double> NumberAvg(string attributePath) Parameters String attributePath attribute Path Returns IAggregator < Double > The aggregator."
  },
  "4.1.0/api/Hazelcast.Aggregation.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.html",
    "title": "Hazelcast.Aggregation Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Aggregation Namespace Classes Aggregators Creates IAggregator<TResult> instances. Interfaces IAggregator<TResult> Defines an aggregator that can transform an object into other objects."
  },
  "4.1.0/api/Hazelcast.Aggregation.IAggregator-1.AttributePath.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.IAggregator-1.AttributePath.html",
    "title": "AttributePath Property | Hazelcast .NET Documentation",
    "keywords": "AttributePath Property AttributePath Gets the attribute path. Declaration string AttributePath { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Aggregation.IAggregator-1.html": {
    "href": "4.1.0/api/Hazelcast.Aggregation.IAggregator-1.html",
    "title": "IAggregator<TResult> Interface | Hazelcast .NET Documentation",
    "keywords": "IAggregator<TResult> Interface Namespace: Hazelcast.Aggregation Assembly: Hazelcast.Net.dll Defines an aggregator that can transform an object into other objects. public interface IAggregator<TResult> Type Parameters TResult The aggregated result type. Properties AttributePath Gets the attribute path."
  },
  "4.1.0/api/Hazelcast.ClientState.html": {
    "href": "4.1.0/api/Hazelcast.ClientState.html",
    "title": "ClientState Enum | Hazelcast .NET Documentation",
    "keywords": "ClientState Enum Namespace: Hazelcast Assembly: Hazelcast.Net.dll Defines the possible states of the client. public enum ClientState Fields Connected The client is connected. Disconnected The client has been disconnected. Shutdown The client has shut down. ShuttingDown The client is shutting down. Started The client has started, and is now trying to connect to a first member. Starting The client is starting."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureCredentials.html",
    "title": "ConfigureCredentials Method | Hazelcast .NET Documentation",
    "keywords": "ConfigureCredentials Method ConfigureCredentials(ICredentials) Configures static credentials as the authentication mechanism. Declaration public AuthenticationOptions ConfigureCredentials(ICredentials credentials) Parameters ICredentials credentials Credentials. Returns AuthenticationOptions The security options."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureKerberosCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureKerberosCredentials.html",
    "title": "ConfigureKerberosCredentials Method | Hazelcast .NET Documentation",
    "keywords": "ConfigureKerberosCredentials Method ConfigureKerberosCredentials(String) Configures Kerberos as the authentication mechanism. Declaration public AuthenticationOptions ConfigureKerberosCredentials(string spn) Parameters String spn The service principal name of the Hazelcast cluster. Returns AuthenticationOptions The authentication options."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureTokenCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureTokenCredentials.html",
    "title": "ConfigureTokenCredentials Method | Hazelcast .NET Documentation",
    "keywords": "ConfigureTokenCredentials Method ConfigureTokenCredentials(Byte[]) Configures a static token as the authentication mechanism. Declaration public AuthenticationOptions ConfigureTokenCredentials(byte[] token) Parameters Byte [] token A token. Returns AuthenticationOptions The security configuration."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureUsernamePasswordCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.ConfigureUsernamePasswordCredentials.html",
    "title": "ConfigureUsernamePasswordCredentials Method | Hazelcast .NET Documentation",
    "keywords": "ConfigureUsernamePasswordCredentials Method ConfigureUsernamePasswordCredentials(String, String) Configures a user name and password as the authentication mechanism. Declaration public AuthenticationOptions ConfigureUsernamePasswordCredentials(string username, string password) Parameters String username Username. String password Password. Returns AuthenticationOptions The security options."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.CredentialsFactory.html",
    "title": "CredentialsFactory Property | Hazelcast .NET Documentation",
    "keywords": "CredentialsFactory Property CredentialsFactory Gets the SingletonServiceFactory<TService> for the ICredentialsFactory . Declaration public SingletonServiceFactory<ICredentialsFactory> CredentialsFactory { get; } Property Value SingletonServiceFactory < ICredentialsFactory > Remarks When set in the configuration file, it is defined as an injected type, for instance: \"credentialsFactory\": { \"typeName\": \"My.CredentialsFactory\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition, shortcuts exists for common credentials factory. The whole credentialsFactory block can be omitted and replace by one of the following: Username and password: \"username-password\": { \"username\": \"someone\", \"password\": \"secret\" } Kerberos: \"kerberos\": { \"spn\": \"service-provider-name\" } Token: \"token\": { \"data\": \"some-secret-token\", \"encoding\": \"none\" } Supported encodings are: none and base64 ."
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.-ctor.html",
    "title": "AuthenticationOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "AuthenticationOptions Constructor AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Declaration public AuthenticationOptions()"
  },
  "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.AuthenticationOptions.html",
    "title": "AuthenticationOptions Class | Hazelcast .NET Documentation",
    "keywords": "AuthenticationOptions Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents authentication options. public class AuthenticationOptions Inheritance Object AuthenticationOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors AuthenticationOptions() Initializes a new instance of the AuthenticationOptions class. Properties CredentialsFactory Gets the SingletonServiceFactory<TService> for the ICredentialsFactory . Methods ConfigureCredentials(ICredentials) Configures static credentials as the authentication mechanism. ConfigureKerberosCredentials(String) Configures Kerberos as the authentication mechanism. ConfigureTokenCredentials(Byte[]) Configures a static token as the authentication mechanism. ConfigureUsernamePasswordCredentials(String, String) Configures a user name and password as the authentication mechanism."
  },
  "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.-ctor.html",
    "title": "HeartbeatOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "HeartbeatOptions Constructor HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Declaration public HeartbeatOptions()"
  },
  "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.html",
    "title": "HeartbeatOptions Class | Hazelcast .NET Documentation",
    "keywords": "HeartbeatOptions Class Namespace: Hazelcast.Clustering Assembly: Hazelcast.Net.dll Represents the heartbeat options public class HeartbeatOptions Inheritance Object HeartbeatOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors HeartbeatOptions() Initializes a new instance of the HeartbeatOptions class. Properties PeriodMilliseconds Gets or sets the heartbeat period. TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down)."
  },
  "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.PeriodMilliseconds.html",
    "title": "PeriodMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "PeriodMilliseconds Property PeriodMilliseconds Gets or sets the heartbeat period. Declaration public int PeriodMilliseconds { get; set; } Property Value Int32 Remarks Heartbeat will run periodically, and send a ping request to connections that have not been written to over the previous period."
  },
  "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.HeartbeatOptions.TimeoutMilliseconds.html",
    "title": "TimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "TimeoutMilliseconds Property TimeoutMilliseconds Gets or sets the timeout (how long to wait before declaring a connection down). Declaration public int TimeoutMilliseconds { get; set; } Property Value Int32 Remarks Heartbeat will consider that connections that have not received data for the timeout duration, although they should have been pinged, are down. The timeout should be longer than the period."
  },
  "4.1.0/api/Hazelcast.Clustering.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.html",
    "title": "Hazelcast.Clustering Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Clustering Namespace Classes AuthenticationOptions Represents authentication options. HeartbeatOptions Represents the heartbeat options"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.html",
    "title": "Hazelcast.Clustering.LoadBalancing Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Clustering.LoadBalancing Namespace Classes LoadBalancerBase Provides a base class for load balancers. RandomLoadBalancer Represents a random load balancer. RoundRobinLoadBalancer Represents a round-robin load balancer. StaticLoadBalancer Represents a static load balancer. Interfaces ILoadBalancer Defines a service that can load-balance requests to different members of a cluster."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration int Count { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration Guid GetMember() Returns Guid The unique identifier of the selected member, if any; otherwise Guid.Empty ."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.html",
    "title": "ILoadBalancer Interface | Hazelcast .NET Documentation",
    "keywords": "ILoadBalancer Interface Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Defines a service that can load-balance requests to different members of a cluster. public interface ILoadBalancer Properties Count Gets the number of members. Methods GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.SetMembers.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.ILoadBalancer.SetMembers.html",
    "title": "SetMembers Method | Hazelcast .NET Documentation",
    "keywords": "SetMembers Method SetMembers(IEnumerable<Guid>) Sets the members. Declaration void SetMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Remarks The set of members that fully replaces the existing members."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration public virtual int Count { get; } Property Value Int32 Implements ILoadBalancer.Count"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public abstract Guid GetMember() Returns Guid The unique identifier of the selected member, if any; otherwise Guid.Empty . Implements ILoadBalancer.GetMember()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.html",
    "title": "LoadBalancerBase Class | Hazelcast .NET Documentation",
    "keywords": "LoadBalancerBase Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Provides a base class for load balancers. public abstract class LoadBalancerBase : ILoadBalancer Inheritance Object LoadBalancerBase RandomLoadBalancer RoundRobinLoadBalancer StaticLoadBalancer Implements ILoadBalancer Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Count Gets the number of members. Members Gets the members. Methods GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.Members.html",
    "title": "Members Property | Hazelcast .NET Documentation",
    "keywords": "Members Property Members Gets the members. Declaration protected List<Guid> Members { get; } Property Value List < Guid >"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.SetMembers.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.LoadBalancerBase.SetMembers.html",
    "title": "SetMembers Method | Hazelcast .NET Documentation",
    "keywords": "SetMembers Method SetMembers(IEnumerable<Guid>) Sets the members. Declaration public virtual void SetMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Implements ILoadBalancer.SetMembers(IEnumerable<Guid>) Remarks The set of members that fully replaces the existing members."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.-ctor.html",
    "title": "RandomLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "RandomLoadBalancer Constructor RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Declaration public RandomLoadBalancer()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member, if any; otherwise Guid.Empty . Overrides LoadBalancerBase.GetMember()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RandomLoadBalancer.html",
    "title": "RandomLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "RandomLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a random load balancer. public class RandomLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase RandomLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.SetMembers(IEnumerable<Guid>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A random load balancer returns random members. Constructors RandomLoadBalancer() Initializes a new instance of the RandomLoadBalancer class. Methods GetMember() Selects a member."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.-ctor.html",
    "title": "RoundRobinLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "RoundRobinLoadBalancer Constructor RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Declaration public RoundRobinLoadBalancer()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member, if any; otherwise Guid.Empty . Overrides LoadBalancerBase.GetMember()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.RoundRobinLoadBalancer.html",
    "title": "RoundRobinLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "RoundRobinLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a round-robin load balancer. public class RoundRobinLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase RoundRobinLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members LoadBalancerBase.Count LoadBalancerBase.SetMembers(IEnumerable<Guid>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A round-robin load balancer returns members one after another. Constructors RoundRobinLoadBalancer() Initializes a new instance of the RoundRobinLoadBalancer class. Methods GetMember() Selects a member."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.Count.html",
    "title": "Count Property | Hazelcast .NET Documentation",
    "keywords": "Count Property Count Gets the number of members. Declaration public override int Count { get; } Property Value Int32 Overrides LoadBalancerBase.Count"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.-ctor.html",
    "title": "StaticLoadBalancer Constructor | Hazelcast .NET Documentation",
    "keywords": "StaticLoadBalancer Constructor StaticLoadBalancer(IReadOnlyDictionary<String, String>) Initializes a new instance of the RandomLoadBalancer class. Declaration public StaticLoadBalancer(IReadOnlyDictionary<string, string> args) Parameters IReadOnlyDictionary < String , String > args Arguments. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Declaration public StaticLoadBalancer(Guid memberId) Parameters Guid memberId The member identifier."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.GetMember.html",
    "title": "GetMember Method | Hazelcast .NET Documentation",
    "keywords": "GetMember Method GetMember() Selects a member. Declaration public override Guid GetMember() Returns Guid The unique identifier of the selected member, if any; otherwise Guid.Empty . Overrides LoadBalancerBase.GetMember()"
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.html",
    "title": "StaticLoadBalancer Class | Hazelcast .NET Documentation",
    "keywords": "StaticLoadBalancer Class Namespace: Hazelcast.Clustering.LoadBalancing Assembly: Hazelcast.Net.dll Represents a static load balancer. public class StaticLoadBalancer : LoadBalancerBase, ILoadBalancer Inheritance Object LoadBalancerBase StaticLoadBalancer Implements ILoadBalancer Inherited Members LoadBalancerBase.Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks A static load balancer knows only one member and always return that member. Constructors StaticLoadBalancer(IReadOnlyDictionary<String, String>) Initializes a new instance of the RandomLoadBalancer class. StaticLoadBalancer(Guid) Initializes a new instance of the StaticLoadBalancer class. Properties Count Gets the number of members. Methods GetMember() Selects a member. SetMembers(IEnumerable<Guid>) Sets the members."
  },
  "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.SetMembers.html": {
    "href": "4.1.0/api/Hazelcast.Clustering.LoadBalancing.StaticLoadBalancer.SetMembers.html",
    "title": "SetMembers Method | Hazelcast .NET Documentation",
    "keywords": "SetMembers Method SetMembers(IEnumerable<Guid>) Sets the members. Declaration public override void SetMembers(IEnumerable<Guid> memberIds) Parameters IEnumerable < Guid > memberIds The identifiers of the members. Overrides LoadBalancerBase.SetMembers(IEnumerable<Guid>) Remarks The set of members that fully replaces the existing members."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddDefaults.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddDefaults.html",
    "title": "AddDefaults Method | Hazelcast .NET Documentation",
    "keywords": "AddDefaults Method AddDefaults(IConfigurationBuilder, String[], String) Adds the default IConfigurationProvider instances. Declaration public static IConfigurationBuilder AddDefaults(this IConfigurationBuilder configurationBuilder, string[] args, string environmentName = null) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args The command line args. String environmentName An optional environment name. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for appsettings.json, environment variables and command line arguments. This is only useful in non-hosted environments where a configuration builder is created from scratch. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production ."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcast.html",
    "title": "AddHazelcast Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcast Method AddHazelcast(IConfigurationBuilder, String[], IEnumerable<KeyValuePair<String, String>>, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration values from various sources. Declaration public static IConfigurationBuilder AddHazelcast(this IConfigurationBuilder configurationBuilder, string[] args, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args The command line args. IEnumerable < KeyValuePair < String , String >> keyValues The optional key-value configuration pairs. String optionsFilePath The optional path to the options file. String optionsFileName String environmentName An optional environment name. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for hazelcast-specific sources. Does not add default support for other sources. If environmentName is missing, the environment name is determined using the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT environment variables. If not specified, the environment name is Production ."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastCommandLine.html",
    "title": "AddHazelcastCommandLine Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastCommandLine Method AddHazelcastCommandLine(IConfigurationBuilder, String[]) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. Declaration public static IConfigurationBuilder AddHazelcastCommandLine(this IConfigurationBuilder configurationBuilder, string[] args) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String [] args Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for hazelcast.x.y arguments that do not respect the standard hazelcast:x:y pattern. Does not add default support for command line arguments."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastEnvironmentVariables.html",
    "title": "AddHazelcastEnvironmentVariables Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastEnvironmentVariables Method AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. Declaration public static IConfigurationBuilder AddHazelcastEnvironmentVariables(this IConfigurationBuilder configurationBuilder) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. Returns IConfigurationBuilder The IConfigurationBuilder . Remarks Adds support for the hazelcast.x.y variables that do not respect the standard hazelcast__x__y pattern. Does not add default support for environment variables."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastFile.html",
    "title": "AddHazelcastFile Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastFile Method AddHazelcastFile(IConfigurationBuilder, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration value from a file. Declaration public static IConfigurationBuilder AddHazelcastFile(this IConfigurationBuilder configurationBuilder, string filePath, string fileName, string environmentName) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. String filePath The path to the file. String fileName The name of the file. String environmentName Returns IConfigurationBuilder The IConfigurationBuilder ."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.AddHazelcastInMemoryCollection.html",
    "title": "AddHazelcastInMemoryCollection Method | Hazelcast .NET Documentation",
    "keywords": "AddHazelcastInMemoryCollection Method AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<String, String>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection. Declaration public static IConfigurationBuilder AddHazelcastInMemoryCollection(this IConfigurationBuilder configurationBuilder, IEnumerable<KeyValuePair<string, string>> initialData) Parameters IConfigurationBuilder configurationBuilder The IConfigurationBuilder to add to. IEnumerable < KeyValuePair < String , String >> initialData Returns IConfigurationBuilder The IConfigurationBuilder ."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationBuilderExtensions.html",
    "title": "ConfigurationBuilderExtensions Class | Hazelcast .NET Documentation",
    "keywords": "ConfigurationBuilderExtensions Class Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Provides extension methods for the IConfigurationBuilder interface. public static class ConfigurationBuilderExtensions Inheritance Object ConfigurationBuilderExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods AddDefaults(IConfigurationBuilder, String[], String) Adds the default IConfigurationProvider instances. AddHazelcast(IConfigurationBuilder, String[], IEnumerable<KeyValuePair<String, String>>, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration values from various sources. AddHazelcastCommandLine(IConfigurationBuilder, String[]) Adds an IConfigurationProvider that reads Hazelcast configuration values from the command line. AddHazelcastEnvironmentVariables(IConfigurationBuilder) Adds an IConfigurationProvider that reads Hazelcast configuration values from environment variables. AddHazelcastFile(IConfigurationBuilder, String, String, String) Adds an IConfigurationProvider that reads Hazelcast configuration value from a file. AddHazelcastInMemoryCollection(IConfigurationBuilder, IEnumerable<KeyValuePair<String, String>>) Adds an IConfigurationProvider that reads Hazelcast configuration values from an in-memory collection."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationException.-ctor.html",
    "title": "ConfigurationException Constructor | Hazelcast .NET Documentation",
    "keywords": "ConfigurationException Constructor ConfigurationException() Initializes a new instance of the ConfigurationException class. Declaration public ConfigurationException() ConfigurationException(String) Initializes a new instance of the ConfigurationException class with a specified error message. Declaration public ConfigurationException(string message) Parameters String message The message that describes the error. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConfigurationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Configuration.ConfigurationException.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.ConfigurationException.html",
    "title": "ConfigurationException Class | Hazelcast .NET Documentation",
    "keywords": "ConfigurationException Class Namespace: Hazelcast.Configuration Assembly: Hazelcast.Net.dll Represents the exception that is throw when the Hazelcast configuration is incorrect. [Serializable] public sealed class ConfigurationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ConfigurationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ConfigurationException() Initializes a new instance of the ConfigurationException class. ConfigurationException(Exception) Initializes a new instance of the ConfigurationException class with a reference to the inner exception that is the cause of this exception. ConfigurationException(String) Initializes a new instance of the ConfigurationException class with a specified error message. ConfigurationException(String, Exception) Initializes a new instance of the ConfigurationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Configuration.html": {
    "href": "4.1.0/api/Hazelcast.Configuration.html",
    "title": "Hazelcast.Configuration Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Configuration Namespace Classes ConfigurationBuilderExtensions Provides extension methods for the IConfigurationBuilder interface. ConfigurationException Represents the exception that is throw when the Hazelcast configuration is incorrect."
  },
  "4.1.0/api/Hazelcast.Core.AsyncContext.Current.html": {
    "href": "4.1.0/api/Hazelcast.Core.AsyncContext.Current.html",
    "title": "Current Property | Hazelcast .NET Documentation",
    "keywords": "Current Property Current Gets the current context. Declaration public static AsyncContext Current { get; } Property Value AsyncContext"
  },
  "4.1.0/api/Hazelcast.Core.AsyncContext.html": {
    "href": "4.1.0/api/Hazelcast.Core.AsyncContext.html",
    "title": "AsyncContext Class | Hazelcast .NET Documentation",
    "keywords": "AsyncContext Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. public sealed class AsyncContext Inheritance Object AsyncContext Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Current Gets the current context. Id Gets the unique identifier for the current context. Methods New() Replaces the current context with a new context."
  },
  "4.1.0/api/Hazelcast.Core.AsyncContext.Id.html": {
    "href": "4.1.0/api/Hazelcast.Core.AsyncContext.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the unique identifier for the current context. Declaration public long Id { get; } Property Value Int64"
  },
  "4.1.0/api/Hazelcast.Core.AsyncContext.New.html": {
    "href": "4.1.0/api/Hazelcast.Core.AsyncContext.New.html",
    "title": "New Method | Hazelcast .NET Documentation",
    "keywords": "New Method New() Replaces the current context with a new context. Declaration public static IDisposable New() Returns IDisposable An IDisposable object which will restore the replaced context when disposed."
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.ClusterConnectionTimeoutMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.ClusterConnectionTimeoutMilliseconds.html",
    "title": "ClusterConnectionTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "ClusterConnectionTimeoutMilliseconds Property ClusterConnectionTimeoutMilliseconds Gets or sets the timeout in milliseconds. Declaration public long ClusterConnectionTimeoutMilliseconds { get; set; } Property Value Int64"
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.-ctor.html",
    "title": "ConnectionRetryOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "ConnectionRetryOptions Constructor ConnectionRetryOptions() Initializes a new instance of the ConnectionRetryOptions class. Declaration public ConnectionRetryOptions()"
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.html",
    "title": "ConnectionRetryOptions Class | Hazelcast .NET Documentation",
    "keywords": "ConnectionRetryOptions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the configuration for the retry strategy. public class ConnectionRetryOptions Inheritance Object ConnectionRetryOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors ConnectionRetryOptions() Initializes a new instance of the ConnectionRetryOptions class. Properties ClusterConnectionTimeoutMilliseconds Gets or sets the timeout in milliseconds. InitialBackoffMilliseconds Gets or sets the initial back-off time in milliseconds. Jitter Gets or sets the jitter. MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Multiplier Gets or sets the multiplier."
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.InitialBackoffMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.InitialBackoffMilliseconds.html",
    "title": "InitialBackoffMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "InitialBackoffMilliseconds Property InitialBackoffMilliseconds Gets or sets the initial back-off time in milliseconds. Declaration public int InitialBackoffMilliseconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.Jitter.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.Jitter.html",
    "title": "Jitter Property | Hazelcast .NET Documentation",
    "keywords": "Jitter Property Jitter Gets or sets the jitter. Declaration public double Jitter { get; set; } Property Value Double"
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.MaxBackoffMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.MaxBackoffMilliseconds.html",
    "title": "MaxBackoffMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "MaxBackoffMilliseconds Property MaxBackoffMilliseconds Gets or sets the maximum back-off time in milliseconds. Declaration public int MaxBackoffMilliseconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.Multiplier.html": {
    "href": "4.1.0/api/Hazelcast.Core.ConnectionRetryOptions.Multiplier.html",
    "title": "Multiplier Property | Hazelcast .NET Documentation",
    "keywords": "Multiplier Property Multiplier Gets or sets the multiplier. Declaration public double Multiplier { get; set; } Property Value Double"
  },
  "4.1.0/api/Hazelcast.Core.Endianness.html": {
    "href": "4.1.0/api/Hazelcast.Core.Endianness.html",
    "title": "Endianness Enum | Hazelcast .NET Documentation",
    "keywords": "Endianness Enum Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents the order of the bytes within a binary representation of a number. public enum Endianness Fields BigEndian Big-endian. LittleEndian Little-endian. Extension Methods EndiannessExtensions.IsBigEndian() EndiannessExtensions.IsLittleEndian()"
  },
  "4.1.0/api/Hazelcast.Core.EndiannessExtensions.html": {
    "href": "4.1.0/api/Hazelcast.Core.EndiannessExtensions.html",
    "title": "EndiannessExtensions Class | Hazelcast .NET Documentation",
    "keywords": "EndiannessExtensions Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides extension methods to the Endianness enumeration. public static class EndiannessExtensions Inheritance Object EndiannessExtensions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Methods IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'."
  },
  "4.1.0/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html": {
    "href": "4.1.0/api/Hazelcast.Core.EndiannessExtensions.IsBigEndian.html",
    "title": "IsBigEndian Method | Hazelcast .NET Documentation",
    "keywords": "IsBigEndian Method IsBigEndian(Endianness) Determines whether this endianness is 'big-endian'. Declaration public static bool IsBigEndian(this Endianness endianness) Parameters Endianness endianness The endianness. Returns Boolean true if this endianness is 'big-endian'; otherwise false."
  },
  "4.1.0/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html": {
    "href": "4.1.0/api/Hazelcast.Core.EndiannessExtensions.IsLittleEndian.html",
    "title": "IsLittleEndian Method | Hazelcast .NET Documentation",
    "keywords": "IsLittleEndian Method IsLittleEndian(Endianness) Determines whether this endianness is 'little-endian'. Declaration public static bool IsLittleEndian(this Endianness endianness) Parameters Endianness endianness The endianness. Returns Boolean true if this endianness is 'little-endian'; otherwise false."
  },
  "4.1.0/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html": {
    "href": "4.1.0/api/Hazelcast.Core.EndiannessExtensions.NativeEndianness.html",
    "title": "NativeEndianness Property | Hazelcast .NET Documentation",
    "keywords": "NativeEndianness Property NativeEndianness Gets the native endianness of the computer architecture where the code is executing. Declaration public static Endianness NativeEndianness { get; } Property Value Endianness"
  },
  "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.Add.html": {
    "href": "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.Add.html",
    "title": "Add Method | Hazelcast .NET Documentation",
    "keywords": "Add Method Add(TEventHandler) Adds a handler. Declaration protected void Add(TEventHandler handler) Parameters TEventHandler handler The handler."
  },
  "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html": {
    "href": "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.GetEnumerator.html",
    "title": "GetEnumerator Method | Hazelcast .NET Documentation",
    "keywords": "GetEnumerator Method GetEnumerator() Declaration public IEnumerator<TEventHandler> GetEnumerator() Returns IEnumerator <TEventHandler> Implements IEnumerable<T>.GetEnumerator()"
  },
  "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.html": {
    "href": "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.html",
    "title": "EventHandlersBase<TEventHandler> Class | Hazelcast .NET Documentation",
    "keywords": "EventHandlersBase<TEventHandler> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides a base class for classes containing event handlers. public abstract class EventHandlersBase<TEventHandler> : IEnumerable<TEventHandler>, IEnumerable Inheritance Object EventHandlersBase<TEventHandler> CollectionItemEventHandlers<T> MapEventHandlers<TKey, TValue> MultiMapEventHandlers<TKey, TValue> ReplicatedMapEventHandlers<TKey, TValue> TopicEventHandlers<T> HazelcastClientEventHandlers Implements IEnumerable <TEventHandler> IEnumerable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TEventHandler The type of the event handlers. Methods Add(TEventHandler) Adds a handler. GetEnumerator() Remove(TEventHandler) Removes a handler. Explicit Interface Implementations IEnumerable.GetEnumerator()"
  },
  "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.Remove.html": {
    "href": "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.Remove.html",
    "title": "Remove Method | Hazelcast .NET Documentation",
    "keywords": "Remove Method Remove(TEventHandler) Removes a handler. Declaration public void Remove(TEventHandler handler) Parameters TEventHandler handler The handler to remove."
  },
  "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.System-Collections-IEnumerable-GetEnumerator.html": {
    "href": "4.1.0/api/Hazelcast.Core.EventHandlersBase-1.System-Collections-IEnumerable-GetEnumerator.html",
    "title": "IEnumerable.GetEnumerator Method | Hazelcast .NET Documentation",
    "keywords": "IEnumerable.GetEnumerator Method IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns IEnumerator Implements IEnumerable.GetEnumerator()"
  },
  "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.-ctor.html",
    "title": "HazelcastJsonValue Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastJsonValue Constructor HazelcastJsonValue(String) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Declaration public HazelcastJsonValue(string json) Parameters String json The string containing JSON."
  },
  "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.Equals.html": {
    "href": "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object)"
  },
  "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html": {
    "href": "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.html": {
    "href": "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.html",
    "title": "HazelcastJsonValue Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastJsonValue Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a JSON formatted string. public sealed class HazelcastJsonValue Inheritance Object HazelcastJsonValue Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Remarks It is preferred to store HazelcastJsonValue instead of String for JSON formatted strings. Users can then run predicates and aggregations and use indexes on the attributes of the underlying JSON content. Note that the string is not validated and may be invalid JSON. Constructors HazelcastJsonValue(String) Initializes a new instance of the HazelcastJsonValue with a string containing JSON. Methods Equals(Object) GetHashCode() ToString()"
  },
  "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Core.HazelcastJsonValue.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Core.html": {
    "href": "4.1.0/api/Hazelcast.Core.html",
    "title": "Hazelcast.Core Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Core Namespace Classes AsyncContext Represents an ambient context that is local to a given asynchronous control flow, such as an asynchronous method. ConnectionRetryOptions Represents the configuration for the retry strategy. EndiannessExtensions Provides extension methods to the Endianness enumeration. EventHandlersBase<TEventHandler> Provides a base class for classes containing event handlers. HazelcastJsonValue Represents a JSON formatted string. ServiceFactory Provides methods to create instances of services. ServiceFactory<TService> Represents a service factory. ServiceFactoryException SingletonServiceFactory<TService> Represents a singleton service factory. Interfaces IPatternMatcher Provides a strategy to match an item name to a configuration pattern. Enums Endianness Represents the order of the bytes within a binary representation of a number. InMemoryFormat Specifies the storage format types of values stored in the cluster."
  },
  "4.1.0/api/Hazelcast.Core.InMemoryFormat.html": {
    "href": "4.1.0/api/Hazelcast.Core.InMemoryFormat.html",
    "title": "InMemoryFormat Enum | Hazelcast .NET Documentation",
    "keywords": "InMemoryFormat Enum Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Specifies the storage format types of values stored in the cluster. public enum InMemoryFormat Fields Binary Binary (serialized ) format. Object Object (de-serialized) format."
  },
  "4.1.0/api/Hazelcast.Core.IPatternMatcher.html": {
    "href": "4.1.0/api/Hazelcast.Core.IPatternMatcher.html",
    "title": "IPatternMatcher Interface | Hazelcast .NET Documentation",
    "keywords": "IPatternMatcher Interface Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides a strategy to match an item name to a configuration pattern. public interface IPatternMatcher Remarks A pattern matcher is used to retrieve the configuration of a particular item, based upon its name. If no configuration matches, the pattern matcher returns null . If multiple configurations match, the pattern matcher throws a ConfigurationException . Methods Matches(IEnumerable<String>, String) Gets the best match for an item name out of a list of configuration patterns."
  },
  "4.1.0/api/Hazelcast.Core.IPatternMatcher.Matches.html": {
    "href": "4.1.0/api/Hazelcast.Core.IPatternMatcher.Matches.html",
    "title": "Matches Method | Hazelcast .NET Documentation",
    "keywords": "Matches Method Matches(IEnumerable<String>, String) Gets the best match for an item name out of a list of configuration patterns. Declaration string Matches(IEnumerable<string> patterns, string name) Parameters IEnumerable < String > patterns A list of configuration patterns. String name The item name to match. Returns String The element of the list that best matches the item , if any; otherwise null . Exceptions ConfigurationException Occurs when ambiguous configurations are found."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactory.CreateInstance.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactory.CreateInstance.html",
    "title": "CreateInstance Method | Hazelcast .NET Documentation",
    "keywords": "CreateInstance Method CreateInstance<T>(IDictionary<String, String>, Object[]) Creates a new instance of type T . Declaration public static T CreateInstance<T>(IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type T . Type Parameters T The type of the instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<T>(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type as T . Declaration public static T CreateInstance<T>(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type type The type of the created instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type type as T . Type Parameters T The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance<T>(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName as T . Declaration public static T CreateInstance<T>(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters String typeName The name of the type of the created instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns T A new instance of type typeName as T . Type Parameters T The type of the returned instance. Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type . Declaration public static object CreateInstance(Type type, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters Type type The type of the instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns Object A new instance of type type . Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects. CreateInstance(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName . Declaration public static object CreateInstance(string typeName, IDictionary<string, string> stringArgs = null, params object[] paramArgs) Parameters String typeName The name of the type of the instance. IDictionary < String , String > stringArgs Optional string named arguments for the constructor (can be null). Object [] paramArgs Parameter arguments for the constructor. Returns Object A new instance of type typeName . Remarks This method relies on the Activator.CreateInstance or constructor invocation to create the new instance and is not optimized for performance. It is fine to use it for e.g. creating singletons when the application starts, but it should not be used for intensive creation of objects."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactory.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactory.html",
    "title": "ServiceFactory Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactory Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Provides methods to create instances of services. public static class ServiceFactory Inheritance Object ServiceFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks The provided methods rely on the Activator.CreateInstance method to create the new instances and are not optimized for performance. It is fine to use them for e.g. creating singletons when the application starts, but they should not be used for intensive creation of objects. Methods CreateInstance(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName . CreateInstance(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type . CreateInstance<T>(IDictionary<String, String>, Object[]) Creates a new instance of type T . CreateInstance<T>(String, IDictionary<String, String>, Object[]) Creates a new instance of type typeName as T . CreateInstance<T>(Type, IDictionary<String, String>, Object[]) Creates a new instance of type type as T ."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactory-1.Creator.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactory-1.Creator.html",
    "title": "Creator Property | Hazelcast .NET Documentation",
    "keywords": "Creator Property Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Func <TService> Remarks Do not set the creator after a service has been created, as that could have unspecified consequences."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactory-1.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactory-1.html",
    "title": "ServiceFactory<TService> Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactory<TService> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a service factory. public class ServiceFactory<TService> where TService : class Inheritance Object ServiceFactory<TService> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TService The type of the service. Remarks The ServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then creates new instances of that service via its Hazelcast.Core.ServiceFactory`1.Create method. Properties Creator Gets or sets the service creator."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactoryException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactoryException.-ctor.html",
    "title": "ServiceFactoryException Constructor | Hazelcast .NET Documentation",
    "keywords": "ServiceFactoryException Constructor ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. Declaration public ServiceFactoryException() ServiceFactoryException(String) Initializes a new instance of the ServiceFactoryException class with a specified error message. Declaration public ServiceFactoryException(string message) Parameters String message The message that describes the error. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ServiceFactoryException(String, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ServiceFactoryException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Core.ServiceFactoryException.html": {
    "href": "4.1.0/api/Hazelcast.Core.ServiceFactoryException.html",
    "title": "ServiceFactoryException Class | Hazelcast .NET Documentation",
    "keywords": "ServiceFactoryException Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll [Serializable] public sealed class ServiceFactoryException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ServiceFactoryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ServiceFactoryException() Initializes a new instance of the ServiceFactoryException class. ServiceFactoryException(Exception) Initializes a new instance of the ServiceFactoryException class with a reference to the inner exception that is the cause of this exception. ServiceFactoryException(String) Initializes a new instance of the ServiceFactoryException class with a specified error message. ServiceFactoryException(String, Exception) Initializes a new instance of the ServiceFactoryException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Creator.html",
    "title": "Creator Property | Hazelcast .NET Documentation",
    "keywords": "Creator Property Creator Gets or sets the service creator. Declaration public Func<TService> Creator { get; set; } Property Value Func <TService> Remarks Do not set the creator after the service has been created, as that could have unspecified consequences."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.-ctor.html",
    "title": "SingletonServiceFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "SingletonServiceFactory Constructor SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration public SingletonServiceFactory() SingletonServiceFactory(SingletonServiceFactory<TService>, Boolean) Initializes a new instance of the SingletonServiceFactory<TService> class. Declaration protected SingletonServiceFactory(SingletonServiceFactory<TService> other, bool shallow) Parameters SingletonServiceFactory <TService> other Boolean shallow"
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Dispose.html",
    "title": "Dispose Method | Hazelcast .NET Documentation",
    "keywords": "Dispose Method Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(Boolean) Frees, releases or resets managed resources. Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing true when invoked from Dispose() ; otherwise false ."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.html",
    "title": "SingletonServiceFactory<TService> Class | Hazelcast .NET Documentation",
    "keywords": "SingletonServiceFactory<TService> Class Namespace: Hazelcast.Core Assembly: Hazelcast.Net.dll Represents a singleton service factory. public class SingletonServiceFactory<TService> : IDisposable where TService : class Inheritance Object SingletonServiceFactory<TService> FactoryOptions<T> GlobalSerializerOptions SerializerOptions Implements IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TService The type of the service. Remarks The SingletonServiceFactory<TService> class supports defining how a service should be created, via its Creator property, and then provides a unique instance of that service via its Service property. In a configuration file, it supports a typeName property which is the name of the type, and a args property which is a dictionary of arguments for the type constructor. For instance: \"service\": { \"typeName\": \"My.Service,My.dll\", \"args\": { \"foo\": 33 } } Constructors SingletonServiceFactory() Initializes a new instance of the SingletonServiceFactory<TService> class. SingletonServiceFactory(SingletonServiceFactory<TService>, Boolean) Initializes a new instance of the SingletonServiceFactory<TService> class. Properties Creator Gets or sets the service creator. IsConfigured Determines whether this service factory has been configured and can create a service. OwnsService Whether the factory owns the service. Service Gets the singleton instance of the service. ServiceProvider Gets or sets the service provider. Methods Dispose() Dispose(Boolean) Frees, releases or resets managed resources."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.IsConfigured.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.IsConfigured.html",
    "title": "IsConfigured Property | Hazelcast .NET Documentation",
    "keywords": "IsConfigured Property IsConfigured Determines whether this service factory has been configured and can create a service. Declaration public bool IsConfigured { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.OwnsService.html",
    "title": "OwnsService Property | Hazelcast .NET Documentation",
    "keywords": "OwnsService Property OwnsService Whether the factory owns the service. Declaration public bool OwnsService { get; set; } Property Value Boolean Remarks By default, services created via Creator are owned by the factory while services created via ServiceProvider are not, but this property can be used to force a different behavior."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.Service.html",
    "title": "Service Property | Hazelcast .NET Documentation",
    "keywords": "Service Property Service Gets the singleton instance of the service. Declaration public TService Service { get; } Property Value TService The singleton instance of the service, or null if this service factory has not been configured."
  },
  "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html": {
    "href": "4.1.0/api/Hazelcast.Core.SingletonServiceFactory-1.ServiceProvider.html",
    "title": "ServiceProvider Property | Hazelcast .NET Documentation",
    "keywords": "ServiceProvider Property ServiceProvider Gets or sets the service provider. Declaration public IServiceProvider ServiceProvider { get; set; } Property Value IServiceProvider Remarks Do not set the service provider after the service has been created, as that could have unspecified consequences."
  },
  "4.1.0/api/Hazelcast.CP.html": {
    "href": "4.1.0/api/Hazelcast.CP.html",
    "title": "Hazelcast.CP Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.CP Namespace Interfaces IAtomicLong Defines a redundant and highly-available distributed atomic long . IAtomicReference<T> Defines a redundant and highly-available distributed atomic reference. ICPDistributedObject Defines the base contract for all Hazelcast CP distributed objects. ICPGroupId Defines a CP group identifier. ICPSubsystem Defines the CP subsystem."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.AddAndGetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.AddAndGetAsync.html",
    "title": "AddAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAndGetAsync Method AddAndGetAsync(Int64) Adds the specified value to the current value, and returns the updated value. Declaration Task<long> AddAndGetAsync(long value) Parameters Int64 value The value to add. Returns Task < Int64 > The updated value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.CompareAndSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.CompareAndSetAsync.html",
    "title": "CompareAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "CompareAndSetAsync Method CompareAndSetAsync(Int64, Int64) Compares the value for equality and, if equal, replaces the current value. Declaration Task<bool> CompareAndSetAsync(long comparand, long value) Parameters Int64 comparand The value that is compared to the current value. Int64 value The value that replaces the current value if the comparison results in equality. Returns Task < Boolean > The updated value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.DecrementAndGetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.DecrementAndGetAsync.html",
    "title": "DecrementAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "DecrementAndGetAsync Method DecrementAndGetAsync() Decrements the current value by one, and returns the updated value. Declaration Task<long> DecrementAndGetAsync() Returns Task < Int64 > The updated value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndAddAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndAddAsync.html",
    "title": "GetAndAddAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndAddAsync Method GetAndAddAsync(Int64) Adds the specified value to the current value, and returns the original value. Declaration Task<long> GetAndAddAsync(long value) Parameters Int64 value The value to add. Returns Task < Int64 > The original value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndDecrementAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndDecrementAsync.html",
    "title": "GetAndDecrementAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndDecrementAsync Method GetAndDecrementAsync() Decrements the current value by one, and returns the original value. Declaration Task<long> GetAndDecrementAsync() Returns Task < Int64 > The original value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndIncrementAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndIncrementAsync.html",
    "title": "GetAndIncrementAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndIncrementAsync Method GetAndIncrementAsync() Increments the current value by one, and returns the original value. Declaration Task<long> GetAndIncrementAsync() Returns Task < Int64 > The original value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAndSetAsync.html",
    "title": "GetAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSetAsync Method GetAndSetAsync(Int64) Sets the current value, and returns the original value. Declaration Task<long> GetAndSetAsync(long value) Parameters Int64 value The value to set. Returns Task < Int64 > The original value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync() Gets the current value. Declaration Task<long> GetAsync() Returns Task < Int64 > The current value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.html",
    "title": "IAtomicLong Interface | Hazelcast .NET Documentation",
    "keywords": "IAtomicLong Interface Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Defines a redundant and highly-available distributed atomic long . public interface IAtomicLong : ICPDistributedObject, IDistributedObject, IAsyncDisposable Inherited Members ICPDistributedObject.GroupId IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Methods AddAndGetAsync(Int64) Adds the specified value to the current value, and returns the updated value. CompareAndSetAsync(Int64, Int64) Compares the value for equality and, if equal, replaces the current value. DecrementAndGetAsync() Decrements the current value by one, and returns the updated value. GetAndAddAsync(Int64) Adds the specified value to the current value, and returns the original value. GetAndDecrementAsync() Decrements the current value by one, and returns the original value. GetAndIncrementAsync() Increments the current value by one, and returns the original value. GetAndSetAsync(Int64) Sets the current value, and returns the original value. GetAsync() Gets the current value. IncrementAndGetAsync() Increments the current value by one, and returns the updated value. SetAsync(Int64) Sets the value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.IncrementAndGetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.IncrementAndGetAsync.html",
    "title": "IncrementAndGetAsync Method | Hazelcast .NET Documentation",
    "keywords": "IncrementAndGetAsync Method IncrementAndGetAsync() Increments the current value by one, and returns the updated value. Declaration Task<long> IncrementAndGetAsync() Returns Task < Int64 > The updated value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicLong.SetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicLong.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(Int64) Sets the value. Declaration Task SetAsync(long value) Parameters Int64 value The value to set. Returns Task"
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.ClearAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears current stored reference, so it becomes null . Declaration Task ClearAsync() Returns Task"
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.CompareAndSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.CompareAndSetAsync.html",
    "title": "CompareAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "CompareAndSetAsync Method CompareAndSetAsync(T, T) Compares the value for equality and, if equal, replaces the current value. Declaration Task<bool> CompareAndSetAsync(T comparand, T value) Parameters T comparand The value that is compared to the current value. T value The value that replaces the current value if the comparison results in equality. Returns Task < Boolean > The updated value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.ContainsAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.ContainsAsync.html",
    "title": "ContainsAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsAsync Method ContainsAsync(T) Checks if the reference contains the value. Declaration Task<bool> ContainsAsync(T value) Parameters T value The value to check (can be null ). Returns Task < Boolean > Whether the reference contains the value specified."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.GetAndSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.GetAndSetAsync.html",
    "title": "GetAndSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAndSetAsync Method GetAndSetAsync(T) Sets the current value, and returns the original value. Declaration Task<T> GetAndSetAsync(T value) Parameters T value The value to set. Returns Task <T> The original value. Remarks If is a struct, method will return default(T) when reference is not set. You can make it return null instead by using Nullable<T> ."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync() Gets the current value. Declaration Task<T> GetAsync() Returns Task <T> The current value. Remarks If is a struct, method will return default(T) when reference is not set. You can make it return null instead by using Nullable<T> ."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.html",
    "title": "IAtomicReference<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IAtomicReference<T> Interface Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Defines a redundant and highly-available distributed atomic reference. public interface IAtomicReference<T> : ICPDistributedObject, IDistributedObject, IAsyncDisposable Inherited Members ICPDistributedObject.GroupId IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters T Methods ClearAsync() Clears current stored reference, so it becomes null . CompareAndSetAsync(T, T) Compares the value for equality and, if equal, replaces the current value. ContainsAsync(T) Checks if the reference contains the value. GetAndSetAsync(T) Sets the current value, and returns the original value. GetAsync() Gets the current value. IsNullAsync() Checks if the stored reference is null . SetAsync(T) Sets the value."
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.IsNullAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.IsNullAsync.html",
    "title": "IsNullAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsNullAsync Method IsNullAsync() Checks if the stored reference is null . Declaration Task<bool> IsNullAsync() Returns Task < Boolean > true if null , false otherwise"
  },
  "4.1.0/api/Hazelcast.CP.IAtomicReference-1.SetAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.IAtomicReference-1.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(T) Sets the value. Declaration Task SetAsync(T value) Parameters T value The value to set. Returns Task"
  },
  "4.1.0/api/Hazelcast.CP.ICPDistributedObject.GroupId.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPDistributedObject.GroupId.html",
    "title": "GroupId Property | Hazelcast .NET Documentation",
    "keywords": "GroupId Property GroupId Gets the identifier of the group of this object. Declaration ICPGroupId GroupId { get; } Property Value ICPGroupId"
  },
  "4.1.0/api/Hazelcast.CP.ICPDistributedObject.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPDistributedObject.html",
    "title": "ICPDistributedObject Interface | Hazelcast .NET Documentation",
    "keywords": "ICPDistributedObject Interface Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Defines the base contract for all Hazelcast CP distributed objects. public interface ICPDistributedObject : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Properties GroupId Gets the identifier of the group of this object."
  },
  "4.1.0/api/Hazelcast.CP.ICPGroupId.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPGroupId.html",
    "title": "ICPGroupId Interface | Hazelcast .NET Documentation",
    "keywords": "ICPGroupId Interface Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Defines a CP group identifier. public interface ICPGroupId Properties Id Gets the numeric identifier of the group. Name Gets the name of the group."
  },
  "4.1.0/api/Hazelcast.CP.ICPGroupId.Id.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPGroupId.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the numeric identifier of the group. Declaration long Id { get; } Property Value Int64"
  },
  "4.1.0/api/Hazelcast.CP.ICPGroupId.Name.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPGroupId.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the group. Declaration string Name { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.CP.ICPSubsystem.GetAtomicLongAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPSubsystem.GetAtomicLongAsync.html",
    "title": "GetAtomicLongAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAtomicLongAsync Method GetAtomicLongAsync(String) Gets an IAtomicLong distributed object. Declaration Task<IAtomicLong> GetAtomicLongAsync(string name) Parameters String name The unique name of the atomic long. Returns Task < IAtomicLong > The atomic long that was retrieved or created. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.CP.ICPSubsystem.GetAtomicReferenceAsync.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPSubsystem.GetAtomicReferenceAsync.html",
    "title": "GetAtomicReferenceAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAtomicReferenceAsync Method GetAtomicReferenceAsync<T>(String) Gets an IAtomicReference<T> distributed object. Declaration Task<IAtomicReference<T>> GetAtomicReferenceAsync<T>(string name) Parameters String name The unique name of the atomic reference. Returns Task < IAtomicReference <T>> The atomic reference that was retrieved or created. Type Parameters T Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.CP.ICPSubsystem.html": {
    "href": "4.1.0/api/Hazelcast.CP.ICPSubsystem.html",
    "title": "ICPSubsystem Interface | Hazelcast .NET Documentation",
    "keywords": "ICPSubsystem Interface Namespace: Hazelcast.CP Assembly: Hazelcast.Net.dll Defines the CP subsystem. public interface ICPSubsystem Methods GetAtomicLongAsync(String) Gets an IAtomicLong distributed object. GetAtomicReferenceAsync<T>(String) Gets an IAtomicReference<T> distributed object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.-ctor.html",
    "title": "CollectionItemEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventArgs Constructor CollectionItemEventArgs(MemberInfo, Lazy<T>, Object) Initializes a new instance of the CollectionItemEventArgs<T> class. Declaration public CollectionItemEventArgs(MemberInfo member, Lazy<T> item, object state) Parameters MemberInfo member The member. Lazy <T> item The item. Object state A state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.html",
    "title": "CollectionItemEventArgs<T> Class | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventArgs<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for the CollectionItemEventTypes events. public sealed class CollectionItemEventArgs<T> : EventArgsBase Inheritance Object EventArgsBase CollectionItemEventArgs<T> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic object type. Constructors CollectionItemEventArgs(MemberInfo, Lazy<T>, Object) Initializes a new instance of the CollectionItemEventArgs<T> class. Properties Item Gets the item. Member Gets the member that fired the event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Item.html",
    "title": "Item Property | Hazelcast .NET Documentation",
    "keywords": "Item Property Item Gets the item. Declaration public T Item { get; } Property Value T"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventArgs-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member that fired the event. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.html",
    "title": "CollectionItemEventHandlers<T> Class | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventHandlers<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represent collection item event handlers. public sealed class CollectionItemEventHandlers<T> : EventHandlersBase<ICollectionItemEventHandler<T>>, IEnumerable<ICollectionItemEventHandler<T>>, IEnumerable Inheritance Object EventHandlersBase < ICollectionItemEventHandler <T>> CollectionItemEventHandlers<T> Implements IEnumerable < ICollectionItemEventHandler <T>> IEnumerable Inherited Members EventHandlersBase<ICollectionItemEventHandler<T>>.Add(ICollectionItemEventHandler<T>) EventHandlersBase<ICollectionItemEventHandler<T>>.GetEnumerator() EventHandlersBase<ICollectionItemEventHandler<T>>.IEnumerable.GetEnumerator() EventHandlersBase<ICollectionItemEventHandler<T>>.Remove(ICollectionItemEventHandler<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The collection item type. Methods ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemAdded.html",
    "title": "ItemAdded Method | Hazelcast .NET Documentation",
    "keywords": "ItemAdded Method ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Action < IHCollection <T>, CollectionItemEventArgs <T>> handler The handler. Returns CollectionItemEventHandlers <T> The handlers. ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is added. Declaration public CollectionItemEventHandlers<T> ItemAdded(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Func < IHCollection <T>, CollectionItemEventArgs <T>, ValueTask > handler The handler. Returns CollectionItemEventHandlers <T> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.CollectionItemEventHandlers-1.ItemRemoved.html",
    "title": "ItemRemoved Method | Hazelcast .NET Documentation",
    "keywords": "ItemRemoved Method ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Action<IHCollection<T>, CollectionItemEventArgs<T>> handler) Parameters Action < IHCollection <T>, CollectionItemEventArgs <T>> handler The handler. Returns CollectionItemEventHandlers <T> The handlers. ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask>) Adds an handler which runs when an item is removed. Declaration public CollectionItemEventHandlers<T> ItemRemoved(Func<IHCollection<T>, CollectionItemEventArgs<T>, ValueTask> handler) Parameters Func < IHCollection <T>, CollectionItemEventArgs <T>, ValueTask > handler The handler. Returns CollectionItemEventHandlers <T> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.-ctor.html",
    "title": "EventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "EventArgsBase Constructor EventArgsBase(Object) Initializes a new instance of the EventArgsBase class. Declaration protected EventArgsBase(object state) Parameters Object state A state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.html",
    "title": "EventArgsBase Class | Hazelcast .NET Documentation",
    "keywords": "EventArgsBase Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Provides a base class for all event arguments. public abstract class EventArgsBase Inheritance Object EventArgsBase CollectionItemEventArgs<T> MapEntryEventArgsBase<TKey> TopicMessageEventArgs<T> Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors EventArgsBase(Object) Initializes a new instance of the EventArgsBase class. Properties State Gets the state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.State.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.EventArgsBase.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the state object. Declaration public object State { get; } Property Value Object"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.html",
    "title": "Hazelcast.DistributedObjects Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.DistributedObjects Namespace Classes CollectionItemEventArgs<T> Represents event data for the CollectionItemEventTypes events. CollectionItemEventHandlers<T> Represent collection item event handlers. EventArgsBase Provides a base class for all event arguments. MapClearedEventArgs MapEntryAddedEventArgs<TKey, TValue> MapEntryEventArgsBase<TKey> Represents event data for map entry events. MapEntryEvictedEventArgs<TKey, TValue> MapEntryExpiredEventArgs<TKey, TValue> MapEntryInvalidatedEventArgs<TKey, TValue> MapEntryLoadedEventArgs<TKey, TValue> MapEntryMergedEventArgs<TKey, TValue> MapEntryRemovedEventArgs<TKey, TValue> MapEntryUpdatedEventArgs<TKey, TValue> MapEventArgsBase Represents event data for map events. MapEventHandlers<TKey, TValue> Represents distributed map event handlers. MapEvictedEventArgs MultiMapEventHandlers<TKey, TValue> Represents multi distributed map event handlers. ReplicatedMapEventHandlers<TKey, TValue> Represents replicated distributed map event handlers. TopicEventHandlers<T> Represent topic event handlers. TopicMessageEventArgs<T> Represents event data for the event. Interfaces ICollectionItemEventHandler<T> Specifies a collection item event handler. IDistributedObject Defines the base contract for all Hazelcast distributed objects. IEntryProcessor<TResult> Defines a processor that can process the entries of an IHMap<TKey, TValue> on the server. IHCollection<T> Defines a concurrent, distributed, and listenable collection. IHList<T> Defines a concurrent, distributed, non-partitioned and listenable list IHMap<TKey, TValue> Represents a distributed map. IHMapBase<TKey, TValue> Defines the base interface for various Hazelcast distributed dictionaries. IHMultiMap<TKey, TValue> Represents a distributed map whose keys can be associated with multiple values. IHQueue<T> Defines a concurrent, blocking, distributed, non-partitioned and observable queue. IHReplicatedMap<TKey, TValue> Represents a distributed map with weak consistency and values locally stored on every node of the cluster. IHRingBuffer<TItem> A Ringbuffer is a data-structure where the content is stored in a ring like structure. IHSet<T> Defines a concurrent, distributed, non-partitioned and listenable set IHTopic<T> Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. IHTxList<TItem> IHTxMap<TKey, TValue> Represents a transactional distributed map. IHTxMultiMap<TKey, TValue> Transactional implementation of MultiMap IHTxQueue<TItem> Transactional implementation of Queue IHTxSet<TItem> Transactional implementation of IHSet<T> . IKeyLockable<TKey> IMapEntryEventHandler<TKey, TValue, TSender> Specifies a map entry event handler. IMapEventHandler<TKey, TValue, TSender> Specifies a map event handler. IMapEventHandlerBase Specifies a generic map event handler. IMapInterceptor A place holder interface for com.hazelcast.map.MapInterceptor on server side. ITopicEventHandler<T> Specifies a topic event handler. ITransactionalDistributedObject Defines the base contract for all transactional Hazelcast distributed objects. ITransactionalObject Marker interface for all transactional distributed objects. Enums OverflowPolicy Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.EventType.html",
    "title": "EventType Property | Hazelcast .NET Documentation",
    "keywords": "EventType Property EventType Gets the handled event type. Declaration CollectionItemEventTypes EventType { get; } Property Value CollectionItemEventTypes"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, Object) Handles an event. Declaration ValueTask HandleAsync(IHCollection<T> sender, MemberInfo member, Lazy<T> item, object state) Parameters IHCollection <T> sender The IHCollection<T> that triggered the event. MemberInfo member The member. Lazy <T> item The item. Object state A state object. Returns ValueTask"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ICollectionItemEventHandler-1.html",
    "title": "ICollectionItemEventHandler<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ICollectionItemEventHandler<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a collection item event handler. public interface ICollectionItemEventHandler<T> Type Parameters T The collection items type. Properties EventType Gets the handled event type. Methods HandleAsync(IHCollection<T>, MemberInfo, Lazy<T>, Object) Handles an event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.DestroyAsync.html",
    "title": "DestroyAsync Method | Hazelcast .NET Documentation",
    "keywords": "DestroyAsync Method DestroyAsync() Destroys this distributed object. Declaration ValueTask DestroyAsync() Returns ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.html",
    "title": "IDistributedObject Interface | Hazelcast .NET Documentation",
    "keywords": "IDistributedObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base contract for all Hazelcast distributed objects. public interface IDistributedObject : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties Name Gets the unique name of the object. PartitionKey Gets the partition key of this object. ServiceName Gets the name of the service managing this object. Methods DestroyAsync() Destroys this distributed object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the unique name of the object. Declaration string Name { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.PartitionKey.html",
    "title": "PartitionKey Property | Hazelcast .NET Documentation",
    "keywords": "PartitionKey Property PartitionKey Gets the partition key of this object. Declaration string PartitionKey { get; } Property Value String The partition key. Remarks The returned value has meaning only for non-partitioned data structures, such as IAtomicLong. For partitioned data structures such as IHMap<TKey, TValue> , the returned value is not null but has no meaning."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IDistributedObject.ServiceName.html",
    "title": "ServiceName Property | Hazelcast .NET Documentation",
    "keywords": "ServiceName Property ServiceName Gets the name of the service managing this object. Declaration string ServiceName { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IEntryProcessor-1.html",
    "title": "IEntryProcessor<TResult> Interface | Hazelcast .NET Documentation",
    "keywords": "IEntryProcessor<TResult> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a processor that can process the entries of an IHMap<TKey, TValue> on the server. public interface IEntryProcessor<TResult> Type Parameters TResult The type of the results produced by the processor. Remarks Client-side IEntryProcessor<TResult> implementations do not have any processing logic, they must be backed by a corresponding processor registered on the server and containing the actual implementation."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.AddAll.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.AddAll.html",
    "title": "AddAll Method | Hazelcast .NET Documentation",
    "keywords": "AddAll Method AddAll<TItem>(ICollection<TItem>) Adds all. Declaration Task<bool> AddAll<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items element collection Returns Task < Boolean > true if this collection changed, false otherwise. Type Parameters TItem type of elements"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(T) Adds an item to the collection. Declaration Task<bool> AddAsync(T item) Parameters T item The item. Returns Task < Boolean > Whether the item was added."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the collection. Declaration Task ClearAsync() Returns Task A task that will complete when the collection has been cleared."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAllAsync.html",
    "title": "ContainsAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsAllAsync Method ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. Declaration Task<bool> ContainsAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items The collection Returns Task < Boolean > true if this collection contains all of the elements in the specified collection; otherwise, false . Type Parameters TItem type of elements"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.ContainsAsync.html",
    "title": "ContainsAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsAsync Method ContainsAsync(T) Determines whether the collection contains an item. Declaration Task<bool> ContainsAsync(T item) Parameters T item The item. Returns Task < Boolean > true if the collection contains the item; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.GetAllAsync.html",
    "title": "GetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAllAsync Method GetAllAsync() Gets the collection items. Declaration Task<IReadOnlyList<T>> GetAllAsync() Returns Task < IReadOnlyList <T>> The collection items."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Gets the number of items in the collection. Declaration Task<int> GetSizeAsync() Returns Task < Int32 > The number of items in the collection."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.html",
    "title": "IHCollection<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHCollection<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, and listenable collection. public interface IHCollection<T> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T The type of the items in the collection Remarks This is not a partitioned data-structure. Entire contents is stored on a single machine (and in the backup). It will not scale by adding more members to the cluster. Methods AddAll<TItem>(ICollection<TItem>) Adds all. AddAsync(T) Adds an item to the collection. ClearAsync() Clears the collection. ContainsAllAsync<TItem>(ICollection<TItem>) Determines whether this collection contains all of the elements in the specified collection. ContainsAsync(T) Determines whether the collection contains an item. GetAllAsync() Gets the collection items. GetSizeAsync() Gets the number of items in the collection. IsEmptyAsync() Determines whether this instance is empty. RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. RemoveAsync(T) Removes an item from the collection. RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Determines whether this instance is empty. Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if this instance is empty; otherwise, false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAllAsync.html",
    "title": "RemoveAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAllAsync Method RemoveAllAsync<TItem>(ICollection<TItem>) Removes all of the elements in the specified collection from this collection. Declaration Task<bool> RemoveAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items element collection to be removed Returns Task < Boolean > true if all removed, false otherwise. Type Parameters TItem type of elements"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(T) Removes an item from the collection. Declaration Task<bool> RemoveAsync(T item) Parameters T item The item. Returns Task < Boolean > true if the item was removed; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.RetainAllAsync.html",
    "title": "RetainAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "RetainAllAsync Method RetainAllAsync<TItem>(ICollection<TItem>) Retains only the elements in this collection that are contained in the specified collection. Declaration Task<bool> RetainAllAsync<TItem>(ICollection<TItem> items) where TItem : T Parameters ICollection <TItem> items The c. Returns Task < Boolean > true if this collection changed, false otherwise. Type Parameters TItem type of elements Remarks In other words, removes from this collection all of its elements that are not contained in the specified collection."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<CollectionItemEventHandlers<T>> events, bool includeValue = true, object state = null) Parameters Action < CollectionItemEventHandlers <T>> events An event handlers collection builder. Boolean includeValue Whether to include values in event arguments. Object state A state object that will be passed to handlers. Returns Task < Guid > The unique identifier of the subscription."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHCollection-1.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > Whether the operation was successful. Remarks Once this method has been invoked, and whatever its result, the subscription is de-activated, which means that no events will trigger anymore, even if the client receives event messages from the servers. If this method returns false , then one or more client connection has not been able to get its server to remove the subscription. Even though no events will trigger anymore, the server may keep sending (ignored) event messages. It is therefore recommended to retry unsubscribing until it is successful."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.AddAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.AddAllAsync.html",
    "title": "AddAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAllAsync Method AddAllAsync<TItem>(Int32, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. Declaration Task<bool> AddAllAsync<TItem>(int index, ICollection<TItem> items) where TItem : T Parameters Int32 index index at which to insert the first element from the specified collection ICollection <TItem> items collection containing elements to be added to this list Returns Task < Boolean > true if this list changed as a result of the call Type Parameters TItem Remarks Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.AddAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(Int32, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). Declaration Task AddAsync(int index, T item) Parameters Int32 index index at which the specified element is to be inserted T item element to be inserted Returns Task"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(Int32) Returns the element in the specified position in this list Declaration Task<T> GetAsync(int index) Parameters Int32 index index of the element to return Returns Task <T> the element at the specified position in the list"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.GetSublistAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.GetSublistAsync.html",
    "title": "GetSublistAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSublistAsync Method GetSublistAsync(Int32, Int32) Returns a view of the portion of this list between the specified fromIndex , inclusive, and toIndex , exclusive. Declaration Task<IReadOnlyList<T>> GetSublistAsync(int fromIndex, int toIndex) Parameters Int32 fromIndex low endpoint (inclusive) of the subList Int32 toIndex high endpoint (exclusive) of the subList Returns Task < IReadOnlyList <T>> a view of the specified range within this list Remarks If fromIndex and toIndex are equal, the returned list is empty."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.html",
    "title": "IHList<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHList<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, non-partitioned and listenable list public interface IHList<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHList is not a partitioned data-structure. Entire contents of an IHList is stored on a single machine (and in the backup). The IHList will not scale by adding more members to the cluster. Methods AddAllAsync<TItem>(Int32, ICollection<TItem>) Inserts all of the elements in the specified collection into this list at the specified position. AddAsync(Int32, T) Inserts the specified element at the specified position in this list. Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices). GetAsync(Int32) Returns the element in the specified position in this list GetSublistAsync(Int32, Int32) Returns a view of the portion of this list between the specified fromIndex , inclusive, and toIndex , exclusive. IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. RemoveAsync(Int32) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. Set(Int32, T) Replaces the element at the specified position in this list with the specified element."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.IndexOfAsync.html",
    "title": "IndexOfAsync Method | Hazelcast .NET Documentation",
    "keywords": "IndexOfAsync Method IndexOfAsync(T) Returns the zero-based index of the first occurrence of a specific item in this list. Declaration Task<int> IndexOfAsync(T item) Parameters T item element to search for Returns Task < Int32 > the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.LastIndexOfAsync.html",
    "title": "LastIndexOfAsync Method | Hazelcast .NET Documentation",
    "keywords": "LastIndexOfAsync Method LastIndexOfAsync(T) Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. Declaration Task<int> LastIndexOfAsync(T item) Parameters T item element to search for Returns Task < Int32 > the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(Int32) Removes the first occurrence of the specified element from this list, if it is present. If this list does not contain the element, it is unchanged. Declaration Task<T> RemoveAsync(int index) Parameters Int32 index element to be removed from this list, if present Returns Task <T> the element previously at the specified position"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.Set.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHList-1.Set.html",
    "title": "Set Method | Hazelcast .NET Documentation",
    "keywords": "Set Method Set(Int32, T) Replaces the element at the specified position in this list with the specified element. Declaration Task<T> Set(int index, T item) Parameters Int32 index index index of the element to replace T item element to be stored at the specified position Returns Task <T> The element previously at the specified position"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AddIndexAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AddIndexAsync.html",
    "title": "AddIndexAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddIndexAsync Method AddIndexAsync(IndexOptions) Adds an index to this dictionary for the specified entries so that queries can run faster. Declaration Task AddIndexAsync(IndexOptions indexOptions) Parameters IndexOptions indexOptions Returns Task A task that will complete when the index added. AddIndexAsync(IndexType, String[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. Declaration Task AddIndexAsync(IndexType type, params string[] attributes) Parameters IndexType type Index type. String [] attributes Attributes to be indexed. Returns Task A task that will complete when the index added."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AddInterceptorAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AddInterceptorAsync.html",
    "title": "AddInterceptorAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddInterceptorAsync Method AddInterceptorAsync(IMapInterceptor) Adds an interceptor on the server side. Declaration Task<string> AddInterceptorAsync(IMapInterceptor interceptor) Parameters IMapInterceptor interceptor The interceptor. Returns Task < String > The interceptor unique identifier. Remarks The interceptor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AggregateAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.AggregateAsync.html",
    "title": "AggregateAsync Method | Hazelcast .NET Documentation",
    "keywords": "AggregateAsync Method AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator) Parameters IAggregator <TResult> aggregator The aggregator. Returns Task <TResult> The result of the aggregation. Type Parameters TResult The type of the result. Remarks The aggregator must be serializable via Hazelcast serialization, and have a counterpart on the server. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. Declaration Task<TResult> AggregateAsync<TResult>(IAggregator<TResult> aggregator, IPredicate predicate) Parameters IAggregator <TResult> aggregator The aggregator. IPredicate predicate A predicate to filter the entries with. Returns Task <TResult> The result of the aggregation. Type Parameters TResult The type of the result. Remarks The aggregator and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.DeleteAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.DeleteAsync.html",
    "title": "DeleteAsync Method | Hazelcast .NET Documentation",
    "keywords": "DeleteAsync Method DeleteAsync(TKey) Removes an entry. Declaration Task DeleteAsync(TKey key) Parameters TKey key The key. Returns Task Remarks For performance reasons, this method does not return the removed value. Prefer RemoveAsync(TKey) if the value is required. However, note that RemoveAsync(TKey) may breaks the events contract: this method does not consider the removed value at all, which means that any event that would be filtered on the value (for instance via a predicate), and would trigger with RemoveAsync(TKey) , will not trigger here."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.EvictAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.EvictAllAsync.html",
    "title": "EvictAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "EvictAllAsync Method EvictAllAsync() Evicts all entries but the locked entries from the cache. Declaration Task EvictAllAsync() Returns Task A task that will complete when all entries have been evicted. Remarks If a MapStore is defined on server for this map, then MapStore.deleteAll is not called by this method, If you do want MapStore.deleteAll to be called use the method."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.EvictAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.EvictAsync.html",
    "title": "EvictAsync Method | Hazelcast .NET Documentation",
    "keywords": "EvictAsync Method EvictAsync(TKey) Evicts the specified key from the map. Declaration Task<bool> EvictAsync(TKey key) Parameters TKey key The key. Returns Task < Boolean > true if the entry was evicted; otherwise false . Remarks If a MapStore on server is defined for this map, then the entry is not deleted from the underlying MapStore , evict only removes the entry from the memory. Use DeleteAsync(TKey) or if MapStore.delete(object) needs to be called. This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ExecuteAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ExecuteAsync.html",
    "title": "ExecuteAsync Method | Hazelcast .NET Documentation",
    "keywords": "ExecuteAsync Method ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor) Parameters IEntryProcessor <TResult> processor An entry processor. Returns Task < IDictionary <TKey, TResult>> The result of the processing of all entries. Type Parameters TResult The type of the results produced by the processor. Remarks The operation is not lock-aware. The processor will process the entries no matter if the keys are locked or not. The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. Interactions with the map store: For each entry not found in memory MapLoader.load(Object) is invoked to load the value from the MapStore backing the map. If the entryProcessor updates the entry and write-through persistence mode is configured, before the value is stored in memory, MapStore.store(Object, Object) is called to write the value into the map store. If the entryProcessor updates the entry's value to null value and write-through persistence mode is configured, before the value is removed from the memory, MapStore.delete(Object) is called to delete the value from the MapStore . Any exceptions thrown by the MapStore fail the operation and are propagated to the caller. If an exception happened, the operation might already succeeded on some of the keys. If write-behind persistence mode is configured with write-coalescing turned off, ReachedMaxSizeException may be thrown if the write-behind queue has reached its per-node maximum capacity. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. Declaration Task<TResult> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, TKey key) Parameters IEntryProcessor <TResult> processor An entry processor. TKey key The key. Returns Task <TResult> The result of the process. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IEnumerable<TKey> keys) Parameters IEntryProcessor <TResult> processor An entry processor. IEnumerable <TKey> keys The keys. Returns Task < IDictionary <TKey, TResult>> The result of the processing of each entry. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. Declaration Task<IDictionary<TKey, TResult>> ExecuteAsync<TResult>(IEntryProcessor<TResult> processor, IPredicate predicate) Parameters IEntryProcessor <TResult> processor An entry processor. IPredicate predicate A predicate to select entries. Returns Task < IDictionary <TKey, TResult>> The result of the processing of selected entries. Type Parameters TResult The type of the results produced by the processor. Remarks The processor must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.FlushAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.FlushAsync.html",
    "title": "FlushAsync Method | Hazelcast .NET Documentation",
    "keywords": "FlushAsync Method FlushAsync() Flushes the MapStore on server, if any. Declaration Task FlushAsync() Returns Task A task that will complete when the map store has been flushed. Remarks If a MapStore is defined for this map, this method flushes all dirty entries by deleting or storing them."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetAllAsync.html",
    "title": "GetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAllAsync Method GetAllAsync(ICollection<TKey>) Gets all entries for keys. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetAllAsync(ICollection<TKey> keys) Parameters ICollection <TKey> keys The keys. Returns Task < IReadOnlyDictionary <TKey, TValue>> The values for the specified keys. Remarks The returned readonly dictionary is NOT backed by the hazelcast map, so changes to the returned readonly dictionary are NOT reflected in the IHMap<TKey, TValue> , and vice-versa."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetEntriesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetEntriesAsync.html",
    "title": "GetEntriesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntriesAsync Method GetEntriesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly dictionary of the matching entries. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyDictionary <TKey, TValue>> readonly dictionary of the matching entries. Remarks Specified predicate runs on all members in parallel. The returned readonly dictionary is NOT backed by the hazelcast dictionary, so changes to the returned readonly dictionary are NOT reflected in the IHMap<TKey, TValue> , and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetEntryViewAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetEntryViewAsync.html",
    "title": "GetEntryViewAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntryViewAsync Method GetEntryViewAsync(TKey) Gets an entry with statistics for a key, or null if the map does not contain an entry with this key. Declaration Task<IMapEntryStats<TKey, TValue>> GetEntryViewAsync(TKey key) Parameters TKey key The key. Returns Task < IMapEntryStats <TKey, TValue>> An IMapEntryStats<TKey, TValue> for the specified key, or null if the map does not contain an entry with this key."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetKeysAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync(IPredicate) Queries the map based on the specified predicate and returns matching keys. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyCollection <TKey>> readonly clone of all keys matching the predicate. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetValuesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate predicate) Parameters IPredicate predicate A predicate to filter the entries. Returns Task < IReadOnlyCollection <TValue>> readonly collection of the values of matching entries. Remarks Specified predicate runs on all members in parallel. The returned collection is NOT backed by this dictionary, so changes to the dictionary are NOT reflected in the collection, and vice-versa. The predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.html",
    "title": "IHMap<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHMap<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed map. public interface IHMap<TKey, TValue> : IHMapBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>>, IKeyLockable<TKey> Inherited Members IHMapBase<TKey, TValue>.GetAsync(TKey) IHMapBase<TKey, TValue>.GetKeysAsync() IHMapBase<TKey, TValue>.GetValuesAsync() IHMapBase<TKey, TValue>.GetEntriesAsync() IHMapBase<TKey, TValue>.GetSizeAsync() IHMapBase<TKey, TValue>.IsEmptyAsync() IHMapBase<TKey, TValue>.ContainsKeyAsync(TKey) IHMapBase<TKey, TValue>.ContainsValueAsync(TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue, TimeSpan) IHMapBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHMapBase<TKey, TValue>.ClearAsync() IHMapBase<TKey, TValue>.RemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) Type Parameters TKey The type of the keys. TValue The type of the values. Remarks Keys are identified by their own hash code and equality. Methods return clones of the original keys and values. Modifying these clones does not change the actual keys and values in the map. One should put the modified entries back, to make changes visible to all nodes. Methods AddIndexAsync(IndexOptions) Adds an index to this dictionary for the specified entries so that queries can run faster. AddIndexAsync(IndexType, String[]) Convenient method to add an index to this dictionary with the given type and attributes. Attributes are indexed in ascending order. AddInterceptorAsync(IMapInterceptor) Adds an interceptor on the server side. AggregateAsync<TResult>(IAggregator<TResult>) Aggregates values. AggregateAsync<TResult>(IAggregator<TResult>, IPredicate) Aggregates values. DeleteAsync(TKey) Removes an entry. EvictAllAsync() Evicts all entries but the locked entries from the cache. EvictAsync(TKey) Evicts the specified key from the map. ExecuteAsync<TResult>(IEntryProcessor<TResult>) Processes all entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>, TKey) Processes an entry. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IPredicate) Process entries. ExecuteAsync<TResult>(IEntryProcessor<TResult>, IEnumerable<TKey>) Processes entries. FlushAsync() Flushes the MapStore on server, if any. GetAllAsync(ICollection<TKey>) Gets all entries for keys. GetEntriesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly dictionary of the matching entries. GetEntryViewAsync(TKey) Gets an entry with statistics for a key, or null if the map does not contain an entry with this key. GetKeysAsync(IPredicate) Queries the map based on the specified predicate and returns matching keys. GetValuesAsync(IPredicate) Queries the map based on the specified predicate and returns a readonly collection of the values of matching entries. Gets values for entries matching a predicate. LoadAllAsync(Boolean) Loads all keys into the store. LoadAllAsync(ICollection<TKey>, Boolean) Loads the given keys into the store. ProjectAsync<TResult>(IProjection) Projects values. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. PutAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry, and returns the previous value, if any. PutIfAbsentAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutIfAbsentAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutIfAbsentAsync(TKey, TValue, TimeSpan, TimeSpan) Adds an entry with a time-to-live and a max-idle if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. PutTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. PutTransientAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. RemoveAllAsync(IPredicate) Removes all entries which match with the supplied predicate. RemoveAsync(TKey, TValue) Removes an entry. RemoveInterceptorAsync(String) Removes the interceptor that identified by id. ReplaceAsync(TKey, TValue) Updates an entry if it exists. ReplaceAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue . SetAsync(TKey, TValue) Sets (adds or updates) an entry. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. SetAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, IPredicate, Boolean, Object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, IPredicate, Boolean, Object) Subscribes to events. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. TryPutAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry. TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this map within the specified time to wait value. UnsubscribeAsync(Guid) Unsubscribe from events. UpdateTimeToLive(TKey, TimeSpan) Updates the time-to-live of an entry."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.LoadAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.LoadAllAsync.html",
    "title": "LoadAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "LoadAllAsync Method LoadAllAsync(Boolean) Loads all keys into the store. Declaration Task LoadAllAsync(bool replaceExistingValues) Parameters Boolean replaceExistingValues when true , existing values in the IHMap<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Task A task that will complete when the map store has been loaded. LoadAllAsync(ICollection<TKey>, Boolean) Loads the given keys into the store. Declaration Task LoadAllAsync(ICollection<TKey> keys, bool replaceExistingValues) Parameters ICollection <TKey> keys keys of the values entries to load (keys inside the collection cannot be null) Boolean replaceExistingValues when true , existing values in the IHMap<TKey, TValue> will be replaced by those loaded from the MapLoader Returns Task A task that will complete when the map store has been loaded."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ProjectAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ProjectAsync.html",
    "title": "ProjectAsync Method | Hazelcast .NET Documentation",
    "keywords": "ProjectAsync Method ProjectAsync<TResult>(IProjection) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection) Parameters IProjection projection The projection. Returns Task < IReadOnlyCollection <TResult>> The projected values. Type Parameters TResult The type of the result. Remarks The projection must be serializable via Hazelcast serialization, and have a counterpart on the server. ProjectAsync<TResult>(IProjection, IPredicate) Projects values. Declaration Task<IReadOnlyCollection<TResult>> ProjectAsync<TResult>(IProjection projection, IPredicate predicate) Parameters IProjection projection The projection. IPredicate predicate A predicate to filter the entries with. Returns Task < IReadOnlyCollection <TResult>> The projected values. Type Parameters TResult The type of the result. Remarks The projection and predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry, and returns the previous value, if any. Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters TKey key The key. TValue value The value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Task <TValue> The previous value for the specified key, if any; otherwise default(TValue) . Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutIfAbsentAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutIfAbsentAsync.html",
    "title": "PutIfAbsentAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutIfAbsentAsync Method PutIfAbsentAsync(TKey, TValue) Adds an entry if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value) Parameters TKey key A key. TValue value The value. Returns Task <TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value never expires. The value becomes idle after the server-configured idle time. This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. PutIfAbsentAsync(TKey, TValue, TimeSpan) Adds an entry with a time-to-live if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Task <TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. PutIfAbsentAsync(TKey, TValue, TimeSpan, TimeSpan) Adds an entry with a time-to-live and a max-idle if no entry with the key already exists. Returns the new value, or the existing value if the entry already exists. Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Task <TValue> The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle. This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutTransientAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.PutTransientAsync.html",
    "title": "PutTransientAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutTransientAsync Method PutTransientAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. Declaration Task PutTransientAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Task Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. If the dictionary has a MapStore attached, the entry is added to the store but not persisted. Flushing the store is required to make sure that the entry is actually persisted. Time resolution for is seconds. The given value is rounded to the next closest second value. PutTransientAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry without calling the MapStore on the server side, if defined. Declaration Task PutTransientAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Task The value for the key. This will be either the existing value for the key if the entry already exists, or the new value if the no entry with the key already existed. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is i.e. 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle. If the dictionary has a MapStore attached, the entry is added to the store but not persisted. Flushing the store is required to make sure that the entry is actually persisted. The value is automatically expired, evicted and removed after the timeToLive has elapsed. Time resolution for is seconds. The given value is rounded to the next closest second value."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAllAsync.html",
    "title": "RemoveAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAllAsync Method RemoveAllAsync(IPredicate) Removes all entries which match with the supplied predicate. Declaration Task RemoveAllAsync(IPredicate predicate) Parameters IPredicate predicate A predicate used to select entries to be removed. Returns Task A task that will complete when entries have been removed. Remarks This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Removes an entry. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key The key. TValue value The value. Returns Task < Boolean > true if an entry with the specified key and value was removed; otherwise false . Remarks This method removes an entry if the key and the value both match the specified key and value. This method does not consider the removed value at all, which breaks the events contract: any event that would be filtered on the value (for instance via a predicate), would not trigger here."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveInterceptorAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.RemoveInterceptorAsync.html",
    "title": "RemoveInterceptorAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveInterceptorAsync Method RemoveInterceptorAsync(String) Removes the interceptor that identified by id. Declaration Task<bool> RemoveInterceptorAsync(string id) Parameters String id The identifier of the interceptor. Returns Task < Boolean > true if registration is removed, false otherwise"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ReplaceAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.ReplaceAsync.html",
    "title": "ReplaceAsync Method | Hazelcast .NET Documentation",
    "keywords": "ReplaceAsync Method ReplaceAsync(TKey, TValue) Updates an entry if it exists. Declaration Task<TValue> ReplaceAsync(TKey key, TValue newValue) Parameters TKey key A key. TValue newValue The new value. Returns Task <TValue> The existing value, if any; otherwise default(TValue) . Remarks If an existing entry with the specified key is found, then its value is updated with the new value, and the existing value is returned. Otherwise, nothing happens. This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store. ReplaceAsync(TKey, TValue, TValue) Updates an entry if it exists, and its value is equal to comparisonValue . Declaration Task<bool> ReplaceAsync(TKey key, TValue newValue, TValue comparisonValue) Parameters TKey key A key. TValue newValue The new value. TValue comparisonValue The value that is compared with the value of the entry. Returns Task < Boolean > true if the entry was updated; otherwise false . Remarks If an existing entry with the specified key and expected value is found, then its value is updated with the new value. Otherwise, nothing happens. This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any. If write-through persistence is configured, before the value is stored in memory, MapStore.store is invoked to write the value to the store."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.SetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(TKey, TValue) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task A task that will complete when the entry has been added or updated. Remarks The value has an infinite time-to-live. The value becomes idle after the server-configured idle time. SetAsync(TKey, TValue, TimeSpan) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Task A task that will complete when the entry has been added or updated. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value becomes idle after the server-configured idle time. SetAsync(TKey, TValue, TimeSpan, TimeSpan) Sets (adds or updates) an entry. Declaration Task SetAsync(TKey key, TValue value, TimeSpan timeToLive, TimeSpan maxIdle) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). TimeSpan maxIdle A max-idle time (0ms to never become idle). Returns Task A task that will complete when the entry has been added or updated. Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The value is considered idle after the maxIdle has elapsed. If it is 0ms, the value never becomes idle."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Action < MapEventHandlers <TKey, TValue>> events An event handlers collection builder. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Action < MapEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, IPredicate, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, IPredicate predicate, bool includeValues = true, object state = null) Parameters Action < MapEventHandlers <TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. Remarks Note that some methods such as DeleteAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details. SubscribeAsync(Action<MapEventHandlers<TKey, TValue>>, TKey, IPredicate, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MapEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, bool includeValues = true, object state = null) Parameters Action < MapEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. Remarks Note that some methods such as DeleteAsync(TKey) may break the events contract in some situations, such as when the predicate refers to the entry value. Refer to the documentation for these methods for more details."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.TryPutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.TryPutAsync.html",
    "title": "TryPutAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryPutAsync Method TryPutAsync(TKey, TValue, TimeSpan) Tries to set (add or update) an entry. Declaration Task<bool> TryPutAsync(TKey key, TValue value, TimeSpan timeToWait) Parameters TKey key A key. TValue value A value. TimeSpan timeToWait How long to wait (-1ms to wait forever; 0ms to not wait at all). Returns Task < Boolean > true if the entry was set; otherwise false . Remarks If the entry is not immediately available, because a lock is set on the key, this will wait for the specified timeToWait for the lock. If the lock cannot be acquired in time, returns null . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.TryRemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.TryRemoveAsync.html",
    "title": "TryRemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryRemoveAsync Method TryRemoveAsync(TKey, TimeSpan) Tries to remove the entry with the given key from this map within the specified time to wait value. Declaration Task<bool> TryRemoveAsync(TKey key, TimeSpan timeToWait = default(TimeSpan)) Parameters TKey key A key. TimeSpan timeToWait How long to wait for a lock on the key (-1ms to wait forever; 0ms to not wait at all). Returns Task < Boolean > true if the entry was removed; otherwise false . Remarks If the key is already locked by another thread and/or member, then this operation will wait for the timeToWait for acquiring the lock. If the key is still locked, this operation returns false . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. The operation also returns false when no entry with the specified key exists."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if a subscription with the specified identifier was removed successfully; otherwise, if no subscription was found with the specified identifier, false . Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.UpdateTimeToLive.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMap-2.UpdateTimeToLive.html",
    "title": "UpdateTimeToLive Method | Hazelcast .NET Documentation",
    "keywords": "UpdateTimeToLive Method UpdateTimeToLive(TKey, TimeSpan) Updates the time-to-live of an entry. Declaration Task<bool> UpdateTimeToLive(TKey key, TimeSpan timeToLive) Parameters TKey key A key. TimeSpan timeToLive A time to live (0ms to live forever; -1ms to use the server-configured value). Returns Task < Boolean > true if the entry exists and its time-to-live value is changed; otherwise false . Remarks The value is automatically expired, evicted and removed after the timeToLive has elapsed. If timeToLive is i.e. 0ms, the value is retained indefinitely. If it is -1ms, it lives for the duration of the server-configured time-to-live. The new time-to-live value is valid starting from the time this operation is invoked, not since the time the entry was created. If the entry does not exist or is already expired, this call has no effect. If there is no entry with key key or is already expired, this call makes no changes to entries stored in this dictionary. Time resolution for is seconds. The given value is rounded to the next closest second value."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ClearAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the map by deleting all entries. Declaration Task ClearAsync() Returns Task A task that will complete when the map has been cleared."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsKeyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Determines whether this map contains an entry for the specified key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key The key. Returns Task < Boolean > true if the specified key contains key; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsValueAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.ContainsValueAsync.html",
    "title": "ContainsValueAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsValueAsync Method ContainsValueAsync(TValue) Determines whether this map contains one or more keys to the specified value. Declaration Task<bool> ContainsValueAsync(TValue value) Parameters TValue value The value. Returns Task < Boolean > true if this map contains one or more keys to the specified value; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Gets the value for the specified key. Declaration Task<TValue> GetAsync(TKey key) Parameters TKey key The key. Returns Task <TValue> The value for the specified key, if any; otherwise default(TValue) . Remarks This methods interacts with the server-side MapStore . If no value for the specified key is found in memory, MapLoader.load(...) is invoked to try to load the value from the MapStore backing the map, if any."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetEntriesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetEntriesAsync.html",
    "title": "GetEntriesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntriesAsync Method GetEntriesAsync() Gets a IReadOnlyDictionary<TKey,TValue> of the entries contained in this map. Declaration Task<IReadOnlyDictionary<TKey, TValue>> GetEntriesAsync() Returns Task < IReadOnlyDictionary <TKey, TValue>> A IReadOnlyDictionary<TKey,TValue> of the IHMapBase<TKey, TValue> in this map. Remarks This method does not interact with the server-side MapStore . It returns the entries found in memory, but does not look for more entries in the MapStore backing the map, if any."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetKeysAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Gets a IReadOnlyCollection<T> of the keys contained in this map. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Task < IReadOnlyCollection <TKey>> A IReadOnlyCollection<T> of the keys contained in this map. Remarks This method does not interact with the server-side MapStore . It returns the keys found in memory, but does not look for more keys in the MapStore backing the map, if any."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Gets the number of entries contained in this map. Declaration Task<int> GetSizeAsync() Returns Task < Int32 > The number of entries contained in this map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetValuesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Gets a IReadOnlyCollection<T> of the values contained in this map. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Task < IReadOnlyCollection <TValue>> A IReadOnlyCollection<T> of the values contained in this map. Remarks This method does not interact with the server-side MapStore . It returns the values found in memory, but does not look for more values in the MapStore backing the map, if any."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.html",
    "title": "IHMapBase<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHMapBase<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base interface for various Hazelcast distributed dictionaries. public interface IHMapBase<TKey, TValue> : IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey The type of keys in the map. TValue The type of values in the map. Methods ClearAsync() Clears the map by deleting all entries. ContainsKeyAsync(TKey) Determines whether this map contains an entry for the specified key. ContainsValueAsync(TValue) Determines whether this map contains one or more keys to the specified value. GetAsync(TKey) Gets the value for the specified key. GetEntriesAsync() Gets a IReadOnlyDictionary<TKey,TValue> of the entries contained in this map. GetKeysAsync() Gets a IReadOnlyCollection<T> of the keys contained in this map. GetSizeAsync() Gets the number of entries contained in this map. GetValuesAsync() Gets a IReadOnlyCollection<T> of the values contained in this map. IsEmptyAsync() Determines whether this map contains no entries. PutAsync(TKey, TValue) Sets (adds or updates) an entry, and returns the previous value, if any. PutAsync(TKey, TValue, TimeSpan) RemoveAsync(TKey) Removes an entry, and returns the removed value, if any. SetAllAsync(IDictionary<TKey, TValue>) Sets (adds or updates) entries. See Also IHMap <TKey, TValue> IHReplicatedMap <TKey, TValue>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.IsEmptyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Determines whether this map contains no entries. Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if this map contains no entries; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(TKey, TValue) Sets (adds or updates) an entry, and returns the previous value, if any. Declaration Task<TValue> PutAsync(TKey key, TValue value) Parameters TKey key The key. TValue value The value. Returns Task <TValue> The previous value for the specified key, if any; otherwise default(TValue) . PutAsync(TKey, TValue, TimeSpan) Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key TValue value TimeSpan timeToLive Returns Task <TValue>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey) Removes an entry, and returns the removed value, if any. Declaration Task<TValue> RemoveAsync(TKey key) Parameters TKey key The key. Returns Task <TValue> The removed value, if any; otherwise default(TValue) ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.SetAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMapBase-2.SetAllAsync.html",
    "title": "SetAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAllAsync Method SetAllAsync(IDictionary<TKey, TValue>) Sets (adds or updates) entries. Declaration Task SetAllAsync(IDictionary<TKey, TValue> entries) Parameters IDictionary <TKey, TValue> entries The entries. Returns Task A task that will complete when entries have been added or updated."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ClearAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ClearAsync.html",
    "title": "ClearAsync Method | Hazelcast .NET Documentation",
    "keywords": "ClearAsync Method ClearAsync() Clears the multi-map. Removes all key-value pairs. Declaration Task ClearAsync() Returns Task"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsEntryAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsEntryAsync.html",
    "title": "ContainsEntryAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsEntryAsync Method ContainsEntryAsync(TKey, TValue) Returns whether the multi-map contains the given key-value pair. Declaration Task<bool> ContainsEntryAsync(TKey key, TValue value) Parameters TKey key the key whose existence is checked. TValue value the value whose existence is checked. Returns Task < Boolean > true if the multi-map contains the key-value pair, false otherwise."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsKeyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Returns whether the multi-map contains an entry with the key. Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key the key whose existence is checked. Returns Task < Boolean > true if the multi-map contains an entry with the key, false otherwise."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsValueAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.ContainsValueAsync.html",
    "title": "ContainsValueAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsValueAsync Method ContainsValueAsync(TValue) Returns whether the multi-map contains an entry with the value. Declaration Task<bool> ContainsValueAsync(TValue value) Parameters TValue value the value whose existence is checked. Returns Task < Boolean > true if the multi-map contains an entry with the value, false otherwise."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.DeleteAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.DeleteAsync.html",
    "title": "DeleteAsync Method | Hazelcast .NET Documentation",
    "keywords": "DeleteAsync Method DeleteAsync(TKey) Removes all the entries with the given key. Declaration Task DeleteAsync(TKey key) Parameters TKey key the key of the entries to remove Returns Task"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Returns the collection of values associated with the key. Declaration Task<IReadOnlyCollection<TValue>> GetAsync(TKey key) Parameters TKey key the key whose associated values are to be returned Returns Task < IReadOnlyCollection <TValue>> the collection of the values associated with the key."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetEntriesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetEntriesAsync.html",
    "title": "GetEntriesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetEntriesAsync Method GetEntriesAsync() Returns the set of key-value pairs in the multi-map. Declaration Task<IReadOnlyCollection<KeyValuePair<TKey, TValue>>> GetEntriesAsync() Returns Task < IReadOnlyCollection < KeyValuePair <TKey, TValue>>> the collection of key-value pairs in the multi-map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetKeysAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Returns the set of keys in the multi-map. Declaration Task<IReadOnlyCollection<TKey>> GetKeysAsync() Returns Task < IReadOnlyCollection <TKey>> the collection of keys in the multi-map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Returns the number of key-value pairs in the multi-map. Declaration Task<int> GetSizeAsync() Returns Task < Int32 > the number of key-value pairs in the multi-map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValueCountAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValueCountAsync.html",
    "title": "GetValueCountAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValueCountAsync Method GetValueCountAsync(TKey) Returns number of values matching to given key in the multi-map. Declaration Task<int> GetValueCountAsync(TKey key) Parameters TKey key the key whose values count are to be returned Returns Task < Int32 > number of values matching to given key in the multi-map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValuesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Returns the collection of values in the multi-map. Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Task < IReadOnlyCollection <TValue>> the collection of values in the multi-map."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.html",
    "title": "IHMultiMap<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHMultiMap<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed map whose keys can be associated with multiple values. public interface IHMultiMap<TKey, TValue> : IDistributedObject, IAsyncDisposable, IKeyLockable<TKey>, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IKeyLockable<TKey>.LockAsync(TKey) IKeyLockable<TKey>.LockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan) IKeyLockable<TKey>.TryLockAsync(TKey, TimeSpan, TimeSpan) IKeyLockable<TKey>.IsLockedAsync(TKey) IKeyLockable<TKey>.UnlockAsync(TKey) IKeyLockable<TKey>.ForceUnlockAsync(TKey) IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey TValue Remarks IHMultiMap can be configured on Server side to allow duplicate values or not for its values collection Methods ClearAsync() Clears the multi-map. Removes all key-value pairs. ContainsEntryAsync(TKey, TValue) Returns whether the multi-map contains the given key-value pair. ContainsKeyAsync(TKey) Returns whether the multi-map contains an entry with the key. ContainsValueAsync(TValue) Returns whether the multi-map contains an entry with the value. DeleteAsync(TKey) Removes all the entries with the given key. GetAsync(TKey) Returns the collection of values associated with the key. GetEntriesAsync() Returns the set of key-value pairs in the multi-map. GetKeysAsync() Returns the set of keys in the multi-map. GetSizeAsync() Returns the number of key-value pairs in the multi-map. GetValueCountAsync(TKey) Returns number of values matching to given key in the multi-map. GetValuesAsync() Returns the collection of values in the multi-map. PutAsync(TKey, TValue) Stores a key-value pair in the multi-map. RemoveAsync(TKey) Removes all the entries with the given key. RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-map. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(TKey, TValue) Stores a key-value pair in the multi-map. Declaration Task<bool> PutAsync(TKey key, TValue value) Parameters TKey key the key to be stored TValue value the value to be stored Returns Task < Boolean > true if size of the multi-map is increased, false otherwise. Remarks This method uses GetHashCode and Equals of binary form of the key , not the actual implementations of GetHashCode and Equals defined in key 's class."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Removes the given key value pair from the multi-map. Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key the key of the entry to remove TValue value the value of the entry to remove Returns Task < Boolean > true if the size of the multi-map changed after the remove operation, false otherwise. RemoveAsync(TKey) Removes all the entries with the given key. Declaration Task<IReadOnlyCollection<TValue>> RemoveAsync(TKey key) Parameters TKey key the key of the entries to remove Returns Task < IReadOnlyCollection <TValue>> the collection of removed values associated with the given key"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>> events, bool includeValues = true, object state = null) Parameters Action < MultiMapEventHandlers <TKey, TValue>> events An event handlers collection builder. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>>, TKey, Boolean, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<MultiMapEventHandlers<TKey, TValue>> events, TKey key, bool includeValues = true, object state = null) Parameters Action < MultiMapEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Boolean includeValues Whether to include values in event arguments. Object state A state object. Returns Task < Guid > The unique identifier of the subscription."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHMultiMap-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, event handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.DrainToAsync.html",
    "title": "DrainToAsync Method | Hazelcast .NET Documentation",
    "keywords": "DrainToAsync Method DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items) Parameters ICollection <T> items the collection to transfer elements into Returns Task < Int32 > the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown. DrainToAsync(ICollection<T>, Int32) Removes at most the given number of available elements from this queue and adds them to the given collection. Declaration Task<int> DrainToAsync(ICollection<T> items, int maxElements) Parameters ICollection <T> items the collection to transfer elements into Int32 maxElements the maximum number of elements to transfer Returns Task < Int32 > the number of elements transferred Remarks A failure encountered while attempting to Add elements to collection items may result in elements being in neither, either or both collections when the associated exception is thrown."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.GetElementAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.GetElementAsync.html",
    "title": "GetElementAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetElementAsync Method GetElementAsync() Retrieves, but does not remove, the head of this queue, or throws if this queue is empty. Declaration Task<T> GetElementAsync() Returns Task <T> the head of this queue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.GetRemainingCapacityAsync.html",
    "title": "GetRemainingCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRemainingCapacityAsync Method GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. Declaration Task<int> GetRemainingCapacityAsync() Returns Task < Int32 > the remaining capacity Remarks Note that you cannot always tell if an attempt to insert an element will succeed by inspecting GetRemainingCapacityAsync() because it may be the case that another thread is about to insert or remove an element."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.html",
    "title": "IHQueue<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHQueue<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, blocking, distributed, non-partitioned and observable queue. public interface IHQueue<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHQueue is not a partitioned data-structure. Entire contents of an IHQueue is stored on a single machine (and in the backup). The IHQueue will not scale by adding more members to the cluster. Methods DrainToAsync(ICollection<T>) Removes all available elements from this queue and adds them to the given collection. DrainToAsync(ICollection<T>, Int32) Removes at most the given number of available elements from this queue and adds them to the given collection. GetElementAsync() Retrieves, but does not remove, the head of this queue, or throws if this queue is empty. GetRemainingCapacityAsync() Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or MaxValue if there is no intrinsic limit. OfferAsync(T, TimeSpan) Tries to enqueue an item. PeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. PollAsync(TimeSpan) Tries to dequeue an item. PutAsync(T) Enqueues an item. TakeAsync() Dequeues the head item."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.OfferAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.OfferAsync.html",
    "title": "OfferAsync Method | Hazelcast .NET Documentation",
    "keywords": "OfferAsync Method OfferAsync(T, TimeSpan) Tries to enqueue an item. Declaration Task<bool> OfferAsync(T item, TimeSpan timeToWait = default(TimeSpan)) Parameters T item The item to enqueue. TimeSpan timeToWait How long to wait for space (-1ms to wait forever; 0ms to not wait at all). Returns Task < Boolean > true if the element was added to this queue; otherwise false . Remarks If space is not immediately available, this will wait for the specified timeToWait for space to become available. If space does not become available in time, returns false . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PeekAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PeekAsync.html",
    "title": "PeekAsync Method | Hazelcast .NET Documentation",
    "keywords": "PeekAsync Method PeekAsync() Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty. Declaration Task<T> PeekAsync() Returns Task <T> the head of this queue, or null if this queue is empty"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PollAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PollAsync.html",
    "title": "PollAsync Method | Hazelcast .NET Documentation",
    "keywords": "PollAsync Method PollAsync(TimeSpan) Tries to dequeue an item. Declaration Task<T> PollAsync(TimeSpan timeToWait = default(TimeSpan)) Parameters TimeSpan timeToWait How long to wait for an item (-1ms to wait forever; 0ms to not wait at all). Returns Task <T> The item, or null if not item could be dequeued within the specified timeToWait . Remarks If an item is not immediately available, this will wait for the specified timeToWait for an item to become available. If an item does not become available in time, returns null . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(T) Enqueues an item. Declaration Task PutAsync(T item) Parameters T item The item to enqueue. Returns Task Remarks If space is not immediately available, this will wait indefinitely for space to become available."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.TakeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHQueue-1.TakeAsync.html",
    "title": "TakeAsync Method | Hazelcast .NET Documentation",
    "keywords": "TakeAsync Method TakeAsync() Dequeues the head item. Declaration Task<T> TakeAsync() Returns Task <T> The head item. Remarks If an item is not immediately available, this will wait indefinitely for an item to become available."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.html",
    "title": "IHReplicatedMap<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHReplicatedMap<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a distributed map with weak consistency and values locally stored on every node of the cluster. public interface IHReplicatedMap<TKey, TValue> : IHMapBase<TKey, TValue>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<KeyValuePair<TKey, TValue>> Inherited Members IHMapBase<TKey, TValue>.GetAsync(TKey) IHMapBase<TKey, TValue>.GetKeysAsync() IHMapBase<TKey, TValue>.GetValuesAsync() IHMapBase<TKey, TValue>.GetEntriesAsync() IHMapBase<TKey, TValue>.GetSizeAsync() IHMapBase<TKey, TValue>.IsEmptyAsync() IHMapBase<TKey, TValue>.ContainsKeyAsync(TKey) IHMapBase<TKey, TValue>.ContainsValueAsync(TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue) IHMapBase<TKey, TValue>.PutAsync(TKey, TValue, TimeSpan) IHMapBase<TKey, TValue>.SetAllAsync(IDictionary<TKey, TValue>) IHMapBase<TKey, TValue>.ClearAsync() IHMapBase<TKey, TValue>.RemoveAsync(TKey) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<KeyValuePair<TKey, TValue>>.GetAsyncEnumerator(CancellationToken) Type Parameters TKey the type of keys maintained by this map TValue the type of mapped values Remarks Whenever a value is written asynchronously, the new value will be internally distributed to all existing cluster members, and eventually every node will have the new value. When a new node joins the cluster, the new node initially will request existing values from older nodes and replicate them locally. Methods SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, IPredicate, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, IPredicate, Object) Subscribes to events. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, Object) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, object state = null) Parameters Action < ReplicatedMapEventHandlers <TKey, TValue>> events An event handlers collection builder. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, TKey key, object state = null) Parameters Action < ReplicatedMapEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, IPredicate, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, IPredicate predicate, object state = null) Parameters Action < ReplicatedMapEventHandlers <TKey, TValue>> events An event handlers collection builder. IPredicate predicate A predicate to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription. SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>>, TKey, IPredicate, Object) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<ReplicatedMapEventHandlers<TKey, TValue>> events, TKey key, IPredicate predicate, object state = null) Parameters Action < ReplicatedMapEventHandlers <TKey, TValue>> events An event handlers collection builder. TKey key A key to filter events. IPredicate predicate A predicate to filter events. Object state A state object. Returns Task < Guid > The unique identifier of the subscription."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHReplicatedMap-2.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > true if subscription is removed successfully, false if there is no such subscription Remarks When this method completes, handler will stop receiving events immediately. Member side event subscriptions will eventually be removed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAllAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAllAsync.html",
    "title": "AddAllAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAllAsync Method AddAllAsync(ICollection<TItem>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. Declaration Task<long> AddAllAsync(ICollection<TItem> items, OverflowPolicy overflowPolicy) Parameters ICollection <TItem> items the batch of items to Add. OverflowPolicy overflowPolicy overflow policy to use Returns Task < Int64 > the ICompletableFuture to synchronize on completion. Remarks Adds all the items of a collection to the tail of the Ringbuffer. A addAll is likely to outperform multiple calls to due to better io utilization and a reduced number of executed operations. If the batch is empty, the call is ignored. When the collection is not empty, the content is copied into a different data-structure. This means that: after this call completes, the collection can be re-used. the collection doesn't need to be serializable If the collection is larger than the capacity of the ringbuffer, then the items that were written first will be overwritten. Therefor this call will not block. The items are inserted in the order of the Iterator of the collection. If an addAll is executed concurrently with an Add or addAll, no guarantee is given that items are contiguous. The result of the future contains the sequenceId of the last written item Exceptions ArgumentNullException if batch is null, or if an item in this batch is null or if overflowPolicy is null ArgumentException if collection is empty"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Adds an item to the tail of the Ringbuffer. Declaration Task<long> AddAsync(TItem item) Parameters TItem item the item to Add. Returns Task < Int64 > the sequence of the added item. Remarks Adds an item to the tail of the Ringbuffer. If there is no space in the Ringbuffer, the Add will overwrite the oldest item in the ringbuffer no matter what the ttl is. For more control on this behavior, check the AddAsync(TItem) and the OverflowPolicy . The returned value is the sequence of the added item. Using this sequence you can read the added item. Using the sequence as id This sequence will always be unique for this Ringbuffer instance so it can be used as a unique id generator if you are publishing items on this Ringbuffer. However you need to take care of correctly determining an initial id when any node uses the ringbuffer for the first time. The most reliable way to do that is to write a dummy item into the ringbuffer and use the returned sequence as initial id. On the reading side, this dummy item should be discard. Please keep in mind that this id is not the sequence of the item you are about to publish but from a previously published item. So it can't be used to find that item. Exceptions ArgumentNullException if item is null. See Also AddAsync(TItem) AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } Declaration Task<long> AddAsync(TItem item, OverflowPolicy overflowPolicy) Parameters TItem item the item to Add OverflowPolicy overflowPolicy the OverflowPolicy to use. Returns Task < Int64 > the sequenceId of the added item, or -1 if the Add failed. Exceptions ArgumentNullException if item or overflowPolicy is null."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetCapacityAsync.html",
    "title": "GetCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetCapacityAsync Method GetCapacityAsync() Returns the capacity of this Ringbuffer. Declaration Task<long> GetCapacityAsync() Returns Task < Int64 > the capacity."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetHeadSequenceAsync.html",
    "title": "GetHeadSequenceAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetHeadSequenceAsync Method GetHeadSequenceAsync() Returns the sequence of the head. Declaration Task<long> GetHeadSequenceAsync() Returns Task < Int64 > the sequence of the head. Remarks Returns the sequence of the head. The head is the side of the ringbuffer where the oldest items in the ringbuffer are found. If the RingBuffer is empty, the head will be one more than the tail. The initial value of the head is 0 (1 more than tail)."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetRemainingCapacityAsync.html",
    "title": "GetRemainingCapacityAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRemainingCapacityAsync Method GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. Declaration Task<long> GetRemainingCapacityAsync() Returns Task < Int64 > the remaining capacity. Remarks Returns the remaining capacity of the ringbuffer. The returned value could be stale as soon as it is returned. If ttl is not set, the remaining capacity will always be the capacity."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Returns number of items in the ringbuffer. Declaration Task<long> GetSizeAsync() Returns Task < Int64 > the size. Remarks Returns number of items in the ringbuffer. If no ttl is set, the size will always be equal to capacity after the head completed the first loop around the ring. This is because no items are getting retired."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.GetTailSequenceAsync.html",
    "title": "GetTailSequenceAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetTailSequenceAsync Method GetTailSequenceAsync() Returns the sequence of the tail. Declaration Task<long> GetTailSequenceAsync() Returns Task < Int64 > the sequence of the tail. Remarks Returns the sequence of the tail. The tail is the side of the ringbuffer where the items are added to. The initial value of the tail is -1."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.html",
    "title": "IHRingBuffer<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHRingBuffer<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll A Ringbuffer is a data-structure where the content is stored in a ring like structure. public interface IHRingBuffer<TItem> : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Remarks A Ringbuffer is a data-structure where the content is stored in a ring like structure. A ringbuffer has a capacity so it won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest item in the ringbuffer is overwritten. The ringbuffer has 2 always incrementing sequences: tailSequence: this is the side where the youngest item is found. So the tail is the side of the ringbuffer where items are added to. headSequence: this is the side where the oldest items are found. So the head is the side where items gets discarded. The items in the ringbuffer can be found by a sequence that is in between (inclusive) the head and tail sequence. If data is read from a ringbuffer with a sequence that is smaller than the headSequence, it means that the data is not available anymore and a is thrown. A Ringbuffer currently is not a distributed data-structure. So all data is stored in a single partition; comparable to the IQueue implementation. But we'll provide an option to partition the data in the near future. A Ringbuffer can be used in a similar way as a queue, but one of the key differences is that a queue.take is destructive, meaning that only 1 thread is able to take an item. A ringbuffer.read is not destructive, so you can have multiple threads reading the same item multiple times. The Ringbuffer is the backing data-structure for the reliable IHTopic<T> implementation. Properties MaxBatchSize Methods AddAllAsync(ICollection<TItem>, OverflowPolicy) Adds all the items of a collection to the tail of the Ringbuffer. AddAsync(TItem) Adds an item to the tail of the Ringbuffer. AddAsync(TItem, OverflowPolicy) Asynchronously writes an item with a configurable OverflowPolicy . If there is space in the ringbuffer, the call will return the sequence of the written item. If there is no space, it depends on the overflow policy what happens: Overwrite : we just overwrite the oldest item in the ringbuffer and we violate the ttl Fail : we return -1 The reason that FAIL exist is to give the opportunity to obey the ttl. If blocking behavior is required, this can be implemented using retrying in combination with a exponential backoff. Example: int sleepMs = 100; for (; ; ) { long result = ringbuffer.AddAsync(item, OverflowPolicy.Fail).Result; if (result != -1) { break; } Thread.Sleep(sleepMs); sleepMs = Math.Min(5000, sleepMs * 2); } GetCapacityAsync() Returns the capacity of this Ringbuffer. GetHeadSequenceAsync() Returns the sequence of the head. GetRemainingCapacityAsync() Returns the remaining capacity of the ringbuffer. GetSizeAsync() Returns number of items in the ringbuffer. GetTailSequenceAsync() Returns the sequence of the tail. ReadManyAsync(Int64, Int32, Int32) Reads a batch of items from the Ringbuffer. ReadOneAsync(Int64) Reads one item from the Ringbuffer."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.MaxBatchSize.html",
    "title": "MaxBatchSize Property | Hazelcast .NET Documentation",
    "keywords": "MaxBatchSize Property MaxBatchSize Declaration int MaxBatchSize { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadManyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadManyAsync.html",
    "title": "ReadManyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ReadManyAsync Method ReadManyAsync(Int64, Int32, Int32) Reads a batch of items from the Ringbuffer. Declaration Task<IReadOnlyList<TItem>> ReadManyAsync(long startSequence, int minCount, int maxCount) Parameters Int64 startSequence the startSequence of the first item to read. Int32 minCount the minimum number of items to read. Int32 maxCount the maximum number of items to read. Returns Task < IReadOnlyList <TItem>> a future containing the items read. Remarks Reads a batch of items from the Ringbuffer. If the number of available items after the first read item is smaller than the maxCount, these items are returned. So it could be the number of items read is smaller than the maxCount. If there are less items available than minCount, then this call blocks. Reading a batch of items is likely to perform better because less overhead is involved. Exceptions ArgumentException if startSequence is smaller than 0 or if startSequence larger than or if minCount smaller than 0 or if minCount larger than maxCount, or if maxCount larger than the capacity of the ringbuffer or if maxCount larger than 1000 (to prevent overload)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadOneAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHRingBuffer-1.ReadOneAsync.html",
    "title": "ReadOneAsync Method | Hazelcast .NET Documentation",
    "keywords": "ReadOneAsync Method ReadOneAsync(Int64) Reads one item from the Ringbuffer. Declaration ValueTask<TItem> ReadOneAsync(long sequence) Parameters Int64 sequence the sequence of the item to read. Returns ValueTask <TItem> the read item Remarks Reads one item from the Ringbuffer. If the sequence is one beyond the current tail, this call blocks until an item is added. This means that the ringbuffer can be processed using the following idiom: Ringbuffer<String> ringbuffer = hz.GetRingbuffer(\"rb\"); long seq = ringbuffer.HeadSequence(); while(true){ String item = ringbuffer.ReadOne(seq); seq++; ... process item } This method is not destructive unlike e.g. a queue.take. So the same item can be read by multiple readers or it can be read multiple times by the same reader. Currently it isn't possible to control how long this call is going to block. In the future we could Add e.g. tryReadOne(long sequence, long timeout, TimeUnit unit). Exceptions ArgumentException if sequence is smaller than 0 or larger than +1. Exception if the call is interrupted while blocking."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHSet-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHSet-1.html",
    "title": "IHSet<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHSet<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines a concurrent, distributed, non-partitioned and listenable set public interface IHSet<T> : IHCollection<T>, IDistributedObject, IAsyncDisposable, IAsyncEnumerable<T> Inherited Members IHCollection<T>.AddAsync(T) IHCollection<T>.AddAll<TItem>(ICollection<TItem>) IHCollection<T>.GetAllAsync() IHCollection<T>.GetSizeAsync() IHCollection<T>.IsEmptyAsync() IHCollection<T>.ContainsAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ContainsAsync(T) IHCollection<T>.RemoveAsync(T) IHCollection<T>.RemoveAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.RetainAllAsync<TItem>(ICollection<TItem>) IHCollection<T>.ClearAsync() IHCollection<T>.SubscribeAsync(Action<CollectionItemEventHandlers<T>>, Boolean, Object) IHCollection<T>.UnsubscribeAsync(Guid) IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() IAsyncEnumerable<T>.GetAsyncEnumerator(CancellationToken) Type Parameters T Remarks The Hazelcast IHSet is not a partitioned data-structure. Entire contents of an IHSet is stored on a single machine (and in the backup). The IHSet will not scale by adding more members to the cluster."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.html",
    "title": "IHTopic<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTopic<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. public interface IHTopic<T> : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters T Remarks Hazelcast provides distribution mechanism for publishing messages that are delivered to multiple subscribers which is also known as publish/subscribe (pub/sub) messaging model. Publish and subscriptions are cluster-wide. When a member subscribes for a topic, it is actually registering for messages published by any member in the cluster, including the new members joined after you added the listener. Messages are ordered, meaning, listeners(subscribers) will process the messages in the order they are actually published. If cluster member M publishes messages m1, m2, m3...mn to a topic T, then Hazelcast makes sure that all of the subscribers of topic T will receive and process m1, m2, m3...mn in order. Methods PublishAsync(T) Publishes the message to all subscribers of this topic SubscribeAsync(Action<TopicEventHandlers<T>>, Object) Subscribes to this topic. UnsubscribeAsync(Guid) Stops receiving messages for the given message listener."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.PublishAsync.html",
    "title": "PublishAsync Method | Hazelcast .NET Documentation",
    "keywords": "PublishAsync Method PublishAsync(T) Publishes the message to all subscribers of this topic Declaration Task PublishAsync(T message) Parameters T message Returns Task"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<TopicEventHandlers<T>>, Object) Subscribes to this topic. Declaration Task<Guid> SubscribeAsync(Action<TopicEventHandlers<T>> events, object state = null) Parameters Action < TopicEventHandlers <T>> events Object state A state object. Returns Task < Guid >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTopic-1.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Stops receiving messages for the given message listener. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId Id of listener registration. Returns ValueTask < Boolean > Whether the operation completed successfully. Remarks Stops receiving messages for the given message listener. If the given listener already removed, this method does nothing."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Add new item to transactional list Declaration Task<bool> AddAsync(TItem item) Parameters TItem item item Returns Task < Boolean > true if item is added successfully"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Returns the size of the list Declaration Task<int> GetSizeAsync() Returns Task < Int32 > size"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.html",
    "title": "IHTxList<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxList<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public interface IHTxList<TItem> Type Parameters TItem Methods AddAsync(TItem) Add new item to transactional list GetSizeAsync() Returns the size of the list RemoveAsync(TItem) Add item from transactional list"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxList-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TItem) Add item from transactional list Declaration Task<bool> RemoveAsync(TItem item) Parameters TItem item item Returns Task < Boolean > true if item is remove successfully"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.ContainsKeyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.ContainsKeyAsync.html",
    "title": "ContainsKeyAsync Method | Hazelcast .NET Documentation",
    "keywords": "ContainsKeyAsync Method ContainsKeyAsync(TKey) Transactional implementation of . Declaration Task<bool> ContainsKeyAsync(TKey key) Parameters TKey key Returns Task < Boolean >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.DeleteAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.DeleteAsync.html",
    "title": "DeleteAsync Method | Hazelcast .NET Documentation",
    "keywords": "DeleteAsync Method DeleteAsync(TKey) Transactional implementation of DeleteAsync(TKey) . Declaration Task DeleteAsync(TKey key) Parameters TKey key Returns Task"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Transactional implementation of . Declaration Task<TValue> GetAsync(TKey key) Parameters TKey key Returns Task <TValue>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetForUpdateAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetForUpdateAsync.html",
    "title": "GetForUpdateAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetForUpdateAsync Method GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. Declaration Task<TValue> GetForUpdateAsync(TKey key) Parameters TKey key Returns Task <TValue> Remarks The lock will be released at the end of the transaction (either commit or rollback)."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetKeysAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetKeysAsync.html",
    "title": "GetKeysAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetKeysAsync Method GetKeysAsync() Transactional implementation of . Declaration Task<IReadOnlyList<TKey>> GetKeysAsync() Returns Task < IReadOnlyList <TKey>> All keys. GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate) . Declaration Task<IReadOnlyList<TKey>> GetKeysAsync(IPredicate predicate) Parameters IPredicate predicate An predicate to filter the entries with. Returns Task < IReadOnlyList <TKey>> All keys matching the predicate."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Transactional implementation of GetSizeAsync() . Declaration Task<int> GetSizeAsync() Returns Task < Int32 >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetValuesAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.GetValuesAsync.html",
    "title": "GetValuesAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValuesAsync Method GetValuesAsync() Transactional implementation of . Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync() Returns Task < IReadOnlyCollection <TValue>> GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate) . Declaration Task<IReadOnlyCollection<TValue>> GetValuesAsync(IPredicate predicate) Parameters IPredicate predicate Returns Task < IReadOnlyCollection <TValue>>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.html",
    "title": "IHTxMap<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxMap<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents a transactional distributed map. public interface IHTxMap<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TKey key type TValue Value type Methods ContainsKeyAsync(TKey) Transactional implementation of . DeleteAsync(TKey) Transactional implementation of DeleteAsync(TKey) . GetAsync(TKey) Transactional implementation of . GetForUpdateAsync(TKey) Locks the key and then gets and returns the value to which the specified key is mapped. GetKeysAsync() Transactional implementation of . GetKeysAsync(IPredicate) Transactional implementation of GetKeysAsync(IPredicate) . GetSizeAsync() Transactional implementation of GetSizeAsync() . GetValuesAsync() Transactional implementation of . GetValuesAsync(IPredicate) Transactional implementation of GetValuesAsync(IPredicate) . IsEmptyAsync() Transactional implementation of . PutAsync(TKey, TValue) Transactional implementation of PutAsync(TKey, TValue) . PutAsync(TKey, TValue, TimeSpan) Transactional implementation of PutAsync(TKey, TValue, TimeSpan) . PutIfAbsentAsync(TKey, TValue) Transactional implementation of . RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey) . RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue) . ReplaceAsync(TKey, TValue) Transactional implementation of ReplaceAsync(TKey, TValue) . ReplaceAsync(TKey, TValue, TValue) Transactional implementation of ReplaceAsync(TKey, TValue, TValue) . SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue) ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.IsEmptyAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.IsEmptyAsync.html",
    "title": "IsEmptyAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsEmptyAsync Method IsEmptyAsync() Transactional implementation of . Declaration Task<bool> IsEmptyAsync() Returns Task < Boolean > true if the map does not contain entries; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(TKey, TValue) Transactional implementation of PutAsync(TKey, TValue) . Declaration Task<TValue> PutAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed. PutAsync(TKey, TValue, TimeSpan) Transactional implementation of PutAsync(TKey, TValue, TimeSpan) . Declaration Task<TValue> PutAsync(TKey key, TValue value, TimeSpan timeToLive) Parameters TKey key A key. TValue value A value. TimeSpan timeToLive A time to live. Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.PutIfAbsentAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.PutIfAbsentAsync.html",
    "title": "PutIfAbsentAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutIfAbsentAsync Method PutIfAbsentAsync(TKey, TValue) Transactional implementation of . Declaration Task<TValue> PutIfAbsentAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task <TValue> Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey) Transactional implementation of RemoveAsync(TKey) . Declaration Task<TValue> RemoveAsync(TKey key) Parameters TKey key Returns Task <TValue> Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed. RemoveAsync(TKey, TValue) Transactional implementation of RemoveAsync(TKey, TValue) . Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean > Remarks The removed entry wil be removed only in the current transaction context, until the transaction is committed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.ReplaceAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.ReplaceAsync.html",
    "title": "ReplaceAsync Method | Hazelcast .NET Documentation",
    "keywords": "ReplaceAsync Method ReplaceAsync(TKey, TValue) Transactional implementation of ReplaceAsync(TKey, TValue) . Declaration Task<TValue> ReplaceAsync(TKey key, TValue newValue) Parameters TKey key A key. TValue newValue The new value. Returns Task <TValue> Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed. ReplaceAsync(TKey, TValue, TValue) Transactional implementation of ReplaceAsync(TKey, TValue, TValue) . Declaration Task<bool> ReplaceAsync(TKey key, TValue oldValue, TValue newValue) Parameters TKey key TValue oldValue TValue newValue Returns Task < Boolean > Remarks The updated entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.SetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMap-2.SetAsync.html",
    "title": "SetAsync Method | Hazelcast .NET Documentation",
    "keywords": "SetAsync Method SetAsync(TKey, TValue) Transactional implementation of SetAsync(TKey, TValue) . Declaration Task SetAsync(TKey key, TValue value) Parameters TKey key A key. TValue value A value. Returns Task Remarks The inserted entry wil be visible only in the current transaction context, until the transaction is committed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetAsync.html",
    "title": "GetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetAsync Method GetAsync(TKey) Declaration Task<IReadOnlyCollection<TValue>> GetAsync(TKey key) Parameters TKey key Returns Task < IReadOnlyCollection <TValue>>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Declaration Task<int> GetSizeAsync() Returns Task < Int32 >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetValueCountAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.GetValueCountAsync.html",
    "title": "GetValueCountAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetValueCountAsync Method GetValueCountAsync(TKey) Declaration Task<int> GetValueCountAsync(TKey key) Parameters TKey key Returns Task < Int32 >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.html",
    "title": "IHTxMultiMap<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxMultiMap<TKey, TValue> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of MultiMap public interface IHTxMultiMap<TKey, TValue> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TKey TValue Methods GetAsync(TKey) GetSizeAsync() GetValueCountAsync(TKey) PutAsync(TKey, TValue) RemoveAsync(TKey) RemoveAsync(TKey, TValue)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.PutAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.PutAsync.html",
    "title": "PutAsync Method | Hazelcast .NET Documentation",
    "keywords": "PutAsync Method PutAsync(TKey, TValue) Declaration Task<bool> PutAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxMultiMap-2.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TKey, TValue) Declaration Task<bool> RemoveAsync(TKey key, TValue value) Parameters TKey key TValue value Returns Task < Boolean > RemoveAsync(TKey) Declaration Task<IReadOnlyCollection<TValue>> RemoveAsync(TKey key) Parameters TKey key Returns Task < IReadOnlyCollection <TValue>>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Declaration Task<int> GetSizeAsync() Returns Task < Int32 >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.html",
    "title": "IHTxQueue<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxQueue<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of Queue public interface IHTxQueue<TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Methods GetSizeAsync() OfferAsync(TItem) OfferAsync(TItem, TimeSpan) PeekAsync(TimeSpan) PollAsync(TimeSpan) TakeAsync()"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.OfferAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.OfferAsync.html",
    "title": "OfferAsync Method | Hazelcast .NET Documentation",
    "keywords": "OfferAsync Method OfferAsync(TItem) Declaration Task<bool> OfferAsync(TItem item) Parameters TItem item Returns Task < Boolean > OfferAsync(TItem, TimeSpan) Declaration Task<bool> OfferAsync(TItem item, TimeSpan timeToWait) Parameters TItem item TimeSpan timeToWait Returns Task < Boolean >"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.PeekAsync.html",
    "title": "PeekAsync Method | Hazelcast .NET Documentation",
    "keywords": "PeekAsync Method PeekAsync(TimeSpan) Declaration Task<TItem> PeekAsync(TimeSpan timeToWait = default(TimeSpan)) Parameters TimeSpan timeToWait Returns Task <TItem>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.PollAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.PollAsync.html",
    "title": "PollAsync Method | Hazelcast .NET Documentation",
    "keywords": "PollAsync Method PollAsync(TimeSpan) Declaration Task<TItem> PollAsync(TimeSpan timeToWait = default(TimeSpan)) Parameters TimeSpan timeToWait Returns Task <TItem>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.TakeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxQueue-1.TakeAsync.html",
    "title": "TakeAsync Method | Hazelcast .NET Documentation",
    "keywords": "TakeAsync Method TakeAsync() Declaration Task<TItem> TakeAsync() Returns Task <TItem>"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.AddAsync.html",
    "title": "AddAsync Method | Hazelcast .NET Documentation",
    "keywords": "AddAsync Method AddAsync(TItem) Add new item to transactional set Declaration Task<bool> AddAsync(TItem item) Parameters TItem item Returns Task < Boolean > true if item is added successfully"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.GetSizeAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.GetSizeAsync.html",
    "title": "GetSizeAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSizeAsync Method GetSizeAsync() Returns the size of the set Declaration Task<int> GetSizeAsync() Returns Task < Int32 > size"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.html",
    "title": "IHTxSet<TItem> Interface | Hazelcast .NET Documentation",
    "keywords": "IHTxSet<TItem> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Transactional implementation of IHSet<T> . public interface IHTxSet<in TItem> : ITransactionalObject, IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Type Parameters TItem Methods AddAsync(TItem) Add new item to transactional set GetSizeAsync() Returns the size of the set RemoveAsync(TItem) Add item from transactional set"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IHTxSet-1.RemoveAsync.html",
    "title": "RemoveAsync Method | Hazelcast .NET Documentation",
    "keywords": "RemoveAsync Method RemoveAsync(TItem) Add item from transactional set Declaration Task<bool> RemoveAsync(TItem item) Parameters TItem item Returns Task < Boolean > true if item is remove successfully"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.ForceUnlockAsync.html",
    "title": "ForceUnlockAsync Method | Hazelcast .NET Documentation",
    "keywords": "ForceUnlockAsync Method ForceUnlockAsync(TKey) Force-unlocks an entry. Declaration Task ForceUnlockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the entry has been unlocked. Remarks The entry is unlocked, regardless of the lock owner. This always succeeds, never blocks, and returns immediately."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.html",
    "title": "IKeyLockable<TKey> Interface | Hazelcast .NET Documentation",
    "keywords": "IKeyLockable<TKey> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public interface IKeyLockable<TKey> Type Parameters TKey Methods ForceUnlockAsync(TKey) Force-unlocks an entry. IsLockedAsync(TKey) Determines whether an entry is locked. LockAsync(TKey) Locks an entry. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), TryLockAsync(TKey) Tries to lock an entry immediately. TryLockAsync(TKey, TimeSpan) Tries to lock an entry within a server-side timeout. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), within a server-side timeout. UnlockAsync(TKey) Unlocks an entry."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.IsLockedAsync.html",
    "title": "IsLockedAsync Method | Hazelcast .NET Documentation",
    "keywords": "IsLockedAsync Method IsLockedAsync(TKey) Determines whether an entry is locked. Declaration Task<bool> IsLockedAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task < Boolean > true if the entry is locked; otherwise false ."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.LockAsync.html",
    "title": "LockAsync Method | Hazelcast .NET Documentation",
    "keywords": "LockAsync Method LockAsync(TKey) Locks an entry. Declaration Task LockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will wait indefinitely until the lock can be acquired. Locks are re-entrant, but counted: if a key is locked N times, then it should be unlocked N times before another thread can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. LockAsync(TKey, TimeSpan) Locks an entry for a given time duration (lease time), Declaration Task LockAsync(TKey key, TimeSpan leaseTime) Parameters TKey key The key identifying the entry. TimeSpan leaseTime The lease time. Returns Task A task that will complete when the lock has been acquired. Remarks If the lock is already owned by another owner, this will wait indefinitely until the lock can be acquired. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the specified leaseTime has elapsed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.TryLockAsync.html",
    "title": "TryLockAsync Method | Hazelcast .NET Documentation",
    "keywords": "TryLockAsync Method TryLockAsync(TKey) Tries to lock an entry immediately. Declaration Task<bool> TryLockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task < Boolean > true if the lock was immediately acquired; otherwise false . Remarks If the entry cannot be locked, returns false immediately. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. TryLockAsync(TKey, TimeSpan) Tries to lock an entry within a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait) Parameters TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock (-1ms to wait forever; 0ms to not wait at all). Returns Task < Boolean > true if the lock was acquired; otherwise false . Remarks If the entry cannot be locked after timeToWait has elapsed, returns false . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it. The lock is automatically released after the server-configured maximum lease time has elapsed. TryLockAsync(TKey, TimeSpan, TimeSpan) Tries to lock an entry for a given time duration (lease time), within a server-side timeout. Declaration Task<bool> TryLockAsync(TKey key, TimeSpan timeToWait, TimeSpan leaseTime) Parameters TKey key The key identifying the entry. TimeSpan timeToWait How long to wait for the lock (-1ms to wait forever; 0ms to not wait at all). TimeSpan leaseTime The lease time. Returns Task < Boolean > true if the lock was acquired; otherwise false . Remarks If the entry cannot be locked after timeToWait has elapsed, returns false . If timeToWait is -1ms, waits forever. If it is 0ms, does not wait at all. The lock is automatically released after the specified leaseTime has elapsed. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IKeyLockable-1.UnlockAsync.html",
    "title": "UnlockAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnlockAsync Method UnlockAsync(TKey) Unlocks an entry. Declaration Task UnlockAsync(TKey key) Parameters TKey key The key identifying the entry. Returns Task A task that will complete when the entry has been unlocked. Remarks An entry can be unlocked only by the owner of the lock. Locks are re-entrant, but counted: if an entry is locked N times, then it should be unlocked N times before another owner can lock it."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.HandleAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, MapEventTypes, Int32, Object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, MapEventTypes eventType, int numberOfAffectedEntries, object state) Parameters TSender sender The sender (map) that triggered the event. MemberInfo member The member. Lazy <TKey> key The key. Lazy <TValue> value The value. Lazy <TValue> oldValue The old value. Lazy <TValue> mergeValue The merged value. MapEventTypes eventType The event type. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object. Returns ValueTask"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEntryEventHandler-3.html",
    "title": "IMapEntryEventHandler<TKey, TValue, TSender> Interface | Hazelcast .NET Documentation",
    "keywords": "IMapEntryEventHandler<TKey, TValue, TSender> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a map entry event handler. public interface IMapEntryEventHandler<TKey, TValue, in TSender> : IMapEventHandlerBase Inherited Members IMapEventHandlerBase.EventType Type Parameters TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods HandleAsync(TSender, MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, MapEventTypes, Int32, Object) Handles an event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandler-3.HandleAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandler-3.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(TSender, MemberInfo, Int32, Object) Handles an event. Declaration ValueTask HandleAsync(TSender sender, MemberInfo member, int numberOfAffectedEntries, object state) Parameters TSender sender The sender (map) that triggered the event. MemberInfo member The member. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object. Returns ValueTask"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandler-3.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandler-3.html",
    "title": "IMapEventHandler<TKey, TValue, TSender> Interface | Hazelcast .NET Documentation",
    "keywords": "IMapEventHandler<TKey, TValue, TSender> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a map event handler. public interface IMapEventHandler<TKey, TValue, in TSender> : IMapEventHandlerBase Inherited Members IMapEventHandlerBase.EventType Type Parameters TKey The type of the keys. TValue The type of the values. TSender The type of the sender. Methods HandleAsync(TSender, MemberInfo, Int32, Object) Handles an event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.EventType.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.EventType.html",
    "title": "EventType Property | Hazelcast .NET Documentation",
    "keywords": "EventType Property EventType Gets the handled event type. Declaration MapEventTypes EventType { get; } Property Value MapEventTypes"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapEventHandlerBase.html",
    "title": "IMapEventHandlerBase Interface | Hazelcast .NET Documentation",
    "keywords": "IMapEventHandlerBase Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a generic map event handler. public interface IMapEventHandlerBase Properties EventType Gets the handled event type."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.IMapInterceptor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.IMapInterceptor.html",
    "title": "IMapInterceptor Interface | Hazelcast .NET Documentation",
    "keywords": "IMapInterceptor Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll A place holder interface for com.hazelcast.map.MapInterceptor on server side. public interface IMapInterceptor Remarks it is used to intercept changes to the IHMap , allowing access to the values before and after adding them to it."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.HandleAsync.html",
    "title": "HandleAsync Method | Hazelcast .NET Documentation",
    "keywords": "HandleAsync Method HandleAsync(IHTopic<T>, MemberInfo, Int64, T, Object) Handles an event. Declaration ValueTask HandleAsync(IHTopic<T> sender, MemberInfo member, long publishTime, T payload, object state) Parameters IHTopic <T> sender The IHTopic<T> that triggered the event. MemberInfo member The member. Int64 publishTime The publish time. T payload The topic object carried by the message. Object state A state object. Returns ValueTask"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ITopicEventHandler-1.html",
    "title": "ITopicEventHandler<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ITopicEventHandler<T> Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Specifies a topic event handler. public interface ITopicEventHandler<T> Type Parameters T The topic objects type. Methods HandleAsync(IHTopic<T>, MemberInfo, Int64, T, Object) Handles an event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.html",
    "title": "ITransactionalDistributedObject Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionalDistributedObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Defines the base contract for all transactional Hazelcast distributed objects. public interface ITransactionalDistributedObject : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Properties TransactionId Gets the unique identifier of the transaction."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalDistributedObject.TransactionId.html",
    "title": "TransactionId Property | Hazelcast .NET Documentation",
    "keywords": "TransactionId Property TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Guid"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalObject.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ITransactionalObject.html",
    "title": "ITransactionalObject Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionalObject Interface Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Marker interface for all transactional distributed objects. public interface ITransactionalObject : IDistributedObject, IAsyncDisposable Inherited Members IDistributedObject.ServiceName IDistributedObject.Name IDistributedObject.PartitionKey IDistributedObject.DestroyAsync() IAsyncDisposable.DisposeAsync() Remarks Marker interface for all transactional distributed objects."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapClearedEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapClearedEventArgs.-ctor.html",
    "title": "MapClearedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapClearedEventArgs Constructor MapClearedEventArgs(MemberInfo, Int32, Object) Declaration public MapClearedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member Int32 numberOfAffectedEntries Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapClearedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapClearedEventArgs.html",
    "title": "MapClearedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "MapClearedEventArgs Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapClearedEventArgs : MapEventArgsBase Inheritance Object MapEventArgsBase MapClearedEventArgs Inherited Members MapEventArgsBase.Member MapEventArgsBase.NumberOfAffectedEntries MapEventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MapClearedEventArgs(MemberInfo, Int32, Object)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.-ctor.html",
    "title": "MapEntryAddedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryAddedEventArgs Constructor MapEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public MapEntryAddedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.html",
    "title": "MapEntryAddedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryAddedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryAddedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryAddedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryAddedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties Value Gets the added value."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.Value.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryAddedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the added value. Declaration public TValue Value { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.-ctor.html",
    "title": "MapEntryEventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryEventArgsBase Constructor MapEntryEventArgsBase(MemberInfo, Lazy<TKey>, Object) Initializes a new instance of the MapEntryEventArgsBase<TKey> class. Declaration protected MapEntryEventArgsBase(MemberInfo member, Lazy<TKey> key, object state) Parameters MemberInfo member The member. Lazy <TKey> key The key. Object state A state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.html",
    "title": "MapEntryEventArgsBase<TKey> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryEventArgsBase<TKey> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for map entry events. public abstract class MapEntryEventArgsBase<TKey> : EventArgsBase Inheritance Object EventArgsBase MapEntryEventArgsBase<TKey> MapEntryAddedEventArgs<TKey, TValue> MapEntryEvictedEventArgs<TKey, TValue> MapEntryExpiredEventArgs<TKey, TValue> MapEntryInvalidatedEventArgs<TKey, TValue> MapEntryLoadedEventArgs<TKey, TValue> MapEntryMergedEventArgs<TKey, TValue> MapEntryRemovedEventArgs<TKey, TValue> MapEntryUpdatedEventArgs<TKey, TValue> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. Constructors MapEntryEventArgsBase(MemberInfo, Lazy<TKey>, Object) Initializes a new instance of the MapEntryEventArgsBase<TKey> class. Properties Key Gets the key. Member Gets the member that originated the event."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Key.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Key.html",
    "title": "Key Property | Hazelcast .NET Documentation",
    "keywords": "Key Property Key Gets the key. Declaration public TKey Key { get; } Property Value TKey"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Member.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEventArgsBase-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.-ctor.html",
    "title": "MapEntryEvictedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryEvictedEventArgs Constructor MapEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public MapEntryEvictedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.html",
    "title": "MapEntryEvictedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryEvictedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryEvictedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryEvictedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryEvictedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that was evicted."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryEvictedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that was evicted. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.-ctor.html",
    "title": "MapEntryExpiredEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryExpiredEventArgs Constructor MapEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public MapEntryExpiredEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.html",
    "title": "MapEntryExpiredEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryExpiredEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryExpiredEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryExpiredEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryExpiredEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that expired."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryExpiredEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that expired. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.-ctor.html",
    "title": "MapEntryInvalidatedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryInvalidatedEventArgs Constructor MapEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, Object) Declaration public MapEntryInvalidatedEventArgs(MemberInfo member, Lazy<TKey> key, object state) Parameters MemberInfo member Lazy <TKey> key Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryInvalidatedEventArgs-2.html",
    "title": "MapEntryInvalidatedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryInvalidatedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryInvalidatedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryInvalidatedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryInvalidatedEventArgs(MemberInfo, Lazy<TKey>, Object)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.-ctor.html",
    "title": "MapEntryLoadedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryLoadedEventArgs Constructor MapEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public MapEntryLoadedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Lazy <TValue> oldValue Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.html",
    "title": "MapEntryLoadedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryLoadedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryLoadedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryLoadedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryLoadedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Properties OldValue Gets the value before load, if the entry existed. Value Gets the value that was loaded."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before load, if the entry existed. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.Value.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryLoadedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value that was loaded. Declaration public TValue Value { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.-ctor.html",
    "title": "MapEntryMergedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryMergedEventArgs Constructor MapEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public MapEntryMergedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> value, Lazy<TValue> oldValue, Lazy<TValue> mergeValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> value Lazy <TValue> oldValue Lazy <TValue> mergeValue Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.html",
    "title": "MapEntryMergedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryMergedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryMergedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryMergedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryMergedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Lazy<TValue>, Object) Properties MergeValue Gets the value proposed during merge. OldValue Gets the value before merge. Value Gets the value after merge."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.MergeValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.MergeValue.html",
    "title": "MergeValue Property | Hazelcast .NET Documentation",
    "keywords": "MergeValue Property MergeValue Gets the value proposed during merge. Declaration public TValue MergeValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before merge. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.Value.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryMergedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value after merge. Declaration public TValue Value { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.-ctor.html",
    "title": "MapEntryRemovedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryRemovedEventArgs Constructor MapEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Declaration public MapEntryRemovedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.html",
    "title": "MapEntryRemovedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryRemovedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryRemovedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryRemovedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryRemovedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Object) Properties OldValue Gets the value that was removed."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryRemovedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value that was removed. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.-ctor.html",
    "title": "MapEntryUpdatedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEntryUpdatedEventArgs Constructor MapEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Declaration public MapEntryUpdatedEventArgs(MemberInfo member, Lazy<TKey> key, Lazy<TValue> oldValue, Lazy<TValue> value, object state) Parameters MemberInfo member Lazy <TKey> key Lazy <TValue> oldValue Lazy <TValue> value Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.html",
    "title": "MapEntryUpdatedEventArgs<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEntryUpdatedEventArgs<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEntryUpdatedEventArgs<TKey, TValue> : MapEntryEventArgsBase<TKey> Inheritance Object EventArgsBase MapEntryEventArgsBase <TKey> MapEntryUpdatedEventArgs<TKey, TValue> Inherited Members MapEntryEventArgsBase<TKey>.Member MapEntryEventArgsBase<TKey>.Key EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Constructors MapEntryUpdatedEventArgs(MemberInfo, Lazy<TKey>, Lazy<TValue>, Lazy<TValue>, Object) Properties OldValue Gets the value before the update. Value Gets the updated value."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.OldValue.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.OldValue.html",
    "title": "OldValue Property | Hazelcast .NET Documentation",
    "keywords": "OldValue Property OldValue Gets the value before the update. Declaration public TValue OldValue { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.Value.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEntryUpdatedEventArgs-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the updated value. Declaration public TValue Value { get; } Property Value TValue"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.-ctor.html",
    "title": "MapEventArgsBase Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEventArgsBase Constructor MapEventArgsBase(MemberInfo, Int32, Object) Initializes a new instance of the MapEventArgsBase class. Declaration protected MapEventArgsBase(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member The member. Int32 numberOfAffectedEntries The number of affected entries. Object state A state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.html",
    "title": "MapEventArgsBase Class | Hazelcast .NET Documentation",
    "keywords": "MapEventArgsBase Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for map events. public abstract class MapEventArgsBase Inheritance Object MapEventArgsBase MapClearedEventArgs MapEvictedEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MapEventArgsBase(MemberInfo, Int32, Object) Initializes a new instance of the MapEventArgsBase class. Properties Member Gets the member that originated the event. NumberOfAffectedEntries Gets the number of affected entries. State Gets the state object."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.Member.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member that originated the event. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.NumberOfAffectedEntries.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.NumberOfAffectedEntries.html",
    "title": "NumberOfAffectedEntries Property | Hazelcast .NET Documentation",
    "keywords": "NumberOfAffectedEntries Property NumberOfAffectedEntries Gets the number of affected entries. Declaration public int NumberOfAffectedEntries { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.State.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventArgsBase.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the state object. Declaration public object State { get; } Property Value Object"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Cleared.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public MapEventHandlers<TKey, TValue> Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Action < IHMap <TKey, TValue>, MapClearedEventArgs > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public MapEventHandlers<TKey, TValue> Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapClearedEventArgs , ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryAdded.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public MapEventHandlers<TKey, TValue> EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public MapEventHandlers<TKey, TValue> EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryEvicted.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryEvicted.html",
    "title": "EntryEvicted Method | Hazelcast .NET Documentation",
    "keywords": "EntryEvicted Method EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. Declaration public MapEventHandlers<TKey, TValue> EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryEvictedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. Declaration public MapEventHandlers<TKey, TValue> EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryEvictedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryExpired.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryExpired.html",
    "title": "EntryExpired Method | Hazelcast .NET Documentation",
    "keywords": "EntryExpired Method EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. Declaration public MapEventHandlers<TKey, TValue> EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryExpiredEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. Declaration public MapEventHandlers<TKey, TValue> EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryExpiredEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryInvalidated.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryInvalidated.html",
    "title": "EntryInvalidated Method | Hazelcast .NET Documentation",
    "keywords": "EntryInvalidated Method EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. Declaration public MapEventHandlers<TKey, TValue> EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryInvalidatedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. Declaration public MapEventHandlers<TKey, TValue> EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryInvalidatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryLoaded.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryLoaded.html",
    "title": "EntryLoaded Method | Hazelcast .NET Documentation",
    "keywords": "EntryLoaded Method EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. Declaration public MapEventHandlers<TKey, TValue> EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryLoadedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. Declaration public MapEventHandlers<TKey, TValue> EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryLoadedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryMerged.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public MapEventHandlers<TKey, TValue> EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public MapEventHandlers<TKey, TValue> EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryRemoved.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public MapEventHandlers<TKey, TValue> EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public MapEventHandlers<TKey, TValue> EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryUpdated.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public MapEventHandlers<TKey, TValue> EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public MapEventHandlers<TKey, TValue> EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Evicted.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.Evicted.html",
    "title": "Evicted Method | Hazelcast .NET Documentation",
    "keywords": "Evicted Method Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs>) Adds an handler which runs when the map is evicted. Declaration public MapEventHandlers<TKey, TValue> Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs> handler) Parameters Action < IHMap <TKey, TValue>, MapEvictedEventArgs > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers. Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted. Declaration public MapEventHandlers<TKey, TValue> Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask> handler) Parameters Func < IHMap <TKey, TValue>, MapEvictedEventArgs , ValueTask > handler The handler. Returns MapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEventHandlers-2.html",
    "title": "MapEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MapEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents distributed map event handlers. public sealed class MapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IMapEventHandlerBase > MapEventHandlers<TKey, TValue> Implements IEnumerable < IMapEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.Add(IMapEventHandlerBase) EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey TValue Methods Cleared(Action<IHMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryEvicted(Action<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is evicted. EntryEvicted(Func<IHMap<TKey, TValue>, MapEntryEvictedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is evicted. EntryExpired(Action<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is expired. EntryExpired(Func<IHMap<TKey, TValue>, MapEntryExpiredEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is expired. EntryInvalidated(Action<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is invalidated. EntryInvalidated(Func<IHMap<TKey, TValue>, MapEntryInvalidatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is invalidated. EntryLoaded(Action<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is loaded. EntryLoaded(Func<IHMap<TKey, TValue>, MapEntryLoadedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is loaded. EntryMerged(Action<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Evicted(Action<IHMap<TKey, TValue>, MapEvictedEventArgs>) Adds an handler which runs when the map is evicted. Evicted(Func<IHMap<TKey, TValue>, MapEvictedEventArgs, ValueTask>) Adds an handler which runs when the map is evicted."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.-ctor.html",
    "title": "MapEvictedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "MapEvictedEventArgs Constructor MapEvictedEventArgs(MemberInfo, Int32, Object) Declaration public MapEvictedEventArgs(MemberInfo member, int numberOfAffectedEntries, object state) Parameters MemberInfo member Int32 numberOfAffectedEntries Object state"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MapEvictedEventArgs.html",
    "title": "MapEvictedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "MapEvictedEventArgs Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll public sealed class MapEvictedEventArgs : MapEventArgsBase Inheritance Object MapEventArgsBase MapEvictedEventArgs Inherited Members MapEventArgsBase.Member MapEventArgsBase.NumberOfAffectedEntries MapEventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MapEvictedEventArgs(MemberInfo, Int32, Object)"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.Cleared.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public MultiMapEventHandlers<TKey, TValue> Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Action < IHMultiMap <TKey, TValue>, MapClearedEventArgs > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public MultiMapEventHandlers<TKey, TValue> Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Func < IHMultiMap <TKey, TValue>, MapClearedEventArgs , ValueTask > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryAdded.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public MultiMapEventHandlers<TKey, TValue> EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public MultiMapEventHandlers<TKey, TValue> EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryMerged.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public MultiMapEventHandlers<TKey, TValue> EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public MultiMapEventHandlers<TKey, TValue> EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryRemoved.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public MultiMapEventHandlers<TKey, TValue> EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public MultiMapEventHandlers<TKey, TValue> EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryUpdated.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public MultiMapEventHandlers<TKey, TValue> EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHMultiMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public MultiMapEventHandlers<TKey, TValue> EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHMultiMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns MultiMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.MultiMapEventHandlers-2.html",
    "title": "MultiMapEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "MultiMapEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents multi distributed map event handlers. public class MultiMapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IMapEventHandlerBase > MultiMapEventHandlers<TKey, TValue> Implements IEnumerable < IMapEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.Add(IMapEventHandlerBase) EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. TValue The type of the values. Methods Cleared(Action<IHMultiMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHMultiMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHMultiMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHMultiMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHMultiMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHMultiMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.OverflowPolicy.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.OverflowPolicy.html",
    "title": "OverflowPolicy Enum | Hazelcast .NET Documentation",
    "keywords": "OverflowPolicy Enum Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. public enum OverflowPolicy Remarks Using this policy one can control the behavior what should to be done when an item is about to be added to the ringbuffer, but there is 0 remaining capacity. Overflowing happens when a time-to-live is set and the oldest item in the ringbuffer (the head) is not old enough to expire. Fields Fail Using this policy the call will fail immediately and the oldest item will not be overwritten before it is old enough to retire. Overwrite Using this policy the oldest item is overwritten no matter it is not old enough to retire."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.Cleared.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.Cleared.html",
    "title": "Cleared Method | Hazelcast .NET Documentation",
    "keywords": "Cleared Method Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedMapEventHandlers<TKey, TValue> Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs> handler) Parameters Action < IHReplicatedMap <TKey, TValue>, MapClearedEventArgs > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers. Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. Declaration public ReplicatedMapEventHandlers<TKey, TValue> Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask> handler) Parameters Func < IHReplicatedMap <TKey, TValue>, MapClearedEventArgs , ValueTask > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryAdded.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryAdded.html",
    "title": "EntryAdded Method | Hazelcast .NET Documentation",
    "keywords": "EntryAdded Method EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers. EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedMap <TKey, TValue>, MapEntryAddedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryMerged.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryMerged.html",
    "title": "EntryMerged Method | Hazelcast .NET Documentation",
    "keywords": "EntryMerged Method EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers. EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedMap <TKey, TValue>, MapEntryMergedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryRemoved.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryRemoved.html",
    "title": "EntryRemoved Method | Hazelcast .NET Documentation",
    "keywords": "EntryRemoved Method EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers. EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedMap <TKey, TValue>, MapEntryRemovedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryUpdated.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.EntryUpdated.html",
    "title": "EntryUpdated Method | Hazelcast .NET Documentation",
    "keywords": "EntryUpdated Method EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>> handler) Parameters Action < IHReplicatedMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>> handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers. EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated. Declaration public ReplicatedMapEventHandlers<TKey, TValue> EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask> handler) Parameters Func < IHReplicatedMap <TKey, TValue>, MapEntryUpdatedEventArgs <TKey, TValue>, ValueTask > handler The handler. Returns ReplicatedMapEventHandlers <TKey, TValue> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.ReplicatedMapEventHandlers-2.html",
    "title": "ReplicatedMapEventHandlers<TKey, TValue> Class | Hazelcast .NET Documentation",
    "keywords": "ReplicatedMapEventHandlers<TKey, TValue> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents replicated distributed map event handlers. public class ReplicatedMapEventHandlers<TKey, TValue> : EventHandlersBase<IMapEventHandlerBase>, IEnumerable<IMapEventHandlerBase>, IEnumerable Inheritance Object EventHandlersBase < IMapEventHandlerBase > ReplicatedMapEventHandlers<TKey, TValue> Implements IEnumerable < IMapEventHandlerBase > IEnumerable Inherited Members EventHandlersBase<IMapEventHandlerBase>.Add(IMapEventHandlerBase) EventHandlersBase<IMapEventHandlerBase>.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.IEnumerable.GetEnumerator() EventHandlersBase<IMapEventHandlerBase>.Remove(IMapEventHandlerBase) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters TKey The type of the keys. TValue The type of the values. Methods Cleared(Action<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs>) Adds an handler which runs when the map is cleared. Cleared(Func<IHReplicatedMap<TKey, TValue>, MapClearedEventArgs, ValueTask>) Adds an handler which runs when the map is cleared. EntryAdded(Action<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is added. EntryAdded(Func<IHReplicatedMap<TKey, TValue>, MapEntryAddedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is added. EntryMerged(Action<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is merged. EntryMerged(Func<IHReplicatedMap<TKey, TValue>, MapEntryMergedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is merged. EntryRemoved(Action<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is removed. EntryRemoved(Func<IHReplicatedMap<TKey, TValue>, MapEntryRemovedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is removed. EntryUpdated(Action<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>>) Adds an handler which runs when a map entry is updated. EntryUpdated(Func<IHReplicatedMap<TKey, TValue>, MapEntryUpdatedEventArgs<TKey, TValue>, ValueTask>) Adds an handler which runs when a map entry is updated."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.html",
    "title": "TopicEventHandlers<T> Class | Hazelcast .NET Documentation",
    "keywords": "TopicEventHandlers<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represent topic event handlers. public sealed class TopicEventHandlers<T> : EventHandlersBase<ITopicEventHandler<T>>, IEnumerable<ITopicEventHandler<T>>, IEnumerable Inheritance Object EventHandlersBase < ITopicEventHandler <T>> TopicEventHandlers<T> Implements IEnumerable < ITopicEventHandler <T>> IEnumerable Inherited Members EventHandlersBase<ITopicEventHandler<T>>.Add(ITopicEventHandler<T>) EventHandlersBase<ITopicEventHandler<T>>.GetEnumerator() EventHandlersBase<ITopicEventHandler<T>>.IEnumerable.GetEnumerator() EventHandlersBase<ITopicEventHandler<T>>.Remove(ITopicEventHandler<T>) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic message type. Methods Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicEventHandlers-1.Message.html",
    "title": "Message Method | Hazelcast .NET Documentation",
    "keywords": "Message Method Message(Action<IHTopic<T>, TopicMessageEventArgs<T>>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Action<IHTopic<T>, TopicMessageEventArgs<T>> handler) Parameters Action < IHTopic <T>, TopicMessageEventArgs <T>> handler The handler. Returns TopicEventHandlers <T> The handlers. Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask>) Adds an handler which runs when a message is submitted. Declaration public TopicEventHandlers<T> Message(Func<IHTopic<T>, TopicMessageEventArgs<T>, ValueTask> handler) Parameters Func < IHTopic <T>, TopicMessageEventArgs <T>, ValueTask > handler The handler. Returns TopicEventHandlers <T> The handlers."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.-ctor.html",
    "title": "TopicMessageEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "TopicMessageEventArgs Constructor TopicMessageEventArgs(MemberInfo, Int64, T, Object) Initializes a new instance of the TopicMessageEventArgs<T> class. Declaration public TopicMessageEventArgs(MemberInfo member, long publishTime, T payload, object state) Parameters MemberInfo member The member. Int64 publishTime The publish time. T payload The object. Object state A state object"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.html",
    "title": "TopicMessageEventArgs<T> Class | Hazelcast .NET Documentation",
    "keywords": "TopicMessageEventArgs<T> Class Namespace: Hazelcast.DistributedObjects Assembly: Hazelcast.Net.dll Represents event data for the event. public sealed class TopicMessageEventArgs<T> : EventArgsBase Inheritance Object EventArgsBase TopicMessageEventArgs<T> Inherited Members EventArgsBase.State Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T The topic object type. Constructors TopicMessageEventArgs(MemberInfo, Int64, T, Object) Initializes a new instance of the TopicMessageEventArgs<T> class. Properties Member Gets the member. Payload Gets the topic object carried by the message. PublishTime Gets the message publish time."
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Gets the member. Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.Payload.html",
    "title": "Payload Property | Hazelcast .NET Documentation",
    "keywords": "Payload Property Payload Gets the topic object carried by the message. Declaration public T Payload { get; } Property Value T"
  },
  "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html": {
    "href": "4.1.0/api/Hazelcast.DistributedObjects.TopicMessageEventArgs-1.PublishTime.html",
    "title": "PublishTime Property | Hazelcast .NET Documentation",
    "keywords": "PublishTime Property PublishTime Gets the message publish time. Declaration public long PublishTime { get; } Property Value Int64"
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.-ctor.html",
    "title": "DistributedObjectCreatedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectCreatedEventArgs Constructor DistributedObjectCreatedEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectCreatedEventArgs class. Declaration public DistributedObjectCreatedEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters String serviceName The service unique name. String name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectCreatedEventArgs.html",
    "title": "DistributedObjectCreatedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectCreatedEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents event data for a cluster object created event. public sealed class DistributedObjectCreatedEventArgs : DistributedObjectLifecycleEventArgs Inheritance Object DistributedObjectLifecycleEventArgs DistributedObjectCreatedEventArgs Inherited Members DistributedObjectLifecycleEventArgs.ServiceName DistributedObjectLifecycleEventArgs.Name DistributedObjectLifecycleEventArgs.SourceMemberId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DistributedObjectCreatedEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectCreatedEventArgs class."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.-ctor.html",
    "title": "DistributedObjectDestroyedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectDestroyedEventArgs Constructor DistributedObjectDestroyedEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectDestroyedEventArgs class. Declaration public DistributedObjectDestroyedEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters String serviceName The service unique name. String name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectDestroyedEventArgs.html",
    "title": "DistributedObjectDestroyedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectDestroyedEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents event data for a cluster object destroyed event. public sealed class DistributedObjectDestroyedEventArgs : DistributedObjectLifecycleEventArgs Inheritance Object DistributedObjectLifecycleEventArgs DistributedObjectDestroyedEventArgs Inherited Members DistributedObjectLifecycleEventArgs.ServiceName DistributedObjectLifecycleEventArgs.Name DistributedObjectLifecycleEventArgs.SourceMemberId Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DistributedObjectDestroyedEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectDestroyedEventArgs class."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.-ctor.html",
    "title": "DistributedObjectLifecycleEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectLifecycleEventArgs Constructor DistributedObjectLifecycleEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Declaration protected DistributedObjectLifecycleEventArgs(string serviceName, string name, Guid sourceMemberId) Parameters String serviceName The service unique name. String name The object unique name. Guid sourceMemberId The unique identifier of the source member."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.html",
    "title": "DistributedObjectLifecycleEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "DistributedObjectLifecycleEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Provides a base class for cluster object lifecycle events data. public abstract class DistributedObjectLifecycleEventArgs Inheritance Object DistributedObjectLifecycleEventArgs DistributedObjectCreatedEventArgs DistributedObjectDestroyedEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors DistributedObjectLifecycleEventArgs(String, String, Guid) Initializes a new instance of the DistributedObjectLifecycleEventArgs class. Properties Name Gets the name of the impacted object. ServiceName Gets the name of the service handling the impacted object. SourceMemberId Gets the unique identifier of the source member."
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the impacted object. Declaration public string Name { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.ServiceName.html",
    "title": "ServiceName Property | Hazelcast .NET Documentation",
    "keywords": "ServiceName Property ServiceName Gets the name of the service handling the impacted object. Declaration public string ServiceName { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html": {
    "href": "4.1.0/api/Hazelcast.Events.DistributedObjectLifecycleEventArgs.SourceMemberId.html",
    "title": "SourceMemberId Property | Hazelcast .NET Documentation",
    "keywords": "SourceMemberId Property SourceMemberId Gets the unique identifier of the source member. Declaration public Guid SourceMemberId { get; } Property Value Guid"
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.Clone.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.Clone.html",
    "title": "Clone Method | Hazelcast .NET Documentation",
    "keywords": "Clone Method Clone() Clones the options. Declaration public EventsOptions Clone() Returns EventsOptions The cloned options."
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.-ctor.html",
    "title": "EventsOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "EventsOptions Constructor EventsOptions() Initializes a new instance of the EventsOptions class. Declaration public EventsOptions()"
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.html",
    "title": "EventsOptions Class | Hazelcast .NET Documentation",
    "keywords": "EventsOptions Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents the events options. public class EventsOptions Inheritance Object EventsOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors EventsOptions() Initializes a new instance of the EventsOptions class. Properties SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. SubscriptionCollectPeriod Gets or sets the period of the subscription collection. SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Methods Clone() Clones the options."
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectDelay.html",
    "title": "SubscriptionCollectDelay Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectDelay Property SubscriptionCollectDelay Gets or sets the delay before collecting subscriptions starts. Declaration public TimeSpan SubscriptionCollectDelay { get; set; } Property Value TimeSpan"
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectPeriod.html",
    "title": "SubscriptionCollectPeriod Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectPeriod Property SubscriptionCollectPeriod Gets or sets the period of the subscription collection. Declaration public TimeSpan SubscriptionCollectPeriod { get; set; } Property Value TimeSpan"
  },
  "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html": {
    "href": "4.1.0/api/Hazelcast.Events.EventsOptions.SubscriptionCollectTimeout.html",
    "title": "SubscriptionCollectTimeout Property | Hazelcast .NET Documentation",
    "keywords": "SubscriptionCollectTimeout Property SubscriptionCollectTimeout Gets or sets the subscription collection timeout, after which a subscription is considered dead and removed. Declaration public TimeSpan SubscriptionCollectTimeout { get; set; } Property Value TimeSpan"
  },
  "4.1.0/api/Hazelcast.Events.html": {
    "href": "4.1.0/api/Hazelcast.Events.html",
    "title": "Hazelcast.Events Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Events Namespace Classes DistributedObjectCreatedEventArgs Represents event data for a cluster object created event. DistributedObjectDestroyedEventArgs Represents event data for a cluster object destroyed event. DistributedObjectLifecycleEventArgs Provides a base class for cluster object lifecycle events data. EventsOptions Represents the events options. MembersUpdatedEventArgs Represents event data for the members updated event. PartitionLostEventArgs"
  },
  "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.AddedMembers.html": {
    "href": "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.AddedMembers.html",
    "title": "AddedMembers Property | Hazelcast .NET Documentation",
    "keywords": "AddedMembers Property AddedMembers Gets the added members. Declaration public IReadOnlyCollection<MemberInfo> AddedMembers { get; } Property Value IReadOnlyCollection < MemberInfo >"
  },
  "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.html",
    "title": "MembersUpdatedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "MembersUpdatedEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll Represents event data for the members updated event. public class MembersUpdatedEventArgs Inheritance Object MembersUpdatedEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties AddedMembers Gets the added members. Members Gets the complete, updated list of members. RemovedMembers Gets the removed members."
  },
  "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.Members.html": {
    "href": "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.Members.html",
    "title": "Members Property | Hazelcast .NET Documentation",
    "keywords": "Members Property Members Gets the complete, updated list of members. Declaration public IReadOnlyCollection<MemberInfo> Members { get; } Property Value IReadOnlyCollection < MemberInfo >"
  },
  "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.RemovedMembers.html": {
    "href": "4.1.0/api/Hazelcast.Events.MembersUpdatedEventArgs.RemovedMembers.html",
    "title": "RemovedMembers Property | Hazelcast .NET Documentation",
    "keywords": "RemovedMembers Property RemovedMembers Gets the removed members. Declaration public IReadOnlyCollection<MemberInfo> RemovedMembers { get; } Property Value IReadOnlyCollection < MemberInfo >"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.-ctor.html",
    "title": "PartitionLostEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "PartitionLostEventArgs Constructor PartitionLostEventArgs(Int32, Int32, Boolean, MemberInfo) Declaration public PartitionLostEventArgs(int partitionId, int lostBackupCount, bool isAllReplicasInPartitionLost, MemberInfo member) Parameters Int32 partitionId Int32 lostBackupCount Boolean isAllReplicasInPartitionLost MemberInfo member"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.html",
    "title": "PartitionLostEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "PartitionLostEventArgs Class Namespace: Hazelcast.Events Assembly: Hazelcast.Net.dll public class PartitionLostEventArgs Inheritance Object PartitionLostEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors PartitionLostEventArgs(Int32, Int32, Boolean, MemberInfo) Properties IsAllReplicasInPartitionLost LostBackupCount Member PartitionId"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.IsAllReplicasInPartitionLost.html",
    "title": "IsAllReplicasInPartitionLost Property | Hazelcast .NET Documentation",
    "keywords": "IsAllReplicasInPartitionLost Property IsAllReplicasInPartitionLost Declaration public bool IsAllReplicasInPartitionLost { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.LostBackupCount.html",
    "title": "LostBackupCount Property | Hazelcast .NET Documentation",
    "keywords": "LostBackupCount Property LostBackupCount Declaration public int LostBackupCount { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.Member.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.Member.html",
    "title": "Member Property | Hazelcast .NET Documentation",
    "keywords": "Member Property Member Declaration public MemberInfo Member { get; } Property Value MemberInfo"
  },
  "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html": {
    "href": "4.1.0/api/Hazelcast.Events.PartitionLostEventArgs.PartitionId.html",
    "title": "PartitionId Property | Hazelcast .NET Documentation",
    "keywords": "PartitionId Property PartitionId Declaration public int PartitionId { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.AuthenticationException.-ctor.html",
    "title": "AuthenticationException Constructor | Hazelcast .NET Documentation",
    "keywords": "AuthenticationException Constructor AuthenticationException() Initializes a new instance of the AuthenticationException class. Declaration public AuthenticationException() AuthenticationException(String) Initializes a new instance of the AuthenticationException class with a specified error message. Declaration public AuthenticationException(string message) Parameters String message The message that describes the error. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public AuthenticationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Exceptions.AuthenticationException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.AuthenticationException.html",
    "title": "AuthenticationException Class | Hazelcast .NET Documentation",
    "keywords": "AuthenticationException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when authentication fails. [Serializable] public sealed class AuthenticationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException AuthenticationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors AuthenticationException() Initializes a new instance of the AuthenticationException class. AuthenticationException(Exception) Initializes a new instance of the AuthenticationException class with a reference to the inner exception that is the cause of this exception. AuthenticationException(String) Initializes a new instance of the AuthenticationException class with a specified error message. AuthenticationException(String, Exception) Initializes a new instance of the AuthenticationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.-ctor.html",
    "title": "ClientOfflineException Constructor | Hazelcast .NET Documentation",
    "keywords": "ClientOfflineException Constructor ClientOfflineException(ClientState) Initializes a new instance of the ClientOfflineException class. Declaration public ClientOfflineException(ClientState state) Parameters ClientState state The client state. ClientOfflineException(String) Initializes a new instance of the ClientOfflineException class with a specified error message. Declaration public ClientOfflineException(string message) Parameters String message The message that describes the error. ClientOfflineException(String, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message. Declaration public ClientOfflineException(string message, ClientState state) Parameters String message The message that describes the error. ClientState state The client state. ClientOfflineException(Exception) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientOfflineException(Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(Exception innerException, ClientState state) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientState state The client state. ClientOfflineException(String, Exception) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientOfflineException(String, Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ClientOfflineException(string message, Exception innerException, ClientState state) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ClientState state The client state."
  },
  "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.GetObjectData.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.GetObjectData.html",
    "title": "GetObjectData Method | Hazelcast .NET Documentation",
    "keywords": "GetObjectData Method GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.html",
    "title": "ClientOfflineException Class | Hazelcast .NET Documentation",
    "keywords": "ClientOfflineException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. [Serializable] public sealed class ClientOfflineException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ClientOfflineException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Remarks The State property provides the ClientState of the client at the time the exception was thrown. The client may be either not connected at all, in which case retrying an operation will not succeed. Or, it may be temporarily disconnected and trying to reconnect, in which case retrying an operation may eventually succeed. Constructors ClientOfflineException(ClientState) Initializes a new instance of the ClientOfflineException class. ClientOfflineException(Exception) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. ClientOfflineException(Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a reference to the inner exception that is the cause of this exception. ClientOfflineException(String) Initializes a new instance of the ClientOfflineException class with a specified error message. ClientOfflineException(String, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message. ClientOfflineException(String, Exception) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. ClientOfflineException(String, Exception, ClientState) Initializes a new instance of the ClientOfflineException class with a specified error message and a reference to the inner exception that is the cause of this exception. Properties State Gets the client state. Methods GetObjectData(SerializationInfo, StreamingContext)"
  },
  "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.State.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ClientOfflineException.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the client state. Declaration public ClientState State { get; } Property Value ClientState"
  },
  "4.1.0/api/Hazelcast.Exceptions.ConnectionException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ConnectionException.-ctor.html",
    "title": "ConnectionException Constructor | Hazelcast .NET Documentation",
    "keywords": "ConnectionException Constructor ConnectionException() Initializes a new instance of the ConnectionException class. Declaration public ConnectionException() ConnectionException(String) Initializes a new instance of the ConnectionException class with a specified error message. Declaration public ConnectionException(string message) Parameters String message The message that describes the error. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public ConnectionException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Exceptions.ConnectionException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.ConnectionException.html",
    "title": "ConnectionException Class | Hazelcast .NET Documentation",
    "keywords": "ConnectionException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when connection to a member fails. [Serializable] public sealed class ConnectionException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException ConnectionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors ConnectionException() Initializes a new instance of the ConnectionException class. ConnectionException(Exception) Initializes a new instance of the ConnectionException class with a reference to the inner exception that is the cause of this exception. ConnectionException(String) Initializes a new instance of the ConnectionException class with a specified error message. ConnectionException(String, Exception) Initializes a new instance of the ConnectionException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Exceptions.HazelcastException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.HazelcastException.-ctor.html",
    "title": "HazelcastException Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastException Constructor HazelcastException() Initializes a new instance of the HazelcastException class. Declaration public HazelcastException() HazelcastException(String) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public HazelcastException(string message) Parameters String message The message that describes the error. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(String, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public HazelcastException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. Declaration protected HazelcastException(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "4.1.0/api/Hazelcast.Exceptions.HazelcastException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.HazelcastException.html",
    "title": "HazelcastException Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the generic exception that is throw when Hazelcast goes south. [Serializable] public class HazelcastException : Exception, ISerializable Inheritance Object Exception HazelcastException ConfigurationException ServiceFactoryException AuthenticationException ClientOfflineException ConnectionException TargetUnreachableException TaskTimeoutException RemoteException SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors HazelcastException() Initializes a new instance of the HazelcastException class. HazelcastException(Exception) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. HazelcastException(SerializationInfo, StreamingContext) Initializes a new instance of the HazelcastException class with serialized data. HazelcastException(String) Initializes a new instance of the HazelcastException class with a specified error message. HazelcastException(String, Exception) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Exceptions.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.html",
    "title": "Hazelcast.Exceptions Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Exceptions Namespace Classes AuthenticationException Represents the exception that is thrown when authentication fails. ClientOfflineException Represents the exception that is thrown when the Hazelcast client is invoked but is not connected. ConnectionException Represents the exception that is thrown when connection to a member fails. HazelcastException Represents the generic exception that is throw when Hazelcast goes south. TargetDisconnectedException Represents the exception that is thrown when the target of an invocation disconnects. TargetUnreachableException Represents the exception that is thrown when the target of an invocation is not reachable. TaskTimeoutException Represents the exception that is throw when an async task times out."
  },
  "4.1.0/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TargetDisconnectedException.-ctor.html",
    "title": "TargetDisconnectedException Constructor | Hazelcast .NET Documentation",
    "keywords": "TargetDisconnectedException Constructor TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. Declaration public TargetDisconnectedException() TargetDisconnectedException(String) Initializes a new instance of the TargetDisconnectedException class with a specified error message. Declaration public TargetDisconnectedException(string message) Parameters String message The message that describes the error. TargetDisconnectedException(Exception) Initializes a new instance of the TargetDisconnectedException class with a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetDisconnectedException(String, Exception) Initializes a new instance of the TargetDisconnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TargetDisconnectedException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Exceptions.TargetDisconnectedException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TargetDisconnectedException.html",
    "title": "TargetDisconnectedException Class | Hazelcast .NET Documentation",
    "keywords": "TargetDisconnectedException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when the target of an invocation disconnects. [Serializable] public sealed class TargetDisconnectedException : TargetUnreachableException, ISerializable Inheritance Object Exception HazelcastException TargetUnreachableException TargetDisconnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TargetDisconnectedException() Initializes a new instance of the ConfigurationException class. TargetDisconnectedException(Exception) Initializes a new instance of the TargetDisconnectedException class with a reference to the inner exception that is the cause of this exception. TargetDisconnectedException(String) Initializes a new instance of the TargetDisconnectedException class with a specified error message. TargetDisconnectedException(String, Exception) Initializes a new instance of the TargetDisconnectedException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Exceptions.TargetUnreachableException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TargetUnreachableException.-ctor.html",
    "title": "TargetUnreachableException Constructor | Hazelcast .NET Documentation",
    "keywords": "TargetUnreachableException Constructor TargetUnreachableException() Initializes a new instance of the TargetUnreachableException class. Declaration public TargetUnreachableException() TargetUnreachableException(String) Initializes a new instance of the TargetUnreachableException class with a specified error message. Declaration public TargetUnreachableException(string message) Parameters String message The message that describes the error. TargetUnreachableException(Exception) Initializes a new instance of the TargetUnreachableException class with a reference to the inner exception that is the cause of this exception. Declaration public TargetUnreachableException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetUnreachableException(String, Exception) Initializes a new instance of the TargetUnreachableException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TargetUnreachableException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. TargetUnreachableException(SerializationInfo, StreamingContext) Initializes a new instance of the TargetUnreachableException class with serialized data. Declaration protected TargetUnreachableException(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info The SerializationInfo that holds the serialized object data about the exception being thrown. StreamingContext context The StreamingContext that contains contextual information about the source or destination."
  },
  "4.1.0/api/Hazelcast.Exceptions.TargetUnreachableException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TargetUnreachableException.html",
    "title": "TargetUnreachableException Class | Hazelcast .NET Documentation",
    "keywords": "TargetUnreachableException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is thrown when the target of an invocation is not reachable. [Serializable] public class TargetUnreachableException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException TargetUnreachableException TargetDisconnectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TargetUnreachableException() Initializes a new instance of the TargetUnreachableException class. TargetUnreachableException(Exception) Initializes a new instance of the TargetUnreachableException class with a reference to the inner exception that is the cause of this exception. TargetUnreachableException(SerializationInfo, StreamingContext) Initializes a new instance of the TargetUnreachableException class with serialized data. TargetUnreachableException(String) Initializes a new instance of the TargetUnreachableException class with a specified error message. TargetUnreachableException(String, Exception) Initializes a new instance of the TargetUnreachableException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.-ctor.html",
    "title": "TaskTimeoutException Constructor | Hazelcast .NET Documentation",
    "keywords": "TaskTimeoutException Constructor TaskTimeoutException(String, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. Declaration public TaskTimeoutException(string message, Task task) Parameters String message The message that describes the error. Task task The task that timed out. TaskTimeoutException() Initializes a new instance of the TaskTimeoutException . Declaration public TaskTimeoutException() Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(String) Initializes a new instance of the TaskTimeoutException with a specified error message. Declaration public TaskTimeoutException(string message) Parameters String message The message that describes the error. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code. TaskTimeoutException(String, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public TaskTimeoutException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Remarks This constructor method is provided to comply with CA1032 and ensure that the exception class is a good .NET citizen. It is not meant to be used in code."
  },
  "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.html",
    "title": "TaskTimeoutException Class | Hazelcast .NET Documentation",
    "keywords": "TaskTimeoutException Class Namespace: Hazelcast.Exceptions Assembly: Hazelcast.Net.dll Represents the exception that is throw when an async task times out. [Serializable] public sealed class TaskTimeoutException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException TaskTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TaskTimeoutException() Initializes a new instance of the TaskTimeoutException . TaskTimeoutException(String) Initializes a new instance of the TaskTimeoutException with a specified error message. TaskTimeoutException(String, Exception) Initializes a new instance of the TaskTimeoutException with a specified error message and a reference to the inner exception that is the cause of this exception. TaskTimeoutException(String, Task) Initializes a new instance of the TaskTimeoutException class with a specified error message and the task that timed out. Properties Task Gets the task that timed out (and may still be executing)."
  },
  "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html": {
    "href": "4.1.0/api/Hazelcast.Exceptions.TaskTimeoutException.Task.html",
    "title": "Task Property | Hazelcast .NET Documentation",
    "keywords": "Task Property Task Gets the task that timed out (and may still be executing). Declaration public Task Task { get; } Property Value Task"
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.html",
    "title": "HazelcastClientEventHandlers Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastClientEventHandlers Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the client events. public sealed class HazelcastClientEventHandlers : EventHandlersBase<IHazelcastClientEventHandler>, IEnumerable<IHazelcastClientEventHandler>, IEnumerable Inheritance Object EventHandlersBase < IHazelcastClientEventHandler > HazelcastClientEventHandlers Implements IEnumerable < IHazelcastClientEventHandler > IEnumerable Inherited Members EventHandlersBase<IHazelcastClientEventHandler>.Add(IHazelcastClientEventHandler) EventHandlersBase<IHazelcastClientEventHandler>.GetEnumerator() EventHandlersBase<IHazelcastClientEventHandler>.IEnumerable.GetEnumerator() EventHandlersBase<IHazelcastClientEventHandler>.Remove(IHazelcastClientEventHandler) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks Handlers for events can be synchronous or asynchronous. Asynchronous handlers are defined by an Action{IHazelcastClient, TArgs} whereas... Methods MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs>) Adds a handler which runs when members are updated MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask>) Adds a handler which runs when a member is added. ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs>) Adds a handler which runs when a distributed object is created. ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs>) Adds a handler which runs when a distributed object is destroyed. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. StateChanged(Action<IHazelcastClient, StateChangedEventArgs>) Adds a handler which runs when the client state changes. StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask>) Adds a handler which runs when the client state changes."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.MembersUpdated.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.MembersUpdated.html",
    "title": "MembersUpdated Method | Hazelcast .NET Documentation",
    "keywords": "MembersUpdated Method MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs>) Adds a handler which runs when members are updated Declaration public HazelcastClientEventHandlers MembersUpdated(Action<IHazelcastClient, MembersUpdatedEventArgs> handler) Parameters Action < IHazelcastClient , MembersUpdatedEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask>) Adds a handler which runs when a member is added. Declaration public HazelcastClientEventHandlers MembersUpdated(Func<IHazelcastClient, MembersUpdatedEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , MembersUpdatedEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.ObjectCreated.html",
    "title": "ObjectCreated Method | Hazelcast .NET Documentation",
    "keywords": "ObjectCreated Method ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Action<IHazelcastClient, DistributedObjectCreatedEventArgs> handler) Parameters Action < IHazelcastClient , DistributedObjectCreatedEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is created. Declaration public HazelcastClientEventHandlers ObjectCreated(Func<IHazelcastClient, DistributedObjectCreatedEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , DistributedObjectCreatedEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.ObjectDestroyed.html",
    "title": "ObjectDestroyed Method | Hazelcast .NET Documentation",
    "keywords": "ObjectDestroyed Method ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Action<IHazelcastClient, DistributedObjectDestroyedEventArgs> handler) Parameters Action < IHazelcastClient , DistributedObjectDestroyedEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask>) Adds a handler which runs when a distributed object is destroyed. Declaration public HazelcastClientEventHandlers ObjectDestroyed(Func<IHazelcastClient, DistributedObjectDestroyedEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , DistributedObjectDestroyedEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.PartitionLost.html",
    "title": "PartitionLost Method | Hazelcast .NET Documentation",
    "keywords": "PartitionLost Method PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Action<IHazelcastClient, PartitionLostEventArgs> handler) Parameters Action < IHazelcastClient , PartitionLostEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask>) Adds a handler which runs when a partition is lost. Declaration public HazelcastClientEventHandlers PartitionLost(Func<IHazelcastClient, PartitionLostEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , PartitionLostEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.PartitionsUpdated.html",
    "title": "PartitionsUpdated Method | Hazelcast .NET Documentation",
    "keywords": "PartitionsUpdated Method PartitionsUpdated(Action<IHazelcastClient, EventArgs>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Action<IHazelcastClient, EventArgs> handler) Parameters Action < IHazelcastClient , EventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask>) Adds a handler which runs when partitions are updated. Declaration public HazelcastClientEventHandlers PartitionsUpdated(Func<IHazelcastClient, EventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , EventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.StateChanged.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientEventHandlers.StateChanged.html",
    "title": "StateChanged Method | Hazelcast .NET Documentation",
    "keywords": "StateChanged Method StateChanged(Action<IHazelcastClient, StateChangedEventArgs>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers StateChanged(Action<IHazelcastClient, StateChangedEventArgs> handler) Parameters Action < IHazelcastClient , StateChangedEventArgs > handler The handler. Returns HazelcastClientEventHandlers The handlers. StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask>) Adds a handler which runs when the client state changes. Declaration public HazelcastClientEventHandlers StateChanged(Func<IHazelcastClient, StateChangedEventArgs, ValueTask> handler) Parameters Func < IHazelcastClient , StateChangedEventArgs , ValueTask > handler The handler. Returns HazelcastClientEventHandlers The handlers."
  },
  "4.1.0/api/Hazelcast.HazelcastClientFactory.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientFactory.html",
    "title": "HazelcastClientFactory Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastClientFactory Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Creates IHazelcastClient instances. The Hazelcast client factory is initialized with options. See Configuration in the general documentation for details on how to obtain these options. The factory is the only way to create new clients. See Hazelcast Client in the general documentation for more details. public static class HazelcastClientFactory Inheritance Object HazelcastClientFactory Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with the automatic options."
  },
  "4.1.0/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastClientFactory.StartNewClientAsync.html",
    "title": "StartNewClientAsync Method | Hazelcast .NET Documentation",
    "keywords": "StartNewClientAsync Method StartNewClientAsync(CancellationToken) Starts a new IHazelcastClient instance with the automatic options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(CancellationToken cancellationToken = default(CancellationToken)) Parameters CancellationToken cancellationToken An optional cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via HazelcastOptions.Build method. StartNewClientAsync(Action<HazelcastOptions>, CancellationToken) Starts a new IHazelcastClient instance with configured options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(Action<HazelcastOptions> configure, CancellationToken cancellationToken = default(CancellationToken)) Parameters Action < HazelcastOptions > configure A HazelcastOptions configuration delegate. CancellationToken cancellationToken A optional cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance. Remarks Options are built via the Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) method and passed to the configure method, where they can be refined and adjusted, before being used to create the client. StartNewClientAsync(HazelcastOptions, CancellationToken) Starts a new IHazelcastClient instance with options. Declaration public static ValueTask<IHazelcastClient> StartNewClientAsync(HazelcastOptions options, CancellationToken cancellationToken = default(CancellationToken)) Parameters HazelcastOptions options Options. CancellationToken cancellationToken A optional cancellation token. Returns ValueTask < IHazelcastClient > A new IHazelcastClient instance."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.AddSubscriber.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.AddSubscriber.html",
    "title": "AddSubscriber Method | Hazelcast .NET Documentation",
    "keywords": "AddSubscriber Method AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Action<HazelcastClientEventHandlers> events) Parameters Action < HazelcastClientEventHandlers > events An action defining event handlers. Returns HazelcastOptions The options. AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(IHazelcastClientEventSubscriber subscriber) Parameters IHazelcastClientEventSubscriber subscriber The subscriber. Returns HazelcastOptions The options. AddSubscriber<T>() Adds a subscriber. Declaration public HazelcastOptions AddSubscriber<T>() where T : IHazelcastClientEventSubscriber Returns HazelcastOptions The options. Type Parameters T The type of the subscriber. AddSubscriber(Type) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(Type type) Parameters Type type The type of the subscriber. Returns HazelcastOptions The options. AddSubscriber(String) Adds a subscriber. Declaration public HazelcastOptions AddSubscriber(string typename) Parameters String typename The name of the type of the subscriber. Returns HazelcastOptions The options."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Authentication.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Authentication.html",
    "title": "Authentication Property | Hazelcast .NET Documentation",
    "keywords": "Authentication Property Authentication Gets the AuthenticationOptions . Declaration public AuthenticationOptions Authentication { get; } Property Value AuthenticationOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Build.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build Hazelcast options. Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. Declaration public static HazelcastOptions Build(string[] args = null, IEnumerable<KeyValuePair<string, string>> keyValues = null, string optionsFilePath = null, string optionsFileName = null, string environmentName = null, Action<IConfiguration, HazelcastOptions> configure = null) Parameters String [] args Optional command-line arguments. IEnumerable < KeyValuePair < String , String >> keyValues Optional key-value pairs. String optionsFilePath Optional options file path (without filename). String optionsFileName Optional options file name (without path, with extension). String environmentName Optional environment name. Action < IConfiguration , HazelcastOptions > configure Optional HazelcastOptions configuration delegate. Returns HazelcastOptions Hazelcast options. Remarks When optionsFilePath is not provided, the options file is searched in the default .NET configuration location, which usually is where the application resides. When optionsFileName is not provided, the name is \"hazelcast\". When environmentName is not provided, it is determined the standard .NET way, i.e. from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables and, if not specified, defaults to \"Production\"."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.ClientName.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.ClientName.html",
    "title": "ClientName Property | Hazelcast .NET Documentation",
    "keywords": "ClientName Property ClientName Gets or sets the name of the client. Declaration public string ClientName { get; set; } Property Value String Remarks This is optional. If no client name is specified, a name will be generated."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.ClusterName.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.ClusterName.html",
    "title": "ClusterName Property | Hazelcast .NET Documentation",
    "keywords": "ClusterName Property ClusterName Gets or sets the name of the cluster. Declaration public string ClusterName { get; set; } Property Value String Remarks This must match the name of the cluster that the client is going to connect to."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.-ctor.html",
    "title": "HazelcastOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "HazelcastOptions Constructor HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Declaration public HazelcastOptions()"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Events.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Events.html",
    "title": "Events Property | Hazelcast .NET Documentation",
    "keywords": "Events Property Events Gets the EventsOptions . Declaration public EventsOptions Events { get; } Property Value EventsOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.GetNearCacheOptions.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.GetNearCacheOptions.html",
    "title": "GetNearCacheOptions Method | Hazelcast .NET Documentation",
    "keywords": "GetNearCacheOptions Method GetNearCacheOptions(String) Gets options for a near cache. Declaration public NearCacheOptions GetNearCacheOptions(string name) Parameters String name The name. Returns NearCacheOptions Options for the Near Cache matching the specified name ."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Heartbeat.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Heartbeat.html",
    "title": "Heartbeat Property | Hazelcast .NET Documentation",
    "keywords": "Heartbeat Property Heartbeat Gets the HeartbeatOptions . Declaration public HeartbeatOptions Heartbeat { get; } Property Value HeartbeatOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.html",
    "title": "HazelcastOptions Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastOptions Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the Hazelcast client options. public sealed class HazelcastOptions : IClusterOptions Inheritance Object HazelcastOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors HazelcastOptions() Initializes a new instance of the HazelcastOptions class. Properties Authentication Gets the AuthenticationOptions . ClientName Gets or sets the name of the client. ClusterName Gets or sets the name of the cluster. Events Gets the EventsOptions . Heartbeat Gets the HeartbeatOptions . Labels Gets the set of client labels. LoadBalancer Gets the SingletonServiceFactory<TService> for the ILoadBalancer . LoggerFactory Gets the SingletonServiceFactory<TService> for ILoggerFactory . Messaging Gets the MessagingOptions . Metrics Gets the metrics options. NearCache Gets the CommonNearCacheOptions . NearCaches Gets the dictionary which contains the NearCacheOptions for each near cache. Networking Gets the NetworkingOptions . PatternMatcher Gets or sets the configuration pattern matcher. Serialization Gets the SerializationOptions . ServiceProvider Gets the IServiceProvider . Subscribers Gets the list of subscribers. Methods AddSubscriber(IHazelcastClientEventSubscriber) Adds a subscriber. AddSubscriber(Action<HazelcastClientEventHandlers>) Adds a subscriber. AddSubscriber(String) Adds a subscriber. AddSubscriber(Type) Adds a subscriber. AddSubscriber<T>() Adds a subscriber. Build(String[], IEnumerable<KeyValuePair<String, String>>, String, String, String, Action<IConfiguration, HazelcastOptions>) Builds Hazelcast options. GetNearCacheOptions(String) Gets options for a near cache."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Labels.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Labels.html",
    "title": "Labels Property | Hazelcast .NET Documentation",
    "keywords": "Labels Property Labels Gets the set of client labels. Declaration public ISet<string> Labels { get; } Property Value ISet < String >"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.LoadBalancer.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.LoadBalancer.html",
    "title": "LoadBalancer Property | Hazelcast .NET Documentation",
    "keywords": "LoadBalancer Property LoadBalancer Gets the SingletonServiceFactory<TService> for the ILoadBalancer . Declaration public SingletonServiceFactory<ILoadBalancer> LoadBalancer { get; } Property Value SingletonServiceFactory < ILoadBalancer > Remarks When set in the configuration file, it is defined as an injected type, for instance: \"loadBalancer\": { \"typeName\": \"My.LoadBalancer\", \"args\": { \"foo\": 42 } } where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor. In addition to custom type names, typeName can be any of the predefined Random , RoundRobin or Static values. The default load balancer is the RoundRobinLoadBalancer ."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.LoggerFactory.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.LoggerFactory.html",
    "title": "LoggerFactory Property | Hazelcast .NET Documentation",
    "keywords": "LoggerFactory Property LoggerFactory Gets the SingletonServiceFactory<TService> for ILoggerFactory . Declaration public SingletonServiceFactory<ILoggerFactory> LoggerFactory { get; } Property Value SingletonServiceFactory < ILoggerFactory > The SingletonServiceFactory<TService> for ILoggerFactory . Remarks The only option available for logging is the ILoggerFactory creator, which can only be set programmatically. All other logging options (level, etc.) are configured via the default Microsoft configuration system. See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging for details and documentation."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Messaging.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Messaging.html",
    "title": "Messaging Property | Hazelcast .NET Documentation",
    "keywords": "Messaging Property Messaging Gets the MessagingOptions . Declaration public MessagingOptions Messaging { get; } Property Value MessagingOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Metrics.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Metrics.html",
    "title": "Metrics Property | Hazelcast .NET Documentation",
    "keywords": "Metrics Property Metrics Gets the metrics options. Declaration public MetricsOptions Metrics { get; } Property Value MetricsOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.NearCache.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.NearCache.html",
    "title": "NearCache Property | Hazelcast .NET Documentation",
    "keywords": "NearCache Property NearCache Gets the CommonNearCacheOptions . Declaration public CommonNearCacheOptions NearCache { get; } Property Value CommonNearCacheOptions The common Near Cache options."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.NearCaches.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.NearCaches.html",
    "title": "NearCaches Property | Hazelcast .NET Documentation",
    "keywords": "NearCaches Property NearCaches Gets the dictionary which contains the NearCacheOptions for each near cache. Declaration public IDictionary<string, NearCacheOptions> NearCaches { get; } Property Value IDictionary < String , NearCacheOptions >"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Networking.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Networking.html",
    "title": "Networking Property | Hazelcast .NET Documentation",
    "keywords": "Networking Property Networking Gets the NetworkingOptions . Declaration public NetworkingOptions Networking { get; } Property Value NetworkingOptions"
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.PatternMatcher.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.PatternMatcher.html",
    "title": "PatternMatcher Property | Hazelcast .NET Documentation",
    "keywords": "PatternMatcher Property PatternMatcher Gets or sets the configuration pattern matcher. Declaration public IPatternMatcher PatternMatcher { get; set; } Property Value IPatternMatcher Remarks This can only be set programmatically."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Serialization.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Serialization.html",
    "title": "Serialization Property | Hazelcast .NET Documentation",
    "keywords": "Serialization Property Serialization Gets the SerializationOptions . Declaration public SerializationOptions Serialization { get; } Property Value SerializationOptions The serialization options."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.ServiceProvider.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.ServiceProvider.html",
    "title": "ServiceProvider Property | Hazelcast .NET Documentation",
    "keywords": "ServiceProvider Property ServiceProvider Gets the IServiceProvider . Declaration public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider The service provider. Remarks In dependency-injection scenario the service provider may be available, so that service factories can return injected services. In non-dependency-injection scenario, this returns null ."
  },
  "4.1.0/api/Hazelcast.HazelcastOptions.Subscribers.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptions.Subscribers.html",
    "title": "Subscribers Property | Hazelcast .NET Documentation",
    "keywords": "Subscribers Property Subscribers Gets the list of subscribers. Declaration public IList<IHazelcastClientEventSubscriber> Subscribers { get; } Property Value IList < IHazelcastClientEventSubscriber > The subscribers. Remarks Subscribers can be added to the configuration programmatically via the AddSubscriber(IHazelcastClientEventSubscriber) method or any of its overloads. A subscriber is a class that implements IHazelcastClientEventSubscriber and subscribes the client to events as soon as the client is connected. In a configuration file, they are defined as an array of injected types, for instance: \"subscribers\": [ { \"typeName\": \"My.Subscriber, My.Dll\" }, { \"typeName\": \"My.OtherSubscriber, My.dll\", \"args\": { \"foo\": 33 } } ] where typeName is the name of the type, and args is an optional dictionary of arguments for the type constructor."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.Bind.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.Bind.html",
    "title": "Bind Method | Hazelcast .NET Documentation",
    "keywords": "Bind Method Bind(String, Object) Binds an additional options instance. Declaration public HazelcastOptionsBuilder Bind(string key, object instance) Parameters String key The key for the instance. Object instance The instance. Returns HazelcastOptionsBuilder This options builder."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.Build.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build() Builds the options. Declaration public HazelcastOptions Build() Returns HazelcastOptions The options."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.html",
    "title": "HazelcastOptionsBuilder Class | Hazelcast .NET Documentation",
    "keywords": "HazelcastOptionsBuilder Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Provides a way to build HazelcastOptions instances in a fluent way. public class HazelcastOptionsBuilder Inheritance Object HazelcastOptionsBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods Bind(String, Object) Binds an additional options instance. Build() Builds the options. With(Action<IConfiguration, HazelcastOptions>) Adds an HazelcastOptions configuration delegate. With(Action<IConfigurationBuilder>) Adds an IConfigurationBuilder configuration delegate. With(String, String) Adds a key/value pair to use when building the options. With(String[]) Sets the command-line arguments to use when building the options. WithAltKey(String) Sets the alternate key for options. WithEnvironment(String) Sets the environment name to use when building the options. WithFileName(String) Sets the name (without path, with extension) of the options file to read when building the options. WithFilePath(String) Sets the path (without filename) to the options files to read when building the options."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.With.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.With.html",
    "title": "With Method | Hazelcast .NET Documentation",
    "keywords": "With Method With(String[]) Sets the command-line arguments to use when building the options. Declaration public HazelcastOptionsBuilder With(string[] args) Parameters String [] args The command-line arguments. Returns HazelcastOptionsBuilder This options builder. With(String, String) Adds a key/value pair to use when building the options. Declaration public HazelcastOptionsBuilder With(string key, string value) Parameters String key The key. String value The value. Returns HazelcastOptionsBuilder This options builder. With(Action<IConfiguration, HazelcastOptions>) Adds an HazelcastOptions configuration delegate. Declaration public HazelcastOptionsBuilder With(Action<IConfiguration, HazelcastOptions> configure) Parameters Action < IConfiguration , HazelcastOptions > configure The delegate. Returns HazelcastOptionsBuilder This options builder. With(Action<IConfigurationBuilder>) Adds an IConfigurationBuilder configuration delegate. Declaration public HazelcastOptionsBuilder With(Action<IConfigurationBuilder> setup) Parameters Action < IConfigurationBuilder > setup The delegate. Returns HazelcastOptionsBuilder This options builder."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithAltKey.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithAltKey.html",
    "title": "WithAltKey Method | Hazelcast .NET Documentation",
    "keywords": "WithAltKey Method WithAltKey(String) Sets the alternate key for options. Declaration public HazelcastOptionsBuilder WithAltKey(string key) Parameters String key The alternate key. Returns HazelcastOptionsBuilder This options builder."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithEnvironment.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithEnvironment.html",
    "title": "WithEnvironment Method | Hazelcast .NET Documentation",
    "keywords": "WithEnvironment Method WithEnvironment(String) Sets the environment name to use when building the options. Declaration public HazelcastOptionsBuilder WithEnvironment(string environmentName) Parameters String environmentName The environment name. Returns HazelcastOptionsBuilder This options builder. Remarks By default, when not provided, the name is determined the standard .NET way, i.e. from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables and, if not specified, defaults to \"Production\"."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithFileName.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithFileName.html",
    "title": "WithFileName Method | Hazelcast .NET Documentation",
    "keywords": "WithFileName Method WithFileName(String) Sets the name (without path, with extension) of the options file to read when building the options. Declaration public HazelcastOptionsBuilder WithFileName(string fileName) Parameters String fileName The name of the file. Returns HazelcastOptionsBuilder This options builder. Remarks By default, when not provided, the name is \"hazelcast\"."
  },
  "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithFilePath.html": {
    "href": "4.1.0/api/Hazelcast.HazelcastOptionsBuilder.WithFilePath.html",
    "title": "WithFilePath Method | Hazelcast .NET Documentation",
    "keywords": "WithFilePath Method WithFilePath(String) Sets the path (without filename) to the options files to read when building the options. Declaration public HazelcastOptionsBuilder WithFilePath(string filePath) Parameters String filePath The file path. Returns HazelcastOptionsBuilder This options builder. Remarks By default, when not provided, the options file is searched in the default .NET configuration location, which usually is where the application resides."
  },
  "4.1.0/api/Hazelcast.html": {
    "href": "4.1.0/api/Hazelcast.html",
    "title": "Hazelcast Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast Namespace Classes HazelcastClientEventHandlers Represents the client events. HazelcastClientFactory Creates IHazelcastClient instances. HazelcastOptions Represents the Hazelcast client options. HazelcastOptionsBuilder Provides a way to build HazelcastOptions instances in a fluent way. StateChangedEventArgs Represents event data for the state changed event. Interfaces IHazelcastClient Represents the Hazelcast client. IHazelcastClientEventHandler Defines a Hazelcast client event handler. IHazelcastClientEventSubscriber Defines an interface for classes that can subscribe to client events. Enums ClientState Defines the possible states of the client."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.BeginTransactionAsync.html",
    "title": "BeginTransactionAsync Method | Hazelcast .NET Documentation",
    "keywords": "BeginTransactionAsync Method Begins a new transaction. The method returns an ITransactionContext which can be used to obtain transactional distributed objects, and to commit or roll the transaction back. See general documetnation.... etc... BeginTransactionAsync() Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync() Returns Task < ITransactionContext > A new transaction context. BeginTransactionAsync(TransactionOptions) Begins a new transaction. Declaration Task<ITransactionContext> BeginTransactionAsync(TransactionOptions options) Parameters TransactionOptions options Transaction options. Returns Task < ITransactionContext > A new transaction context."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.ClusterName.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.ClusterName.html",
    "title": "ClusterName Property | Hazelcast .NET Documentation",
    "keywords": "ClusterName Property ClusterName Gets the name of the cluster. Declaration string ClusterName { get; } Property Value String Remarks The name of the cluster is specified by the ClusterName option value. Alternatively, it is \"dev\" by default."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.CPSubsystem.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.CPSubsystem.html",
    "title": "CPSubsystem Property | Hazelcast .NET Documentation",
    "keywords": "CPSubsystem Property CPSubsystem Gets the CP subsystem. Declaration ICPSubsystem CPSubsystem { get; } Property Value ICPSubsystem"
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.DestroyAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.DestroyAsync.html",
    "title": "DestroyAsync Method | Hazelcast .NET Documentation",
    "keywords": "DestroyAsync Method DestroyAsync(IDistributedObject) Destroys a distributed object. Declaration ValueTask DestroyAsync(IDistributedObject o) Parameters IDistributedObject o The object to destroy. Returns ValueTask A task that will complete when the object has been destroyed. Remarks Destroying a distributed object completely deletes the object on the cluster."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetListAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetListAsync.html",
    "title": "GetListAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetListAsync Method GetListAsync<T>(String) Gets an IHList<T> distributed object. Declaration Task<IHList<T>> GetListAsync<T>(string name) Parameters String name The unique name of the list. Returns Task < IHList <T>> The list that was retrieved or created. Type Parameters T The type of the list items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetMapAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetMapAsync.html",
    "title": "GetMapAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMapAsync Method GetMapAsync<TKey, TValue>(String) Gets an IHMap<TKey, TValue> distributed object. Declaration Task<IHMap<TKey, TValue>> GetMapAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHMap <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetMultiMapAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetMultiMapAsync.html",
    "title": "GetMultiMapAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMultiMapAsync Method GetMultiMapAsync<TKey, TValue>(String) Gets an IHMultiMap<TKey, TValue> distributed object. Declaration Task<IHMultiMap<TKey, TValue>> GetMultiMapAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHMultiMap <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetQueueAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetQueueAsync.html",
    "title": "GetQueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetQueueAsync Method GetQueueAsync<T>(String) Gets an IHQueue<T> distributed object. Declaration Task<IHQueue<T>> GetQueueAsync<T>(string name) Parameters String name The unique name of the queue. Returns Task < IHQueue <T>> The queue that was retrieved or created. Type Parameters T The type of the queue items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetReplicatedMapAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetReplicatedMapAsync.html",
    "title": "GetReplicatedMapAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetReplicatedMapAsync Method GetReplicatedMapAsync<TKey, TValue>(String) Gets an IHReplicatedMap<TKey, TValue> distributed object. Declaration Task<IHReplicatedMap<TKey, TValue>> GetReplicatedMapAsync<TKey, TValue>(string name) Parameters String name The unique name of the map. Returns Task < IHReplicatedMap <TKey, TValue>> The map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetRingBufferAsync.html",
    "title": "GetRingBufferAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetRingBufferAsync Method GetRingBufferAsync<T>(String) Gets an IHRingBuffer<TItem> distributed object. Declaration Task<IHRingBuffer<T>> GetRingBufferAsync<T>(string name) Parameters String name The unique name of the ring buffer. Returns Task < IHRingBuffer <T>> The ring buffer that was retrieved or created. Type Parameters T The type of the ring buffer items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetSetAsync.html",
    "title": "GetSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSetAsync Method GetSetAsync<T>(String) Gets an IHSet<T> distributed object. Declaration Task<IHSet<T>> GetSetAsync<T>(string name) Parameters String name The unique name of the set. Returns Task < IHSet <T>> The set that was retrieved or created. Type Parameters T The type of the set items. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.GetTopicAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.GetTopicAsync.html",
    "title": "GetTopicAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetTopicAsync Method GetTopicAsync<T>(String) Gets an IHTopic<T> distributed object. Declaration Task<IHTopic<T>> GetTopicAsync<T>(string name) Parameters String name The unique name of the topic. Returns Task < IHTopic <T>> The topic that was retrieved or created. Type Parameters T The type of the topic messages. Remarks If an object with the specified name does not exist already in the cluster, a new object is created."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.html",
    "title": "IHazelcastClient Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClient Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents the Hazelcast client. The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by a HazelcastClientFactory . Before it can be used, it needs to be opened via the @Hazelcast.IHazelcastClient.OpenAsync* method. After it has been used, it needs to be disposed in order to properly release its resources. For example: var options = HazelcastOptions.Build(); var factory = new HazelcastClientFactory(options); var client = factory.CreateClient(); await client.OpenAsync(); // ... use the client ... await client.DisposeAsync(); See Hazelcast Client in the general documentation for more details. public interface IHazelcastClient : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties ClusterName Gets the name of the cluster. CPSubsystem Gets the CP subsystem. Id Gets the unique identifier of this client. IsActive Whether the client is active. IsConnected Whether the client is connected. Members Gets a snapshot of the members this client is currently connected to. Name Gets the name of this client. Methods BeginTransactionAsync() Begins a new transaction. BeginTransactionAsync(TransactionOptions) Begins a new transaction. DestroyAsync(IDistributedObject) Destroys a distributed object. GetListAsync<T>(String) Gets an IHList<T> distributed object. GetMapAsync<TKey, TValue>(String) Gets an IHMap<TKey, TValue> distributed object. GetMultiMapAsync<TKey, TValue>(String) Gets an IHMultiMap<TKey, TValue> distributed object. GetQueueAsync<T>(String) Gets an IHQueue<T> distributed object. GetReplicatedMapAsync<TKey, TValue>(String) Gets an IHReplicatedMap<TKey, TValue> distributed object. GetRingBufferAsync<T>(String) Gets an IHRingBuffer<TItem> distributed object. GetSetAsync<T>(String) Gets an IHSet<T> distributed object. GetTopicAsync<T>(String) Gets an IHTopic<T> distributed object. SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. UnsubscribeAsync(Guid) Unsubscribe from events."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.Id.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the unique identifier of this client. Declaration Guid Id { get; } Property Value Guid Remarks The unique identifier of the client is a self-assigned random Guid ."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.IsActive.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.IsActive.html",
    "title": "IsActive Property | Hazelcast .NET Documentation",
    "keywords": "IsActive Property IsActive Whether the client is active. Declaration bool IsActive { get; } Property Value Boolean true if the client is active; otherwise false . Remarks The client can be active but not connected, trying to reconnect."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.IsConnected.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.IsConnected.html",
    "title": "IsConnected Property | Hazelcast .NET Documentation",
    "keywords": "IsConnected Property IsConnected Whether the client is connected. Declaration bool IsConnected { get; } Property Value Boolean true if the client is connected; otherwise false . Remarks The client can be active but not connected, trying to reconnect."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.Members.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.Members.html",
    "title": "Members Property | Hazelcast .NET Documentation",
    "keywords": "Members Property Members Gets a snapshot of the members this client is currently connected to. Declaration IReadOnlyCollection<MemberInfo> Members { get; } Property Value IReadOnlyCollection < MemberInfo >"
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.Name.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of this client. Declaration string Name { get; } Property Value String Remarks The name of a client can be fully specified by ClientName option value. Alternatively, it is automatically generated by combining with a sequence number."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.SubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.SubscribeAsync.html",
    "title": "SubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "SubscribeAsync Method SubscribeAsync(Action<HazelcastClientEventHandlers>) Subscribes to events. Declaration Task<Guid> SubscribeAsync(Action<HazelcastClientEventHandlers> events) Parameters Action < HazelcastClientEventHandlers > events An event handlers collection builder. Returns Task < Guid > The unique identifier of the subscription."
  },
  "4.1.0/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClient.UnsubscribeAsync.html",
    "title": "UnsubscribeAsync Method | Hazelcast .NET Documentation",
    "keywords": "UnsubscribeAsync Method UnsubscribeAsync(Guid) Unsubscribe from events. Declaration ValueTask<bool> UnsubscribeAsync(Guid subscriptionId) Parameters Guid subscriptionId The unique identifier of the subscription. Returns ValueTask < Boolean > Whether the un-registration was successful on the server."
  },
  "4.1.0/api/Hazelcast.IHazelcastClientEventHandler.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClientEventHandler.html",
    "title": "IHazelcastClientEventHandler Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClientEventHandler Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Defines a Hazelcast client event handler. public interface IHazelcastClientEventHandler"
  },
  "4.1.0/api/Hazelcast.IHazelcastClientEventSubscriber.Build.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClientEventSubscriber.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build(HazelcastClientEventHandlers) Builds handlers. Declaration void Build(HazelcastClientEventHandlers events) Parameters HazelcastClientEventHandlers events An event handlers collection builder."
  },
  "4.1.0/api/Hazelcast.IHazelcastClientEventSubscriber.html": {
    "href": "4.1.0/api/Hazelcast.IHazelcastClientEventSubscriber.html",
    "title": "IHazelcastClientEventSubscriber Interface | Hazelcast .NET Documentation",
    "keywords": "IHazelcastClientEventSubscriber Interface Namespace: Hazelcast Assembly: Hazelcast.Net.dll Defines an interface for classes that can subscribe to client events. public interface IHazelcastClientEventSubscriber Methods Build(HazelcastClientEventHandlers) Builds handlers."
  },
  "4.1.0/api/Hazelcast.Messaging.html": {
    "href": "4.1.0/api/Hazelcast.Messaging.html",
    "title": "Hazelcast.Messaging Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Messaging Namespace Classes MessagingOptions Represents messaging options."
  },
  "4.1.0/api/Hazelcast.Messaging.MessagingOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Messaging.MessagingOptions.-ctor.html",
    "title": "MessagingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "MessagingOptions Constructor MessagingOptions() Initializes a new instance of the MessagingOptions class. Declaration public MessagingOptions()"
  },
  "4.1.0/api/Hazelcast.Messaging.MessagingOptions.html": {
    "href": "4.1.0/api/Hazelcast.Messaging.MessagingOptions.html",
    "title": "MessagingOptions Class | Hazelcast .NET Documentation",
    "keywords": "MessagingOptions Class Namespace: Hazelcast.Messaging Assembly: Hazelcast.Net.dll Represents messaging options. public class MessagingOptions Inheritance Object MessagingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MessagingOptions() Initializes a new instance of the MessagingOptions class. Properties MinRetryDelayMilliseconds Gets or sets the min retry delay. RetryTimeoutSeconds Gets or sets the invocation timeout."
  },
  "4.1.0/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Messaging.MessagingOptions.MinRetryDelayMilliseconds.html",
    "title": "MinRetryDelayMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "MinRetryDelayMilliseconds Property MinRetryDelayMilliseconds Gets or sets the min retry delay. Declaration public int MinRetryDelayMilliseconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Messaging.MessagingOptions.RetryTimeoutSeconds.html": {
    "href": "4.1.0/api/Hazelcast.Messaging.MessagingOptions.RetryTimeoutSeconds.html",
    "title": "RetryTimeoutSeconds Property | Hazelcast .NET Documentation",
    "keywords": "RetryTimeoutSeconds Property RetryTimeoutSeconds Gets or sets the invocation timeout. Declaration public int RetryTimeoutSeconds { get; set; } Property Value Int32 Remarks The RetryTimeoutSeconds is a soft timeout that prevents retrying an invocation for too long in case it fails. It does not controls the duration of a single try, and does not abort it. And invocation single try can run for as long as the connection that supports it remains open."
  },
  "4.1.0/api/Hazelcast.Metrics.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.html",
    "title": "Hazelcast.Metrics Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Metrics Namespace Classes MetricsOptions Represents the client metrics options."
  },
  "4.1.0/api/Hazelcast.Metrics.MetricsOptions.Clone.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.MetricsOptions.Clone.html",
    "title": "Clone Method | Hazelcast .NET Documentation",
    "keywords": "Clone Method Clone() Clone the options. Declaration public MetricsOptions Clone() Returns MetricsOptions A deep clone of the options."
  },
  "4.1.0/api/Hazelcast.Metrics.MetricsOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.MetricsOptions.-ctor.html",
    "title": "MetricsOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "MetricsOptions Constructor MetricsOptions() Initializes a new instance of the MetricsOptions class. Declaration public MetricsOptions()"
  },
  "4.1.0/api/Hazelcast.Metrics.MetricsOptions.Enabled.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.MetricsOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether client statistics are enabled. Declaration public bool Enabled { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Metrics.MetricsOptions.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.MetricsOptions.html",
    "title": "MetricsOptions Class | Hazelcast .NET Documentation",
    "keywords": "MetricsOptions Class Namespace: Hazelcast.Metrics Assembly: Hazelcast.Net.dll Represents the client metrics options. public class MetricsOptions Inheritance Object MetricsOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors MetricsOptions() Initializes a new instance of the MetricsOptions class. Properties Enabled Whether client statistics are enabled. PeriodSeconds Gets or sets the period at which client metrics are sent to the cluster. Methods Clone() Clone the options."
  },
  "4.1.0/api/Hazelcast.Metrics.MetricsOptions.PeriodSeconds.html": {
    "href": "4.1.0/api/Hazelcast.Metrics.MetricsOptions.PeriodSeconds.html",
    "title": "PeriodSeconds Property | Hazelcast .NET Documentation",
    "keywords": "PeriodSeconds Property PeriodSeconds Gets or sets the period at which client metrics are sent to the cluster. Declaration public int PeriodSeconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.html": {
    "href": "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.html",
    "title": "BitmapIndexOptions Class | Hazelcast .NET Documentation",
    "keywords": "BitmapIndexOptions Class Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Configures indexing options for Bitmap indexes. public class BitmapIndexOptions Inheritance Object BitmapIndexOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties UniqueKey Gets or sets the unique key. UniqueKeyTransformation Gets or sets the UniqueKeyTransformation which will be applied to the UniqueKey value."
  },
  "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.UniqueKey.html": {
    "href": "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.UniqueKey.html",
    "title": "UniqueKey Property | Hazelcast .NET Documentation",
    "keywords": "UniqueKey Property UniqueKey Gets or sets the unique key. Declaration public string UniqueKey { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.UniqueKeyTransformation.html": {
    "href": "4.1.0/api/Hazelcast.Models.BitmapIndexOptions.UniqueKeyTransformation.html",
    "title": "UniqueKeyTransformation Property | Hazelcast .NET Documentation",
    "keywords": "UniqueKeyTransformation Property UniqueKeyTransformation Gets or sets the UniqueKeyTransformation which will be applied to the UniqueKey value. Declaration public UniqueKeyTransformation UniqueKeyTransformation { get; set; } Property Value UniqueKeyTransformation"
  },
  "4.1.0/api/Hazelcast.Models.CollectionItemEventTypes.html": {
    "href": "4.1.0/api/Hazelcast.Models.CollectionItemEventTypes.html",
    "title": "CollectionItemEventTypes Enum | Hazelcast .NET Documentation",
    "keywords": "CollectionItemEventTypes Enum Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Specifies the collection item event types. [Flags] public enum CollectionItemEventTypes Fields Added The item was added. Removed The item was removed."
  },
  "4.1.0/api/Hazelcast.Models.html": {
    "href": "4.1.0/api/Hazelcast.Models.html",
    "title": "Hazelcast.Models Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Models Namespace Classes BitmapIndexOptions Configures indexing options for Bitmap indexes. IndexOptions Configuration of an index. MemberInfo Represents a member of a cluster. MemberVersion Represents the version of a cluster member. Interfaces IMapEntryStats<TKey, TValue> Represents statistics for an entry in an IHMap<TKey, TValue> . Enums CollectionItemEventTypes Specifies the collection item event types. IndexType Type of the index. MapEventTypes Specifies the map and entries event types. UniqueKeyTransformation Defines transformations which can be applied to UniqueKey values."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Cost.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Cost.html",
    "title": "Cost Property | Hazelcast .NET Documentation",
    "keywords": "Cost Property Cost Gets the cost in bytes of the entry. Declaration long Cost { get; } Property Value Int64 The cost in bytes, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.CreationTime.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.CreationTime.html",
    "title": "CreationTime Property | Hazelcast .NET Documentation",
    "keywords": "CreationTime Property CreationTime Gets the creation epoch time of the entry. Declaration long CreationTime { get; } Property Value Int64 The creation epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.ExpirationTime.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.ExpirationTime.html",
    "title": "ExpirationTime Property | Hazelcast .NET Documentation",
    "keywords": "ExpirationTime Property ExpirationTime Gets the expiration epoch time of the entry. Declaration long ExpirationTime { get; } Property Value Int64 The expiration epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Hits.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Hits.html",
    "title": "Hits Property | Hazelcast .NET Documentation",
    "keywords": "Hits Property Hits Gets number of hits of the entry. Declaration long Hits { get; } Property Value Int64 The number of hits of the entry, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.html",
    "title": "IMapEntryStats<TKey, TValue> Interface | Hazelcast .NET Documentation",
    "keywords": "IMapEntryStats<TKey, TValue> Interface Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Represents statistics for an entry in an IHMap<TKey, TValue> . public interface IMapEntryStats<out TKey, out TValue> Type Parameters TKey TValue Properties Cost Gets the cost in bytes of the entry. CreationTime Gets the creation epoch time of the entry. ExpirationTime Gets the expiration epoch time of the entry. Hits Gets number of hits of the entry. Key Gets the key of the entry. LastAccessTime Gets the last access epoch time to the entry. LastStoredTime Gets the last epoch time the value was flushed to MapStore. LastUpdateTime Gets the last epoch time the value was updated. Value Gets the value of the entry. Version Gets the version of the entry."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Key.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Key.html",
    "title": "Key Property | Hazelcast .NET Documentation",
    "keywords": "Key Property Key Gets the key of the entry. Declaration TKey Key { get; } Property Value TKey The key of the entry."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastAccessTime.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastAccessTime.html",
    "title": "LastAccessTime Property | Hazelcast .NET Documentation",
    "keywords": "LastAccessTime Property LastAccessTime Gets the last access epoch time to the entry. Declaration long LastAccessTime { get; } Property Value Int64 The last access epoch time of the entry, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastStoredTime.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastStoredTime.html",
    "title": "LastStoredTime Property | Hazelcast .NET Documentation",
    "keywords": "LastStoredTime Property LastStoredTime Gets the last epoch time the value was flushed to MapStore. Declaration long LastStoredTime { get; } Property Value Int64 The last epoch time the value was flushed to MapStore, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastUpdateTime.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.LastUpdateTime.html",
    "title": "LastUpdateTime Property | Hazelcast .NET Documentation",
    "keywords": "LastUpdateTime Property LastUpdateTime Gets the last epoch time the value was updated. Declaration long LastUpdateTime { get; } Property Value Int64 The last epoch time the value was updated, if statistics are enabled; otherwise -1 ."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Value.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Value.html",
    "title": "Value Property | Hazelcast .NET Documentation",
    "keywords": "Value Property Value Gets the value of the entry. Declaration TValue Value { get; } Property Value TValue The value of the entry."
  },
  "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Version.html": {
    "href": "4.1.0/api/Hazelcast.Models.IMapEntryStats-2.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Gets the version of the entry. Declaration long Version { get; } Property Value Int64 The version of the entry."
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.AddAttribute.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.AddAttribute.html",
    "title": "AddAttribute Method | Hazelcast .NET Documentation",
    "keywords": "AddAttribute Method AddAttribute(String) Adds an indexed attribute. Declaration public IndexOptions AddAttribute(string attribute) Parameters String attribute The name of the attribute. Returns IndexOptions This instance for chaining."
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.AddAttributes.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.AddAttributes.html",
    "title": "AddAttributes Method | Hazelcast .NET Documentation",
    "keywords": "AddAttributes Method AddAttributes(String[]) Adds indexed attributes. Declaration public IndexOptions AddAttributes(params string[] attributes) Parameters String [] attributes The names of the attributes. Returns IndexOptions This instance for chaining."
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.Attributes.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.Attributes.html",
    "title": "Attributes Property | Hazelcast .NET Documentation",
    "keywords": "Attributes Property Attributes Gets the indexed attributes. Declaration public IList<string> Attributes { get; } Property Value IList < String >"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.BitmapIndexOptions.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.BitmapIndexOptions.html",
    "title": "BitmapIndexOptions Property | Hazelcast .NET Documentation",
    "keywords": "BitmapIndexOptions Property BitmapIndexOptions Gets or sets the bitmap index options. Declaration public BitmapIndexOptions BitmapIndexOptions { get; set; } Property Value BitmapIndexOptions"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.-ctor.html",
    "title": "IndexOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "IndexOptions Constructor IndexOptions() Initializes a new instance of the IndexOptions class. Declaration public IndexOptions() IndexOptions(IEnumerable<String>) Initializes a new instance of the IndexOptions class. Declaration public IndexOptions(IEnumerable<string> attributes) Parameters IEnumerable < String > attributes"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.DefaultType.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.DefaultType.html",
    "title": "DefaultType Field | Hazelcast .NET Documentation",
    "keywords": "DefaultType Field Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll public static readonly IndexType DefaultType Returns IndexType"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.html",
    "title": "IndexOptions Class | Hazelcast .NET Documentation",
    "keywords": "IndexOptions Class Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Configuration of an index. public class IndexOptions Inheritance Object IndexOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Remarks Hazelcast support three types of indexes: sorted, hash and bitmap indexes. They can be created on one or more attributes, specified by their name. Sorted indexes can be used with equality and range predicates and have logarithmic search time. Hash indexes can be used with equality predicates and have constant search time assuming the hash function of the indexed field disperses the elements properly. Bitmap indexes (to be completed). Constructors IndexOptions() Initializes a new instance of the IndexOptions class. IndexOptions(IEnumerable<String>) Initializes a new instance of the IndexOptions class. Fields DefaultType Properties Attributes Gets the indexed attributes. BitmapIndexOptions Gets or sets the bitmap index options. Name Gets or sets the name of the index. Type Gets or sets the type of the index. Methods AddAttribute(String) Adds an indexed attribute. AddAttributes(String[]) Adds indexed attributes. ToString()"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.Name.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets or sets the name of the index. Declaration public string Name { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Models.IndexOptions.Type.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexOptions.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Gets or sets the type of the index. Declaration public IndexType Type { get; set; } Property Value IndexType"
  },
  "4.1.0/api/Hazelcast.Models.IndexType.html": {
    "href": "4.1.0/api/Hazelcast.Models.IndexType.html",
    "title": "IndexType Enum | Hazelcast .NET Documentation",
    "keywords": "IndexType Enum Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Type of the index. public enum IndexType Fields Bitmap Bitmap index. Can be used with equality predicates. Hashed Hash index. Can be used with equality predicates. Sorted Sorted index. Can be used with equality and range predicates."
  },
  "4.1.0/api/Hazelcast.Models.MapEventTypes.html": {
    "href": "4.1.0/api/Hazelcast.Models.MapEventTypes.html",
    "title": "MapEventTypes Enum | Hazelcast .NET Documentation",
    "keywords": "MapEventTypes Enum Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Specifies the map and entries event types. [Flags] public enum MapEventTypes Fields Added The entry was added. AllCleared All entries were cleared. AllEvicted All entries were evicted. Evicted The entry was evicted. Expired The entry has expired. Invalidated The entry was invalidated. Loaded The entry was loaded. Merged The entry was merged. Removed The entry was removed. Updated The entry was updated."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.Address.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.Address.html",
    "title": "Address Property | Hazelcast .NET Documentation",
    "keywords": "Address Property Address Gets the network address of the member. Declaration public NetworkAddress Address { get; } Property Value NetworkAddress"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.Attributes.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.Attributes.html",
    "title": "Attributes Property | Hazelcast .NET Documentation",
    "keywords": "Attributes Property Attributes Gets the attributes of the member. Declaration public IReadOnlyDictionary<string, string> Attributes { get; } Property Value IReadOnlyDictionary < String , String >"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.-ctor.html",
    "title": "MemberInfo Constructor | Hazelcast .NET Documentation",
    "keywords": "MemberInfo Constructor MemberInfo(Guid, NetworkAddress, MemberVersion, Boolean, IDictionary<String, String>) Initializes a new instance of the MemberInfo class. Declaration public MemberInfo(Guid id, NetworkAddress address, MemberVersion version, bool isLiteMember, IDictionary<string, string> attributes) Parameters Guid id The unique identifier of the member. NetworkAddress address The network address of the member. MemberVersion version The version of the server running the member. Boolean isLiteMember Whether the member is a \"lite\" member. IDictionary < String , String > attributes Attributes of the member."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.Equals.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) Equals(MemberInfo) Determines whether this MemberInfo instance is equal to another MemberInfo instance. Declaration public bool Equals(MemberInfo other) Parameters MemberInfo other The other MemberInfo instance. Returns Boolean true if this MemberInfo instance and the other MemberInfo instance are considered being equal; otherwise false . Implements IEquatable<T>.Equals(T)"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.GetHashCode.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.html",
    "title": "MemberInfo Class | Hazelcast .NET Documentation",
    "keywords": "MemberInfo Class Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Represents a member of a cluster. public class MemberInfo : IEquatable<MemberInfo> Inheritance Object MemberInfo Implements IEquatable < MemberInfo > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Remarks This class implements IEquatable<T> and two instances are considered equal if their Id are identical (the other fields are not considered for equality). Constructors MemberInfo(Guid, NetworkAddress, MemberVersion, Boolean, IDictionary<String, String>) Initializes a new instance of the MemberInfo class. Properties Address Gets the network address of the member. Attributes Gets the attributes of the member. Id Gets the unique identifier of the member. IsLiteMember Determines whether the member is a \"lite\" member. Version Gets the version of the server running the member. Methods Equals(MemberInfo) Determines whether this MemberInfo instance is equal to another MemberInfo instance. Equals(Object) GetHashCode() ToString() Operators Equality(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are equal. Inequality(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are not equal."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.Id.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets the unique identifier of the member. Declaration public Guid Id { get; } Property Value Guid"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.IsLiteMember.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.IsLiteMember.html",
    "title": "IsLiteMember Property | Hazelcast .NET Documentation",
    "keywords": "IsLiteMember Property IsLiteMember Determines whether the member is a \"lite\" member. Declaration public bool IsLiteMember { get; } Property Value Boolean Remarks Lite members do not own partitions."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.op_Equality.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.op_Equality.html",
    "title": "Equality Operator | Hazelcast .NET Documentation",
    "keywords": "Equality Operator Equality(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are equal. Declaration public static bool operator ==(MemberInfo left, MemberInfo right) Parameters MemberInfo left The first MemberInfo instance. MemberInfo right The second MemberInfo instance. Returns Boolean true if the two MemberInfo instances are considered being equal; otherwise false ."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.op_Inequality.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.op_Inequality.html",
    "title": "Inequality Operator | Hazelcast .NET Documentation",
    "keywords": "Inequality Operator Inequality(MemberInfo, MemberInfo) Determines whether two MemberInfo instances are not equal. Declaration public static bool operator !=(MemberInfo left, MemberInfo right) Parameters MemberInfo left The first MemberInfo instance. MemberInfo right The second MemberInfo instance. Returns Boolean true if the two MemberInfo instances are considered being not equal; otherwise false ."
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Models.MemberInfo.Version.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberInfo.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Gets the version of the server running the member. Declaration public MemberVersion Version { get; } Property Value MemberVersion"
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.-ctor.html",
    "title": "MemberVersion Constructor | Hazelcast .NET Documentation",
    "keywords": "MemberVersion Constructor MemberVersion(Byte, Byte, Byte) Initializes a new instance of the MemberVersion class. Declaration public MemberVersion(byte major, byte minor, byte patch) Parameters Byte major The major version number. Byte minor The minor version number. Byte patch The patch version number."
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.html",
    "title": "MemberVersion Class | Hazelcast .NET Documentation",
    "keywords": "MemberVersion Class Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Represents the version of a cluster member. public class MemberVersion Inheritance Object MemberVersion Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors MemberVersion(Byte, Byte, Byte) Initializes a new instance of the MemberVersion class. Properties Major Gets the major version number. Minor Gets the minor version number. Patch Gets the patch version number. Methods ToString()"
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.Major.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.Major.html",
    "title": "Major Property | Hazelcast .NET Documentation",
    "keywords": "Major Property Major Gets the major version number. Declaration public byte Major { get; } Property Value Byte"
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.Minor.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.Minor.html",
    "title": "Minor Property | Hazelcast .NET Documentation",
    "keywords": "Minor Property Minor Gets the minor version number. Declaration public byte Minor { get; } Property Value Byte"
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.Patch.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.Patch.html",
    "title": "Patch Property | Hazelcast .NET Documentation",
    "keywords": "Patch Property Patch Gets the patch version number. Declaration public byte Patch { get; } Property Value Byte"
  },
  "4.1.0/api/Hazelcast.Models.MemberVersion.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Models.MemberVersion.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Models.UniqueKeyTransformation.html": {
    "href": "4.1.0/api/Hazelcast.Models.UniqueKeyTransformation.html",
    "title": "UniqueKeyTransformation Enum | Hazelcast .NET Documentation",
    "keywords": "UniqueKeyTransformation Enum Namespace: Hazelcast.Models Assembly: Hazelcast.Net.dll Defines transformations which can be applied to UniqueKey values. public enum UniqueKeyTransformation Fields Long The unique key value is interpreted as a whole integer value of byte, short, int or long type. The extracted value is upcasted to long (if necessary) and unique non-negative ID is assigned to every distinct value. Object The unique key value is interpreted as an object value. Non-negative unique ID is assigned to every distinct object value. Raw The unique key value is interpreted as a whole integer value of byte, short, int or long type. The extracted value is upcasted to long (if necessary) and the resulting value is used directly as an ID."
  },
  "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.-ctor.html",
    "title": "CommonNearCacheOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "CommonNearCacheOptions Constructor CommonNearCacheOptions() Initializes a new instance of the CommonNearCacheOptions class. Declaration public CommonNearCacheOptions()"
  },
  "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.html",
    "title": "CommonNearCacheOptions Class | Hazelcast .NET Documentation",
    "keywords": "CommonNearCacheOptions Class Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Represents the advanced Near Cache options. public class CommonNearCacheOptions Inheritance Object CommonNearCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors CommonNearCacheOptions() Initializes a new instance of the CommonNearCacheOptions class. Properties MaxToleratedMissCount Gets or sets the maximum tolerated miss count. MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. ReconciliationIntervalSeconds Gets or sets the reconciliation interval."
  },
  "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.MaxToleratedMissCount.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.MaxToleratedMissCount.html",
    "title": "MaxToleratedMissCount Property | Hazelcast .NET Documentation",
    "keywords": "MaxToleratedMissCount Property MaxToleratedMissCount Gets or sets the maximum tolerated miss count. Declaration public int MaxToleratedMissCount { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.MinReconciliationIntervalSeconds.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.MinReconciliationIntervalSeconds.html",
    "title": "MinReconciliationIntervalSeconds Property | Hazelcast .NET Documentation",
    "keywords": "MinReconciliationIntervalSeconds Property MinReconciliationIntervalSeconds Gets or sets the minimum reconciliation interval. Declaration public int MinReconciliationIntervalSeconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.ReconciliationIntervalSeconds.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.CommonNearCacheOptions.ReconciliationIntervalSeconds.html",
    "title": "ReconciliationIntervalSeconds Property | Hazelcast .NET Documentation",
    "keywords": "ReconciliationIntervalSeconds Property ReconciliationIntervalSeconds Gets or sets the reconciliation interval. Declaration public int ReconciliationIntervalSeconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.NearCaching.EvictionPolicy.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.EvictionPolicy.html",
    "title": "EvictionPolicy Enum | Hazelcast .NET Documentation",
    "keywords": "EvictionPolicy Enum Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Defines near caching eviction policies. public enum EvictionPolicy Fields Lfu Evict least-frequently used entries first. Lru Evict least-recently used entries first. None No eviction policy. Random Evict random entries."
  },
  "4.1.0/api/Hazelcast.NearCaching.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.html",
    "title": "Hazelcast.NearCaching Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.NearCaching Namespace Classes CommonNearCacheOptions Represents the advanced Near Cache options. NearCacheOptions Represents the options for one Near Cache. Enums EvictionPolicy Defines near caching eviction policies."
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.-ctor.html",
    "title": "NearCacheOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "NearCacheOptions Constructor NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Declaration public NearCacheOptions()"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.EvictionPolicy.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.EvictionPolicy.html",
    "title": "EvictionPolicy Property | Hazelcast .NET Documentation",
    "keywords": "EvictionPolicy Property EvictionPolicy Gets or sets the eviction policy. Declaration public EvictionPolicy EvictionPolicy { get; set; } Property Value EvictionPolicy"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.html",
    "title": "NearCacheOptions Class | Hazelcast .NET Documentation",
    "keywords": "NearCacheOptions Class Namespace: Hazelcast.NearCaching Assembly: Hazelcast.Net.dll Represents the options for one Near Cache. public class NearCacheOptions Inheritance Object NearCacheOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NearCacheOptions() Initializes a new instance of the NearCacheOptions class. Properties EvictionPolicy Gets or sets the eviction policy. InMemoryFormat Gets or sets the in-memory format. InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. MaxSize Gets or sets the maximum size of the cache before entries get evicted. TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Methods ToString()"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.InMemoryFormat.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.InMemoryFormat.html",
    "title": "InMemoryFormat Property | Hazelcast .NET Documentation",
    "keywords": "InMemoryFormat Property InMemoryFormat Gets or sets the in-memory format. Declaration public InMemoryFormat InMemoryFormat { get; set; } Property Value InMemoryFormat"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.InvalidateOnChange.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.InvalidateOnChange.html",
    "title": "InvalidateOnChange Property | Hazelcast .NET Documentation",
    "keywords": "InvalidateOnChange Property InvalidateOnChange Whether to invalidate entries when entries in the backing data structure are changed. Declaration public bool InvalidateOnChange { get; set; } Property Value Boolean Remarks When true, the cache listens for cluster-wide changes and invalidate entries accordingly. Changes to the local Hazelcast instance always invalidate the cache immediately."
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.MaxIdleSeconds.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.MaxIdleSeconds.html",
    "title": "MaxIdleSeconds Property | Hazelcast .NET Documentation",
    "keywords": "MaxIdleSeconds Property MaxIdleSeconds Gets or sets the maximum number of seconds an entry can stay in the cache untouched before being evicted. Declaration public int MaxIdleSeconds { get; set; } Property Value Int32 Remarks zero means forever."
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.MaxSize.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.MaxSize.html",
    "title": "MaxSize Property | Hazelcast .NET Documentation",
    "keywords": "MaxSize Property MaxSize Gets or sets the maximum size of the cache before entries get evicted. Declaration public int MaxSize { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.TimeToLiveSeconds.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.TimeToLiveSeconds.html",
    "title": "TimeToLiveSeconds Property | Hazelcast .NET Documentation",
    "keywords": "TimeToLiveSeconds Property TimeToLiveSeconds Gets or sets the number of seconds entries stay in the cache before being evicted. Declaration public int TimeToLiveSeconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.ToString.html": {
    "href": "4.1.0/api/Hazelcast.NearCaching.NearCacheOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Networking.CloudOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Networking.CloudOptions.-ctor.html",
    "title": "CloudOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "CloudOptions Constructor CloudOptions() Initializes a new instance of the CloudOptions class. Declaration public CloudOptions()"
  },
  "4.1.0/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html": {
    "href": "4.1.0/api/Hazelcast.Networking.CloudOptions.DiscoveryToken.html",
    "title": "DiscoveryToken Property | Hazelcast .NET Documentation",
    "keywords": "DiscoveryToken Property DiscoveryToken Gets or sets the discovery token of the cluster. Declaration public string DiscoveryToken { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Networking.CloudOptions.Enabled.html": {
    "href": "4.1.0/api/Hazelcast.Networking.CloudOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether Hazelcast Cloud is enabled. Declaration public bool Enabled { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.CloudOptions.html": {
    "href": "4.1.0/api/Hazelcast.Networking.CloudOptions.html",
    "title": "CloudOptions Class | Hazelcast .NET Documentation",
    "keywords": "CloudOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the Hazelcast Cloud options. public class CloudOptions Inheritance Object CloudOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors CloudOptions() Initializes a new instance of the CloudOptions class. Properties DiscoveryToken Gets or sets the discovery token of the cluster. Enabled Whether Hazelcast Cloud is enabled. Url Gets or sets the cloud url base."
  },
  "4.1.0/api/Hazelcast.Networking.CloudOptions.Url.html": {
    "href": "4.1.0/api/Hazelcast.Networking.CloudOptions.Url.html",
    "title": "Url Property | Hazelcast .NET Documentation",
    "keywords": "Url Property Url Gets or sets the cloud url base. Declaration public Uri Url { get; set; } Property Value Uri"
  },
  "4.1.0/api/Hazelcast.Networking.html": {
    "href": "4.1.0/api/Hazelcast.Networking.html",
    "title": "Hazelcast.Networking Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Networking Namespace Classes CloudOptions Represents the Hazelcast Cloud options. NetworkAddress Represents a network address. NetworkingOptions Represents the networking options. SocketOptions Represents the TCP socket options. SslOptions Represents the SSL options. Enums ReconnectMode Defines options for reconnecting a disconnected client."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.-ctor.html",
    "title": "NetworkAddress Constructor | Hazelcast .NET Documentation",
    "keywords": "NetworkAddress Constructor NetworkAddress(String, Int32) Initializes a new instance of the NetworkAddress class with a hostname and a port. Declaration public NetworkAddress(string hostName, int port = 0) Parameters String hostName The hostname. Int32 port The port. NetworkAddress(IPAddress, Int32) Initializes a new instance of the NetworkAddress class with an IP address and a port. Declaration public NetworkAddress(IPAddress ipAddress, int port = 0) Parameters IPAddress ipAddress The IP address. Int32 port The port."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.Equals.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) Equals(NetworkAddress) Declaration public bool Equals(NetworkAddress other) Parameters NetworkAddress other Returns Boolean Implements IEquatable<T>.Equals(T)"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.HostName.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.HostName.html",
    "title": "HostName Property | Hazelcast .NET Documentation",
    "keywords": "HostName Property HostName Gets the host name. Declaration public string HostName { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.html",
    "title": "NetworkAddress Class | Hazelcast .NET Documentation",
    "keywords": "NetworkAddress Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents a network address. public class NetworkAddress : IEquatable<NetworkAddress> Inheritance Object NetworkAddress Implements IEquatable < NetworkAddress > Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors NetworkAddress(IPAddress, Int32) Initializes a new instance of the NetworkAddress class with an IP address and a port. NetworkAddress(String, Int32) Initializes a new instance of the NetworkAddress class with a hostname and a port. Properties HostName Gets the host name. IPAddress Gets the IP address corresponding to this address. IPEndPoint Gets the IP endpoint corresponding to this address. IsIpV4 Whether the address is an IP v4 address. IsIpV6 Whether the address is an IP v6 address. IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Port Gets the port. Methods Equals(NetworkAddress) Equals(Object) GetHashCode() ToString() Operators Equality(NetworkAddress, NetworkAddress) Overrides the == operator. Inequality(NetworkAddress, NetworkAddress) Overrides the != operator."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.IPAddress.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.IPAddress.html",
    "title": "IPAddress Property | Hazelcast .NET Documentation",
    "keywords": "IPAddress Property IPAddress Gets the IP address corresponding to this address. Declaration public IPAddress IPAddress { get; } Property Value IPAddress"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.IPEndPoint.html",
    "title": "IPEndPoint Property | Hazelcast .NET Documentation",
    "keywords": "IPEndPoint Property IPEndPoint Gets the IP endpoint corresponding to this address. Declaration public IPEndPoint IPEndPoint { get; } Property Value IPEndPoint"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV4.html",
    "title": "IsIpV4 Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV4 Property IsIpV4 Whether the address is an IP v4 address. Declaration public bool IsIpV4 { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV6.html",
    "title": "IsIpV6 Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV6 Property IsIpV6 Whether the address is an IP v6 address. Declaration public bool IsIpV6 { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.IsIpV6GlobalOrScoped.html",
    "title": "IsIpV6GlobalOrScoped Property | Hazelcast .NET Documentation",
    "keywords": "IsIpV6GlobalOrScoped Property IsIpV6GlobalOrScoped Whether the address is an IP v6 address which is global (non-local), or scoped. Declaration public bool IsIpV6GlobalOrScoped { get; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.op_Equality.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.op_Equality.html",
    "title": "Equality Operator | Hazelcast .NET Documentation",
    "keywords": "Equality Operator Equality(NetworkAddress, NetworkAddress) Overrides the == operator. Declaration public static bool operator ==(NetworkAddress a1, NetworkAddress a2) Parameters NetworkAddress a1 NetworkAddress a2 Returns Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.op_Inequality.html",
    "title": "Inequality Operator | Hazelcast .NET Documentation",
    "keywords": "Inequality Operator Inequality(NetworkAddress, NetworkAddress) Overrides the != operator. Declaration public static bool operator !=(NetworkAddress a1, NetworkAddress a2) Parameters NetworkAddress a1 NetworkAddress a2 Returns Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.Port.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.Port.html",
    "title": "Port Property | Hazelcast .NET Documentation",
    "keywords": "Port Property Port Gets the port. Declaration public int Port { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkAddress.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkAddress.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Addresses.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Addresses.html",
    "title": "Addresses Property | Hazelcast .NET Documentation",
    "keywords": "Addresses Property Addresses Gets or sets the list of initial addresses. Declaration public IList<string> Addresses { get; } Property Value IList < String > Remarks The client uses this list to find a running member and connect to it. This initial member will then send the list of other members to the client. Each address must be a valid IPv4 or IPv6 address."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Cloud.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Cloud.html",
    "title": "Cloud Property | Hazelcast .NET Documentation",
    "keywords": "Cloud Property Cloud Gets the CloudOptions . Declaration public CloudOptions Cloud { get; } Property Value CloudOptions"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ConnectionRetry.html",
    "title": "ConnectionRetry Property | Hazelcast .NET Documentation",
    "keywords": "ConnectionRetry Property ConnectionRetry Gets the connection ConnectionRetryOptions . Declaration public ConnectionRetryOptions ConnectionRetry { get; } Property Value ConnectionRetryOptions Remarks Specifies the Hazelcast client connection parameters, including the timeout, i.e. the maximum amount of time that the Hazelcast client can spend trying to establish a connection to the cluster before failing. See SocketOptions for specifying the individual socket parameters, including the individual socket connection timeout."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ConnectionTimeoutMilliseconds.html",
    "title": "ConnectionTimeoutMilliseconds Property | Hazelcast .NET Documentation",
    "keywords": "ConnectionTimeoutMilliseconds Property ConnectionTimeoutMilliseconds Gets or sets the connection timeout. Declaration public int ConnectionTimeoutMilliseconds { get; set; } Property Value Int32 Remarks This timeout is used in various places. It is the connection timeout for each individual socket. It is also the timeout for cloud discovery."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.-ctor.html",
    "title": "NetworkingOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "NetworkingOptions Constructor NetworkingOptions() Initializes a new instance of the NetworkingOptions class. Declaration public NetworkingOptions()"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.html",
    "title": "NetworkingOptions Class | Hazelcast .NET Documentation",
    "keywords": "NetworkingOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the networking options. public class NetworkingOptions Inheritance Object NetworkingOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors NetworkingOptions() Initializes a new instance of the NetworkingOptions class. Properties Addresses Gets or sets the list of initial addresses. Cloud Gets the CloudOptions . ConnectionRetry Gets the connection ConnectionRetryOptions . ConnectionTimeoutMilliseconds Gets or sets the connection timeout. ReconnectMode Gets or sets the ReconnectMode in case the client is disconnected. RedoOperations Whether to retry operations. ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. SmartRouting Whether smart routing is enabled. Socket Gets the SocketOptions . Ssl Gets the SslOptions ."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ReconnectMode.html",
    "title": "ReconnectMode Property | Hazelcast .NET Documentation",
    "keywords": "ReconnectMode Property ReconnectMode Gets or sets the ReconnectMode in case the client is disconnected. Declaration public ReconnectMode ReconnectMode { get; set; } Property Value ReconnectMode"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.RedoOperations.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.RedoOperations.html",
    "title": "RedoOperations Property | Hazelcast .NET Documentation",
    "keywords": "RedoOperations Property RedoOperations Whether to retry operations. Declaration public bool RedoOperations { get; set; } Property Value Boolean Remarks While sending the requests to related members, operations can fail due to various reasons. Read-only operations are retried by default. If you want to enable retry for the other operations, set this property to true . Note that it is not clear whether the operation is performed or not. For idempotent operations this is harmless, but for non idempotent ones retrying can cause undesirable effects. Also note that the redo can perform on any member."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.ShuffleAddresses.html",
    "title": "ShuffleAddresses Property | Hazelcast .NET Documentation",
    "keywords": "ShuffleAddresses Property ShuffleAddresses Whether to shuffle addresses when attempting to connect to the cluster. Declaration public bool ShuffleAddresses { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.SmartRouting.html",
    "title": "SmartRouting Property | Hazelcast .NET Documentation",
    "keywords": "SmartRouting Property SmartRouting Whether smart routing is enabled. Declaration public bool SmartRouting { get; set; } Property Value Boolean Remarks If true (default), client will route the key based operations to owner of the key at the best effort. Note that it however does not guarantee that the operation will always be executed on the owner, as the member table is only updated every 10 seconds."
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Socket.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Socket.html",
    "title": "Socket Property | Hazelcast .NET Documentation",
    "keywords": "Socket Property Socket Gets the SocketOptions . Declaration public SocketOptions Socket { get; } Property Value SocketOptions"
  },
  "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Ssl.html": {
    "href": "4.1.0/api/Hazelcast.Networking.NetworkingOptions.Ssl.html",
    "title": "Ssl Property | Hazelcast .NET Documentation",
    "keywords": "Ssl Property Ssl Gets the SslOptions . Declaration public SslOptions Ssl { get; } Property Value SslOptions"
  },
  "4.1.0/api/Hazelcast.Networking.ReconnectMode.html": {
    "href": "4.1.0/api/Hazelcast.Networking.ReconnectMode.html",
    "title": "ReconnectMode Enum | Hazelcast .NET Documentation",
    "keywords": "ReconnectMode Enum Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Defines options for reconnecting a disconnected client. public enum ReconnectMode Fields DoNotReconnect Do not reconnect. ReconnectAsync Reconnect without blocking invocations. Invocations will fail. ReconnectSync Reconnect while blocking invocations."
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.BufferSizeKiB.html",
    "title": "BufferSizeKiB Property | Hazelcast .NET Documentation",
    "keywords": "BufferSizeKiB Property BufferSizeKiB The send and receive buffers size. Declaration public int BufferSizeKiB { get; set; } Property Value Int32 Remarks The buffer size is expressed in Kibibytes, ie units of 1024 bytes. This sets the size of both the send and receive buffers."
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.-ctor.html",
    "title": "SocketOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SocketOptions Constructor SocketOptions() Initializes a new instance of the SocketOptions class. Declaration public SocketOptions()"
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.html",
    "title": "SocketOptions Class | Hazelcast .NET Documentation",
    "keywords": "SocketOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the TCP socket options. public class SocketOptions Inheritance Object SocketOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SocketOptions() Initializes a new instance of the SocketOptions class. Properties BufferSizeKiB The send and receive buffers size. KeepAlive Whether to keep the socket alive. LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. TcpNoDelay Whether the socket is using the Nagle algorithm."
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.KeepAlive.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.KeepAlive.html",
    "title": "KeepAlive Property | Hazelcast .NET Documentation",
    "keywords": "KeepAlive Property KeepAlive Whether to keep the socket alive. Declaration public bool KeepAlive { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.LingerSeconds.html",
    "title": "LingerSeconds Property | Hazelcast .NET Documentation",
    "keywords": "LingerSeconds Property LingerSeconds The number of seconds to remain connected after the socket Close() method is called, or zero to disconnect immediately. Declaration public int LingerSeconds { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SocketOptions.TcpNoDelay.html",
    "title": "TcpNoDelay Property | Hazelcast .NET Documentation",
    "keywords": "TcpNoDelay Property TcpNoDelay Whether the socket is using the Nagle algorithm. Declaration public bool TcpNoDelay { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.CertificateName.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.CertificateName.html",
    "title": "CertificateName Property | Hazelcast .NET Documentation",
    "keywords": "CertificateName Property CertificateName Gets or sets the name of the certificate. Declaration public string CertificateName { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.CertificatePassword.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.CertificatePassword.html",
    "title": "CertificatePassword Property | Hazelcast .NET Documentation",
    "keywords": "CertificatePassword Property CertificatePassword Gets or sets the password for the certificate file. Declaration public string CertificatePassword { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.CertificatePath.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.CertificatePath.html",
    "title": "CertificatePath Property | Hazelcast .NET Documentation",
    "keywords": "CertificatePath Property CertificatePath Gets or sets the full path to the certificate file. Declaration public string CertificatePath { get; set; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.CheckCertificateRevocation.html",
    "title": "CheckCertificateRevocation Property | Hazelcast .NET Documentation",
    "keywords": "CheckCertificateRevocation Property CheckCertificateRevocation Whether to check for certificate revocation. Declaration public bool CheckCertificateRevocation { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.-ctor.html",
    "title": "SslOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SslOptions Constructor SslOptions() Initializes a new instance of the SslOptions class. Declaration public SslOptions()"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.Enabled.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.Enabled.html",
    "title": "Enabled Property | Hazelcast .NET Documentation",
    "keywords": "Enabled Property Enabled Whether to enable SSL. Declaration public bool Enabled { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.html",
    "title": "SslOptions Class | Hazelcast .NET Documentation",
    "keywords": "SslOptions Class Namespace: Hazelcast.Networking Assembly: Hazelcast.Net.dll Represents the SSL options. public class SslOptions Inheritance Object SslOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SslOptions() Initializes a new instance of the SslOptions class. Properties CertificateName Gets or sets the name of the certificate. CertificatePassword Gets or sets the password for the certificate file. CertificatePath Gets or sets the full path to the certificate file. CheckCertificateRevocation Whether to check for certificate revocation. Enabled Whether to enable SSL. Protocol Gets or sets the SSL protocol. ValidateCertificateChain Whether to validate the certificate chain. ValidateCertificateName Whether to validate the certificate name. Methods ToString()"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.Protocol.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.Protocol.html",
    "title": "Protocol Property | Hazelcast .NET Documentation",
    "keywords": "Protocol Property Protocol Gets or sets the SSL protocol. Declaration public SslProtocols Protocol { get; set; } Property Value SslProtocols Remarks The protocol must be a member of the SslProtocols enum, and currently only Tls , Tls11 and Tls12 are supported, though only the latest is recommended."
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.ValidateCertificateChain.html",
    "title": "ValidateCertificateChain Property | Hazelcast .NET Documentation",
    "keywords": "ValidateCertificateChain Property ValidateCertificateChain Whether to validate the certificate chain. Declaration public bool ValidateCertificateChain { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html": {
    "href": "4.1.0/api/Hazelcast.Networking.SslOptions.ValidateCertificateName.html",
    "title": "ValidateCertificateName Property | Hazelcast .NET Documentation",
    "keywords": "ValidateCertificateName Property ValidateCertificateName Whether to validate the certificate name. Declaration public bool ValidateCertificateName { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Partitioning.Strategies.html": {
    "href": "4.1.0/api/Hazelcast.Partitioning.Strategies.html",
    "title": "Hazelcast.Partitioning.Strategies Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Partitioning.Strategies Namespace Interfaces IPartitionAware Describes objects that provide their own partition keys. IPartitioningStrategy Defines ways to get the partition key of objects."
  },
  "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html": {
    "href": "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitionAware.GetPartitionKey.html",
    "title": "GetPartitionKey Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionKey Method GetPartitionKey() Gets the partition key. Declaration object GetPartitionKey() Returns Object The partition key of the object, or null to fallback to the default strategy."
  },
  "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html": {
    "href": "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitionAware.html",
    "title": "IPartitionAware Interface | Hazelcast .NET Documentation",
    "keywords": "IPartitionAware Interface Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Describes objects that provide their own partition keys. public interface IPartitionAware Methods GetPartitionKey() Gets the partition key."
  },
  "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html": {
    "href": "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.GetPartitionKey.html",
    "title": "GetPartitionKey Method | Hazelcast .NET Documentation",
    "keywords": "GetPartitionKey Method GetPartitionKey(Object) Gets the partition key of an object. Declaration object GetPartitionKey(object o) Parameters Object o The object. Returns Object The partition key of the object, or null to fallback to the default strategy."
  },
  "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html": {
    "href": "4.1.0/api/Hazelcast.Partitioning.Strategies.IPartitioningStrategy.html",
    "title": "IPartitioningStrategy Interface | Hazelcast .NET Documentation",
    "keywords": "IPartitioningStrategy Interface Namespace: Hazelcast.Partitioning.Strategies Assembly: Hazelcast.Net.dll Defines ways to get the partition key of objects. public interface IPartitioningStrategy Methods GetPartitionKey(Object) Gets the partition key of an object."
  },
  "4.1.0/api/Hazelcast.Projection.html": {
    "href": "4.1.0/api/Hazelcast.Projection.html",
    "title": "Hazelcast.Projection Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Projection Namespace Classes Projections Creates IProjection instances. Interfaces IProjection Transform an object into another object."
  },
  "4.1.0/api/Hazelcast.Projection.IProjection.html": {
    "href": "4.1.0/api/Hazelcast.Projection.IProjection.html",
    "title": "IProjection Interface | Hazelcast .NET Documentation",
    "keywords": "IProjection Interface Namespace: Hazelcast.Projection Assembly: Hazelcast.Net.dll Transform an object into another object. public interface IProjection Remarks Only 1-to-1 projections are allowed. Use an IAggregator<TResult> to perform n-to-1 or n-to-n projections. Projections must have a server-side counterpart."
  },
  "4.1.0/api/Hazelcast.Projection.Projections.html": {
    "href": "4.1.0/api/Hazelcast.Projection.Projections.html",
    "title": "Projections Class | Hazelcast .NET Documentation",
    "keywords": "Projections Class Namespace: Hazelcast.Projection Assembly: Hazelcast.Net.dll Creates IProjection instances. public static class Projections Inheritance Object Projections Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods MultipleAttribute(String[]) Projects multiple attributes. SingleAttribute(String) Projects a single attribute."
  },
  "4.1.0/api/Hazelcast.Projection.Projections.MultipleAttribute.html": {
    "href": "4.1.0/api/Hazelcast.Projection.Projections.MultipleAttribute.html",
    "title": "MultipleAttribute Method | Hazelcast .NET Documentation",
    "keywords": "MultipleAttribute Method MultipleAttribute(String[]) Projects multiple attributes. Declaration public static IProjection MultipleAttribute(params string[] attributePaths) Parameters String [] attributePaths The attribute paths. Returns IProjection A projection."
  },
  "4.1.0/api/Hazelcast.Projection.Projections.SingleAttribute.html": {
    "href": "4.1.0/api/Hazelcast.Projection.Projections.SingleAttribute.html",
    "title": "SingleAttribute Method | Hazelcast .NET Documentation",
    "keywords": "SingleAttribute Method SingleAttribute(String) Projects a single attribute. Declaration public static IProjection SingleAttribute(string attributePath) Parameters String attributePath The attribute. Returns IProjection A projection."
  },
  "4.1.0/api/Hazelcast.Protocol.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.html",
    "title": "Hazelcast.Protocol Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Protocol Namespace Classes RemoteException Represents an exception that was thrown remotely on a server."
  },
  "4.1.0/api/Hazelcast.Protocol.Models.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.Models.html",
    "title": "Hazelcast.Protocol.Models Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Protocol.Models Namespace Enums RemoteError Defines the error codes that can be returned by a remote server."
  },
  "4.1.0/api/Hazelcast.Protocol.Models.RemoteError.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.Models.RemoteError.html",
    "title": "RemoteError Enum | Hazelcast .NET Documentation",
    "keywords": "RemoteError Enum Namespace: Hazelcast.Protocol.Models Assembly: Hazelcast.Net.dll Defines the error codes that can be returned by a remote server. public enum RemoteError Fields AccessControl ArrayIndexOutOfBounds ArrayStore AssertionError Authentication Cache CacheLoader CacheNotExists CacheWriter CallerNotMember Cancellation CannotReplicateException ClassCast ClassNotFound ConcurrentModification ConfigMismatch ConsistencyLostException CpGroupDestroyedException DistributedObjectDestroyed DuplicateTask EntryProcessor Eof Execution FlakeIdNodeIdOutOfRangeException Hazelcast HazelcastInstanceNotActive HazelcastOverload HazelcastSerialization IllegalAccessError IllegalAccessException IllegalArgument IllegalMonitorState IllegalState IllegalThreadState IndeterminateOperationState IndexOutOfBounds Interrupted InvalidAddress InvalidConfiguration IO JetExceptionsRangeEnd JetExceptionsRangeStart LeaderDemotedException LocalMemberReset LockAcquireLimitReachedException LockOwnershipLostException Login MaxMessageSizeExceeded MemberLeft MutationDisallowedException NativeOutOfMemoryError NegativeArraySize NoClassDefinitionFound NoDataMember NoSuchElement NoSuchFieldError NoSuchFieldException NoSuchMethodError NoSuchMethodException NotLeaderException NotSerializable NullPointer OperationTimeout OutOfMemoryError PartitionMigrating Query QueryResultSizeExceeded ReachedMaxSize RejectedExecution ReplicatedMapCantBeCreated ResponseAlreadySent RetryableHazelcast RetryableIO Runtime Security ServiceNotFound SessionExpiredException Socket SplitBrainProtection StackOverflowError StaleAppendRequestException StaleSequence StaleTask StaleTaskId TargetDisconnected TargetNotMember TargetNotReplicaException Timeout TopicOverload Transaction TransactionNotActive TransactionTimedOut Undefined UnsupportedCallback UnsupportedOperation UriSyntax UserExceptionsRangeStart UTFDataFormat VersionMismatchException WaitKeyCancelledException WanReplicationQueueFull WrongTarget Xa"
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.-ctor.html",
    "title": "RemoteException Constructor | Hazelcast .NET Documentation",
    "keywords": "RemoteException Constructor RemoteException() Initializes a new instance of the HazelcastException class. Declaration public RemoteException() RemoteException(String) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message) Parameters String message The message that describes the error. RemoteException(String, Exception) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception. RemoteException(RemoteError, Boolean) Initializes a new instance of the HazelcastException class. Declaration public RemoteException(RemoteError error, bool retryable = false) Parameters RemoteError error The client protocol error. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, String, Boolean) Initializes a new instance of the HazelcastException class with a specified error message. Declaration public RemoteException(RemoteError error, string message, bool retryable = false) Parameters RemoteError error The client protocol error. String message The message that describes the error. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, Exception, Boolean) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(RemoteError error, Exception innerException, bool retryable = false) Parameters RemoteError error The client protocol error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Boolean retryable Whether the operation that threw the exception can be retried. RemoteException(RemoteError, String, Exception, Boolean) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public RemoteException(RemoteError error, string message, Exception innerException, bool retryable = false) Parameters RemoteError error The client protocol error. String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. Boolean retryable Whether the operation that threw the exception can be retried."
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.Error.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.Error.html",
    "title": "Error Property | Hazelcast .NET Documentation",
    "keywords": "Error Property Error Gets the protocol error. Declaration public RemoteError Error { get; set; } Property Value RemoteError"
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.GetObjectData.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.GetObjectData.html",
    "title": "GetObjectData Method | Hazelcast .NET Documentation",
    "keywords": "GetObjectData Method GetObjectData(SerializationInfo, StreamingContext) Declaration public override void GetObjectData(SerializationInfo info, StreamingContext context) Parameters SerializationInfo info StreamingContext context Overrides Exception.GetObjectData(SerializationInfo, StreamingContext)"
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.html",
    "title": "RemoteException Class | Hazelcast .NET Documentation",
    "keywords": "RemoteException Class Namespace: Hazelcast.Protocol Assembly: Hazelcast.Net.dll Represents an exception that was thrown remotely on a server. [Serializable] public sealed class RemoteException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException RemoteException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors RemoteException() Initializes a new instance of the HazelcastException class. RemoteException(RemoteError, Boolean) Initializes a new instance of the HazelcastException class. RemoteException(RemoteError, Exception, Boolean) Initializes a new instance of the HazelcastException class with a reference to the inner exception that is the cause of this exception. RemoteException(RemoteError, String, Boolean) Initializes a new instance of the HazelcastException class with a specified error message. RemoteException(RemoteError, String, Exception, Boolean) Initializes a new instance of the HazelcastException class with a specified error message and a reference to the inner exception that is the cause of this exception. RemoteException(String) Initializes a new instance of the HazelcastException class. RemoteException(String, Exception) Initializes a new instance of the HazelcastException class. Properties Error Gets the protocol error. Retryable Whether the operation that threw the exception can be retried. Methods GetObjectData(SerializationInfo, StreamingContext) ToString()"
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.Retryable.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.Retryable.html",
    "title": "Retryable Property | Hazelcast .NET Documentation",
    "keywords": "Retryable Property Retryable Whether the operation that threw the exception can be retried. Declaration public bool Retryable { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Protocol.RemoteException.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Protocol.RemoteException.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Exception.ToString()"
  },
  "4.1.0/api/Hazelcast.Query.html": {
    "href": "4.1.0/api/Hazelcast.Query.html",
    "title": "Hazelcast.Query Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Query Namespace Classes PredicateBuilder Builds a predicate. Predicates Creates IPredicate instances. Interfaces IPagingPredicate Defines a paging predicate. IPartitionPredicate Defines a partition predicate. IPredicate A place holder interface for com.hazelcast.query.Predicate on server side. Enums IterationType To differentiate users selection on result collection on map-wide operations like values , keySet , query etc."
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.html",
    "title": "IPagingPredicate Interface | Hazelcast .NET Documentation",
    "keywords": "IPagingPredicate Interface Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Defines a paging predicate. public interface IPagingPredicate : IPredicate Properties Page Gets or sets the current page index PageSize Gets the page size of each iteration. Methods NextPage() Moves to the next page. PreviousPage() Moves to the previous page. Reset() Resets the predicate for re-use."
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.NextPage.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.NextPage.html",
    "title": "NextPage Method | Hazelcast .NET Documentation",
    "keywords": "NextPage Method NextPage() Moves to the next page. Declaration void NextPage() Remarks This is equivalent to incrementing Page ."
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.Page.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.Page.html",
    "title": "Page Property | Hazelcast .NET Documentation",
    "keywords": "Page Property Page Gets or sets the current page index Declaration int Page { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.PageSize.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.PageSize.html",
    "title": "PageSize Property | Hazelcast .NET Documentation",
    "keywords": "PageSize Property PageSize Gets the page size of each iteration. Declaration int PageSize { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.PreviousPage.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.PreviousPage.html",
    "title": "PreviousPage Method | Hazelcast .NET Documentation",
    "keywords": "PreviousPage Method PreviousPage() Moves to the previous page. Declaration void PreviousPage() Remarks This is equivalent to decrementing Page ."
  },
  "4.1.0/api/Hazelcast.Query.IPagingPredicate.Reset.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPagingPredicate.Reset.html",
    "title": "Reset Method | Hazelcast .NET Documentation",
    "keywords": "Reset Method Reset() Resets the predicate for re-use. Declaration void Reset()"
  },
  "4.1.0/api/Hazelcast.Query.IPartitionPredicate.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPartitionPredicate.html",
    "title": "IPartitionPredicate Interface | Hazelcast .NET Documentation",
    "keywords": "IPartitionPredicate Interface Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Defines a partition predicate. public interface IPartitionPredicate : IPredicate Properties PartitionKey Gets the partition key. Target Gets the predicate that will run on the target partition."
  },
  "4.1.0/api/Hazelcast.Query.IPartitionPredicate.PartitionKey.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPartitionPredicate.PartitionKey.html",
    "title": "PartitionKey Property | Hazelcast .NET Documentation",
    "keywords": "PartitionKey Property PartitionKey Gets the partition key. Declaration object PartitionKey { get; } Property Value Object"
  },
  "4.1.0/api/Hazelcast.Query.IPartitionPredicate.Target.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPartitionPredicate.Target.html",
    "title": "Target Property | Hazelcast .NET Documentation",
    "keywords": "Target Property Target Gets the predicate that will run on the target partition. Declaration IPredicate Target { get; } Property Value IPredicate"
  },
  "4.1.0/api/Hazelcast.Query.IPredicate.html": {
    "href": "4.1.0/api/Hazelcast.Query.IPredicate.html",
    "title": "IPredicate Interface | Hazelcast .NET Documentation",
    "keywords": "IPredicate Interface Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll A place holder interface for com.hazelcast.query.Predicate on server side. public interface IPredicate Remarks All builtin predicates can be accessed via Predicates static class. A custom predicate must be serializable via Hazelcast serialization, and have a counterpart on the server."
  },
  "4.1.0/api/Hazelcast.Query.IterationType.html": {
    "href": "4.1.0/api/Hazelcast.Query.IterationType.html",
    "title": "IterationType Enum | Hazelcast .NET Documentation",
    "keywords": "IterationType Enum Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll To differentiate users selection on result collection on map-wide operations like values , keySet , query etc. public enum IterationType Fields Entry Iterate over whole entry (so key and value) Key Iterate over keys Value Iterate over values"
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.html",
    "title": "PredicateBuilder Class | Hazelcast .NET Documentation",
    "keywords": "PredicateBuilder Class Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Builds a predicate. public class PredicateBuilder Inheritance Object PredicateBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods IsBetween(Object, Object) Succeeds if the target value is between the specified inclusive bounds. IsEqualTo(Object) Succeeds if the target value is equal to the specified value. IsGreaterThan(Object) Succeeds if the target value is greater than the specified value. IsGreaterThanOrEqualTo(Object) Succeeds if the target value is greater than, or equal to, the specified value. IsILike(String) Succeeds if the target value matches the specified case-insensitive pattern. IsIn(Object[]) Succeeds if the target value is equal to one of the specified values. IsLessThan(Object) Succeeds if the target value is less than the specified value. IsLessThanOrEqualTo(Object) Succeeds if the target value is less than, or equal to, the specified value. IsLike(String) Succeeds if the target value matches the specified case-sensitive pattern. IsNotEqualTo(Object) Succeeds if the target value is not equal to the specified value. Matches(String) Succeeds if the target value matches the specified regular expression."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsBetween.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsBetween.html",
    "title": "IsBetween Method | Hazelcast .NET Documentation",
    "keywords": "IsBetween Method IsBetween(Object, Object) Succeeds if the target value is between the specified inclusive bounds. Declaration public virtual IPredicate IsBetween(object lowerBound, object upperBound) Parameters Object lowerBound The lower inclusive bound. Object upperBound The upper inclusive bound. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsEqualTo.html",
    "title": "IsEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "IsEqualTo Method IsEqualTo(Object) Succeeds if the target value is equal to the specified value. Declaration public virtual IPredicate IsEqualTo(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsGreaterThan.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsGreaterThan.html",
    "title": "IsGreaterThan Method | Hazelcast .NET Documentation",
    "keywords": "IsGreaterThan Method IsGreaterThan(Object) Succeeds if the target value is greater than the specified value. Declaration public virtual IPredicate IsGreaterThan(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsGreaterThanOrEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsGreaterThanOrEqualTo.html",
    "title": "IsGreaterThanOrEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "IsGreaterThanOrEqualTo Method IsGreaterThanOrEqualTo(Object) Succeeds if the target value is greater than, or equal to, the specified value. Declaration public virtual IPredicate IsGreaterThanOrEqualTo(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsILike.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsILike.html",
    "title": "IsILike Method | Hazelcast .NET Documentation",
    "keywords": "IsILike Method IsILike(String) Succeeds if the target value matches the specified case-insensitive pattern. Declaration public virtual IPredicate IsILike(string pattern) Parameters String pattern The pattern. Returns IPredicate A new predicate. Remarks The pattern is case-insensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsIn.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsIn.html",
    "title": "IsIn Method | Hazelcast .NET Documentation",
    "keywords": "IsIn Method IsIn(Object[]) Succeeds if the target value is equal to one of the specified values. Declaration public virtual IPredicate IsIn(params object[] values) Parameters Object [] values The values. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLessThan.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLessThan.html",
    "title": "IsLessThan Method | Hazelcast .NET Documentation",
    "keywords": "IsLessThan Method IsLessThan(Object) Succeeds if the target value is less than the specified value. Declaration public virtual IPredicate IsLessThan(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLessThanOrEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLessThanOrEqualTo.html",
    "title": "IsLessThanOrEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "IsLessThanOrEqualTo Method IsLessThanOrEqualTo(Object) Succeeds if the target value is less than, or equal to, the specified value. Declaration public virtual IPredicate IsLessThanOrEqualTo(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLike.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsLike.html",
    "title": "IsLike Method | Hazelcast .NET Documentation",
    "keywords": "IsLike Method IsLike(String) Succeeds if the target value matches the specified case-sensitive pattern. Declaration public virtual IPredicate IsLike(string pattern) Parameters String pattern The pattern. Returns IPredicate A new predicate. Remarks The pattern is case-sensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsNotEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.IsNotEqualTo.html",
    "title": "IsNotEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "IsNotEqualTo Method IsNotEqualTo(Object) Succeeds if the target value is not equal to the specified value. Declaration public virtual IPredicate IsNotEqualTo(object value) Parameters Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.PredicateBuilder.Matches.html": {
    "href": "4.1.0/api/Hazelcast.Query.PredicateBuilder.Matches.html",
    "title": "Matches Method | Hazelcast .NET Documentation",
    "keywords": "Matches Method Matches(String) Succeeds if the target value matches the specified regular expression. Declaration public virtual IPredicate Matches(string regex) Parameters String regex The regular expression. Returns IPredicate A new predicate. Remarks The pattern is interpreted exactly in the same way as described in the documentation for the Java java.util.regex.Pattern class."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.And.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.And.html",
    "title": "And Method | Hazelcast .NET Documentation",
    "keywords": "And Method And(IPredicate[]) Succeeds if all the specified predicates succeed. Declaration public static IPredicate And(params IPredicate[] predicates) Parameters IPredicate [] predicates The predicates. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Between.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Between.html",
    "title": "Between Method | Hazelcast .NET Documentation",
    "keywords": "Between Method Between(String, Object, Object) Succeeds if the target value is between the specified inclusive bounds. Declaration public static IPredicate Between(string name, object lowerBound, object upperBound) Parameters String name The name of the target. Object lowerBound The lower inclusive bound. Object upperBound The upper inclusive bound. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.EqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.EqualTo.html",
    "title": "EqualTo Method | Hazelcast .NET Documentation",
    "keywords": "EqualTo Method EqualTo(String, Object) Succeeds if the target value is equal to the specified value. Declaration public static IPredicate EqualTo(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.False.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.False.html",
    "title": "False Method | Hazelcast .NET Documentation",
    "keywords": "False Method False() Never succeeds. Declaration public static IPredicate False() Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.GreaterThan.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.GreaterThan.html",
    "title": "GreaterThan Method | Hazelcast .NET Documentation",
    "keywords": "GreaterThan Method GreaterThan(String, Object) Succeeds if the target value is greater than the specified value. Declaration public static IPredicate GreaterThan(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.GreaterThanOrEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.GreaterThanOrEqualTo.html",
    "title": "GreaterThanOrEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "GreaterThanOrEqualTo Method GreaterThanOrEqualTo(String, Object) Succeeds if the target value is greater than, or equal to, the specified value. Declaration public static IPredicate GreaterThanOrEqualTo(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.html",
    "title": "Predicates Class | Hazelcast .NET Documentation",
    "keywords": "Predicates Class Namespace: Hazelcast.Query Assembly: Hazelcast.Net.dll Creates IPredicate instances. public static class Predicates Inheritance Object Predicates Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Methods And(IPredicate[]) Succeeds if all the specified predicates succeed. Between(String, Object, Object) Succeeds if the target value is between the specified inclusive bounds. EqualTo(String, Object) Succeeds if the target value is equal to the specified value. False() Never succeeds. GreaterThan(String, Object) Succeeds if the target value is greater than the specified value. GreaterThanOrEqualTo(String, Object) Succeeds if the target value is greater than, or equal to, the specified value. ILike(String, String) Succeeds if the target value matches the specified case-insensitive pattern. In(String, Object[]) Succeeds if the target value is equal to one of the specified values. InstanceOf(String) Succeeds if the item is an instance of the specified class. Key() Begins a predicate for the key. Key(String) Begins a predicate for an attribute of the key. LessThan(String, Object) Succeeds if the target value is less than the specified value. LessThanOrEqualTo(String, Object) Succeeds if the target value is less than, or equal to, the specified value. Like(String, String) Succeeds if the target value matches the specified case-sensitive pattern. Match(String, String) Succeeds if the target value matches the specified regular expression. Not(IPredicate) Succeeds if the specified predicate does not succeed. NotEqualTo(String, Object) Succeeds if the target value is not equal to the specified value. Or(IPredicate[]) Succeeds if at least one of the specified predicates succeed. Page(Int32) Paginates results. Page(Int32, IPredicate) Paginates results of a predicate. Page(Int32, IPredicate, IComparer<KeyValuePair<Object, Object>>) Paginates results of a predicate. Page(Int32, IComparer<KeyValuePair<Object, Object>>) Paginates results. Partition(Object, IPredicate) Restricts the execution of a predicate to a single partition. Sql(String) Succeeds if the specified SQL query succeeds. True() Always succeeds. Value() Begins a predicate for the value. Value(String) Begins a predicate for an attribute of the value."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.ILike.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.ILike.html",
    "title": "ILike Method | Hazelcast .NET Documentation",
    "keywords": "ILike Method ILike(String, String) Succeeds if the target value matches the specified case-insensitive pattern. Declaration public static IPredicate ILike(string name, string pattern) Parameters String name The name of the target. String pattern The pattern. Returns IPredicate A new predicate. Remarks The pattern is case-insensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.In.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.In.html",
    "title": "In Method | Hazelcast .NET Documentation",
    "keywords": "In Method In(String, Object[]) Succeeds if the target value is equal to one of the specified values. Declaration public static IPredicate In(string name, params object[] values) Parameters String name The name of the target. Object [] values The values. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.InstanceOf.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.InstanceOf.html",
    "title": "InstanceOf Method | Hazelcast .NET Documentation",
    "keywords": "InstanceOf Method InstanceOf(String) Succeeds if the item is an instance of the specified class. Declaration public static IPredicate InstanceOf(string fullJavaClassName) Parameters String fullJavaClassName The full Java class name. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Key.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Key.html",
    "title": "Key Method | Hazelcast .NET Documentation",
    "keywords": "Key Method Key() Begins a predicate for the key. Declaration public static PredicateBuilder Key() Returns PredicateBuilder A predicate builder. Key(String) Begins a predicate for an attribute of the key. Declaration public static PredicateBuilder Key(string name) Parameters String name The name of the attribute. Returns PredicateBuilder A predicate builder."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.LessThan.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.LessThan.html",
    "title": "LessThan Method | Hazelcast .NET Documentation",
    "keywords": "LessThan Method LessThan(String, Object) Succeeds if the target value is less than the specified value. Declaration public static IPredicate LessThan(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.LessThanOrEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.LessThanOrEqualTo.html",
    "title": "LessThanOrEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "LessThanOrEqualTo Method LessThanOrEqualTo(String, Object) Succeeds if the target value is less than, or equal to, the specified value. Declaration public static IPredicate LessThanOrEqualTo(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Like.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Like.html",
    "title": "Like Method | Hazelcast .NET Documentation",
    "keywords": "Like Method Like(String, String) Succeeds if the target value matches the specified case-sensitive pattern. Declaration public static IPredicate Like(string name, string pattern) Parameters String name The name of the target. String pattern The pattern. Returns IPredicate A new predicate. Remarks The pattern is case-sensitive. In the pattern, the % character (percentage sign) is a placeholder for multiple characters, and the _ character (underscore) is a placeholder for a single character. These two special characters can be escaped with a backslash."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Match.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Match.html",
    "title": "Match Method | Hazelcast .NET Documentation",
    "keywords": "Match Method Match(String, String) Succeeds if the target value matches the specified regular expression. Declaration public static IPredicate Match(string name, string regex) Parameters String name The name of the target. String regex The regular expression. Returns IPredicate A new predicate. Remarks The pattern is interpreted exactly in the same way as described in the documentation for the Java java.util.regex.Pattern class."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Not.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Not.html",
    "title": "Not Method | Hazelcast .NET Documentation",
    "keywords": "Not Method Not(IPredicate) Succeeds if the specified predicate does not succeed. Declaration public static IPredicate Not(IPredicate predicate) Parameters IPredicate predicate The predicate. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.NotEqualTo.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.NotEqualTo.html",
    "title": "NotEqualTo Method | Hazelcast .NET Documentation",
    "keywords": "NotEqualTo Method NotEqualTo(String, Object) Succeeds if the target value is not equal to the specified value. Declaration public static IPredicate NotEqualTo(string name, object value) Parameters String name The name of the target. Object value The value. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Or.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Or.html",
    "title": "Or Method | Hazelcast .NET Documentation",
    "keywords": "Or Method Or(IPredicate[]) Succeeds if at least one of the specified predicates succeed. Declaration public static IPredicate Or(params IPredicate[] predicates) Parameters IPredicate [] predicates The predicates. Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Page.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Page.html",
    "title": "Page Method | Hazelcast .NET Documentation",
    "keywords": "Page Method Page(Int32) Paginates results. Declaration public static IPagingPredicate Page(int pageSize) Parameters Int32 pageSize The size of a page. Returns IPagingPredicate A new predicate. Page(Int32, IComparer<KeyValuePair<Object, Object>>) Paginates results. Declaration public static IPagingPredicate Page(int pageSize, IComparer<KeyValuePair<object, object>> comparer) Parameters Int32 pageSize The size of a page. IComparer < KeyValuePair < Object , Object >> comparer A comparer used to order results. Returns IPagingPredicate A new predicate. Page(Int32, IPredicate) Paginates results of a predicate. Declaration public static IPagingPredicate Page(int pageSize, IPredicate predicate) Parameters Int32 pageSize The size of a page. IPredicate predicate The predicate. Returns IPagingPredicate A new predicate. Page(Int32, IPredicate, IComparer<KeyValuePair<Object, Object>>) Paginates results of a predicate. Declaration public static IPagingPredicate Page(int pageSize, IPredicate predicate, IComparer<KeyValuePair<object, object>> comparer) Parameters Int32 pageSize The size of a page. IPredicate predicate The predicate. IComparer < KeyValuePair < Object , Object >> comparer A comparer used to order results. Returns IPagingPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Partition.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Partition.html",
    "title": "Partition Method | Hazelcast .NET Documentation",
    "keywords": "Partition Method Partition(Object, IPredicate) Restricts the execution of a predicate to a single partition. Declaration public static IPartitionPredicate Partition(object partitionKey, IPredicate predicate) Parameters Object partitionKey The key of the partition. IPredicate predicate The predicate. Returns IPartitionPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Sql.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Sql.html",
    "title": "Sql Method | Hazelcast .NET Documentation",
    "keywords": "Sql Method Sql(String) Succeeds if the specified SQL query succeeds. Declaration public static IPredicate Sql(string sql) Parameters String sql The SQL query. Returns IPredicate A new predicate. Remarks (to be completed with SQL documentation)"
  },
  "4.1.0/api/Hazelcast.Query.Predicates.True.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.True.html",
    "title": "True Method | Hazelcast .NET Documentation",
    "keywords": "True Method True() Always succeeds. Declaration public static IPredicate True() Returns IPredicate A new predicate."
  },
  "4.1.0/api/Hazelcast.Query.Predicates.Value.html": {
    "href": "4.1.0/api/Hazelcast.Query.Predicates.Value.html",
    "title": "Value Method | Hazelcast .NET Documentation",
    "keywords": "Value Method Value() Begins a predicate for the value. Declaration public static PredicateBuilder Value() Returns PredicateBuilder A predicate builder. Value(String) Begins a predicate for an attribute of the value. Declaration public static PredicateBuilder Value(string name) Parameters String name The name of the attribute. Returns PredicateBuilder A predicate builder."
  },
  "4.1.0/api/Hazelcast.Security.html": {
    "href": "4.1.0/api/Hazelcast.Security.html",
    "title": "Hazelcast.Security Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Security Namespace Classes KerberosCredentials Implements ICredentials for the Kerberos protocol. StaticCredentialsFactory Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. TokenCredentials Implements ITokenCredentials for simple token-based protocols. UsernamePasswordCredentials Implements IPasswordCredentials . Interfaces ICredentials Defines an identity to be authenticated. ICredentialsFactory Defines a factory of ICredentials . IKerberosTokenProvider Provides Kerberos tokens. IPasswordCredentials Defines an ICredentials that relies on a password. IResettableCredentialsFactory Defines an ICredentialsFactory that can be reset. ITokenCredentials Defines an ICredentials that relies on a token."
  },
  "4.1.0/api/Hazelcast.Security.ICredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.ICredentials.html",
    "title": "ICredentials Interface | Hazelcast .NET Documentation",
    "keywords": "ICredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an identity to be authenticated. public interface ICredentials Properties Name Gets the name of the entity."
  },
  "4.1.0/api/Hazelcast.Security.ICredentials.Name.html": {
    "href": "4.1.0/api/Hazelcast.Security.ICredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration string Name { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Security.ICredentialsFactory.html": {
    "href": "4.1.0/api/Hazelcast.Security.ICredentialsFactory.html",
    "title": "ICredentialsFactory Interface | Hazelcast .NET Documentation",
    "keywords": "ICredentialsFactory Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines a factory of ICredentials . public interface ICredentialsFactory : IDisposable Inherited Members IDisposable.Dispose() Methods NewCredentials() Creates and returns a new ICredentials object."
  },
  "4.1.0/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.ICredentialsFactory.NewCredentials.html",
    "title": "NewCredentials Method | Hazelcast .NET Documentation",
    "keywords": "NewCredentials Method NewCredentials() Creates and returns a new ICredentials object. Declaration ICredentials NewCredentials() Returns ICredentials The new credentials object. Remarks This method is invoked any time a new connection is authenticated."
  },
  "4.1.0/api/Hazelcast.Security.IKerberosTokenProvider.GetToken.html": {
    "href": "4.1.0/api/Hazelcast.Security.IKerberosTokenProvider.GetToken.html",
    "title": "GetToken Method | Hazelcast .NET Documentation",
    "keywords": "GetToken Method GetToken(String, String, String, String) Gets the token corresponding to a SPN. Declaration byte[] GetToken(string spn, string username, string password, string domain) Parameters String spn The SPN. String username An optional username. String password An optional password. String domain An optional domain. Returns Byte [] The token bytes."
  },
  "4.1.0/api/Hazelcast.Security.IKerberosTokenProvider.html": {
    "href": "4.1.0/api/Hazelcast.Security.IKerberosTokenProvider.html",
    "title": "IKerberosTokenProvider Interface | Hazelcast .NET Documentation",
    "keywords": "IKerberosTokenProvider Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Provides Kerberos tokens. public interface IKerberosTokenProvider Methods GetToken(String, String, String, String) Gets the token corresponding to a SPN."
  },
  "4.1.0/api/Hazelcast.Security.IPasswordCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.IPasswordCredentials.html",
    "title": "IPasswordCredentials Interface | Hazelcast .NET Documentation",
    "keywords": "IPasswordCredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentials that relies on a password. public interface IPasswordCredentials : ICredentials Inherited Members ICredentials.Name Properties Password Gets the password."
  },
  "4.1.0/api/Hazelcast.Security.IPasswordCredentials.Password.html": {
    "href": "4.1.0/api/Hazelcast.Security.IPasswordCredentials.Password.html",
    "title": "Password Property | Hazelcast .NET Documentation",
    "keywords": "Password Property Password Gets the password. Declaration string Password { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Security.IResettableCredentialsFactory.html": {
    "href": "4.1.0/api/Hazelcast.Security.IResettableCredentialsFactory.html",
    "title": "IResettableCredentialsFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IResettableCredentialsFactory Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentialsFactory that can be reset. public interface IResettableCredentialsFactory : ICredentialsFactory, IDisposable Inherited Members ICredentialsFactory.NewCredentials() IDisposable.Dispose() Methods Reset() Resets the factory."
  },
  "4.1.0/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html": {
    "href": "4.1.0/api/Hazelcast.Security.IResettableCredentialsFactory.Reset.html",
    "title": "Reset Method | Hazelcast .NET Documentation",
    "keywords": "Reset Method Reset() Resets the factory. Declaration void Reset()"
  },
  "4.1.0/api/Hazelcast.Security.ITokenCredentials.GetToken.html": {
    "href": "4.1.0/api/Hazelcast.Security.ITokenCredentials.GetToken.html",
    "title": "GetToken Method | Hazelcast .NET Documentation",
    "keywords": "GetToken Method GetToken() Gets the token. Declaration byte[] GetToken() Returns Byte []"
  },
  "4.1.0/api/Hazelcast.Security.ITokenCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.ITokenCredentials.html",
    "title": "ITokenCredentials Interface | Hazelcast .NET Documentation",
    "keywords": "ITokenCredentials Interface Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Defines an ICredentials that relies on a token. public interface ITokenCredentials : ICredentials Inherited Members ICredentials.Name Methods GetToken() Gets the token."
  },
  "4.1.0/api/Hazelcast.Security.KerberosCredentials.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Security.KerberosCredentials.-ctor.html",
    "title": "KerberosCredentials Constructor | Hazelcast .NET Documentation",
    "keywords": "KerberosCredentials Constructor KerberosCredentials(Byte[]) Initializes a new instance of the KerberosCredentials class with a Kerberos token. Declaration public KerberosCredentials(byte[] token) Parameters Byte [] token The Kerberos token."
  },
  "4.1.0/api/Hazelcast.Security.KerberosCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.KerberosCredentials.html",
    "title": "KerberosCredentials Class | Hazelcast .NET Documentation",
    "keywords": "KerberosCredentials Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Implements ICredentials for the Kerberos protocol. public class KerberosCredentials : TokenCredentials, ITokenCredentials, ICredentials Inheritance Object TokenCredentials KerberosCredentials Implements ITokenCredentials ICredentials Inherited Members TokenCredentials.Name TokenCredentials.GetToken() Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors KerberosCredentials(Byte[]) Initializes a new instance of the KerberosCredentials class with a Kerberos token. Methods ToString()"
  },
  "4.1.0/api/Hazelcast.Security.KerberosCredentials.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Security.KerberosCredentials.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides TokenCredentials.ToString()"
  },
  "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.-ctor.html",
    "title": "StaticCredentialsFactory Constructor | Hazelcast .NET Documentation",
    "keywords": "StaticCredentialsFactory Constructor StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Declaration public StaticCredentialsFactory(ICredentials credentials) Parameters ICredentials credentials The credentials."
  },
  "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html": {
    "href": "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.Dispose.html",
    "title": "Dispose Method | Hazelcast .NET Documentation",
    "keywords": "Dispose Method Dispose() Declaration public void Dispose() Implements IDisposable.Dispose() Dispose(Boolean) Disposes resources. Declaration protected virtual void Dispose(bool disposing) Parameters Boolean disposing true when disposing deterministically."
  },
  "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.html": {
    "href": "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.html",
    "title": "StaticCredentialsFactory Class | Hazelcast .NET Documentation",
    "keywords": "StaticCredentialsFactory Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Provides an implementation of ICredentialsFactory that returns a static ICredentials instance. public class StaticCredentialsFactory : ICredentialsFactory, IDisposable Inheritance Object StaticCredentialsFactory Implements ICredentialsFactory IDisposable Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors StaticCredentialsFactory(ICredentials) Initializes a new instance of the StaticCredentialsFactory class. Methods Dispose() Dispose(Boolean) Disposes resources. NewCredentials() Creates and returns a new ICredentials object."
  },
  "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.StaticCredentialsFactory.NewCredentials.html",
    "title": "NewCredentials Method | Hazelcast .NET Documentation",
    "keywords": "NewCredentials Method NewCredentials() Creates and returns a new ICredentials object. Declaration public ICredentials NewCredentials() Returns ICredentials The new credentials object. Implements ICredentialsFactory.NewCredentials() Remarks This method is invoked any time a new connection is authenticated."
  },
  "4.1.0/api/Hazelcast.Security.TokenCredentials.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Security.TokenCredentials.-ctor.html",
    "title": "TokenCredentials Constructor | Hazelcast .NET Documentation",
    "keywords": "TokenCredentials Constructor TokenCredentials(Byte[]) Initializes a new instance of the TokenCredentials class with a token. Declaration public TokenCredentials(byte[] token) Parameters Byte [] token The credentials token."
  },
  "4.1.0/api/Hazelcast.Security.TokenCredentials.GetToken.html": {
    "href": "4.1.0/api/Hazelcast.Security.TokenCredentials.GetToken.html",
    "title": "GetToken Method | Hazelcast .NET Documentation",
    "keywords": "GetToken Method GetToken() Gets the token representing the credentials. Declaration public byte[] GetToken() Returns Byte [] Implements ITokenCredentials.GetToken()"
  },
  "4.1.0/api/Hazelcast.Security.TokenCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.TokenCredentials.html",
    "title": "TokenCredentials Class | Hazelcast .NET Documentation",
    "keywords": "TokenCredentials Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Implements ITokenCredentials for simple token-based protocols. [Serializable] public class TokenCredentials : ITokenCredentials, ICredentials Inheritance Object TokenCredentials KerberosCredentials Implements ITokenCredentials ICredentials Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors TokenCredentials(Byte[]) Initializes a new instance of the TokenCredentials class with a token. Properties Name Gets the name of the entity. Methods GetToken() Gets the token representing the credentials. ToString()"
  },
  "4.1.0/api/Hazelcast.Security.TokenCredentials.Name.html": {
    "href": "4.1.0/api/Hazelcast.Security.TokenCredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration public string Name { get; } Property Value String Implements ICredentials.Name"
  },
  "4.1.0/api/Hazelcast.Security.TokenCredentials.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Security.TokenCredentials.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.html": {
    "href": "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.html",
    "title": "UsernamePasswordCredentials Class | Hazelcast .NET Documentation",
    "keywords": "UsernamePasswordCredentials Class Namespace: Hazelcast.Security Assembly: Hazelcast.Net.dll Implements IPasswordCredentials . [Serializable] public class UsernamePasswordCredentials : IPasswordCredentials, ICredentials Inheritance Object UsernamePasswordCredentials Implements IPasswordCredentials ICredentials Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Properties Name Gets the name of the entity. Password Gets the password. Methods ToString()"
  },
  "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html": {
    "href": "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Gets the name of the entity. Declaration public string Name { get; set; } Property Value String Implements ICredentials.Name"
  },
  "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html": {
    "href": "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.Password.html",
    "title": "Password Property | Hazelcast .NET Documentation",
    "keywords": "Password Property Password Gets the password. Declaration public string Password { get; set; } Property Value String Implements IPasswordCredentials.Password"
  },
  "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Security.UsernamePasswordCredentials.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanArrayField.html",
    "title": "AddBooleanArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddBooleanArrayField Method AddBooleanArrayField(String) Declaration public ClassDefinitionBuilder AddBooleanArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddBooleanField.html",
    "title": "AddBooleanField Method | Hazelcast .NET Documentation",
    "keywords": "AddBooleanField Method AddBooleanField(String) Declaration public ClassDefinitionBuilder AddBooleanField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteArrayField.html",
    "title": "AddByteArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddByteArrayField Method AddByteArrayField(String) Declaration public ClassDefinitionBuilder AddByteArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddByteField.html",
    "title": "AddByteField Method | Hazelcast .NET Documentation",
    "keywords": "AddByteField Method AddByteField(String) Declaration public ClassDefinitionBuilder AddByteField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharArrayField.html",
    "title": "AddCharArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddCharArrayField Method AddCharArrayField(String) Declaration public ClassDefinitionBuilder AddCharArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddCharField.html",
    "title": "AddCharField Method | Hazelcast .NET Documentation",
    "keywords": "AddCharField Method AddCharField(String) Declaration public ClassDefinitionBuilder AddCharField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleArrayField.html",
    "title": "AddDoubleArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddDoubleArrayField Method AddDoubleArrayField(String) Declaration public ClassDefinitionBuilder AddDoubleArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddDoubleField.html",
    "title": "AddDoubleField Method | Hazelcast .NET Documentation",
    "keywords": "AddDoubleField Method AddDoubleField(String) Declaration public ClassDefinitionBuilder AddDoubleField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatArrayField.html",
    "title": "AddFloatArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddFloatArrayField Method AddFloatArrayField(String) Declaration public ClassDefinitionBuilder AddFloatArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddFloatField.html",
    "title": "AddFloatField Method | Hazelcast .NET Documentation",
    "keywords": "AddFloatField Method AddFloatField(String) Declaration public ClassDefinitionBuilder AddFloatField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntArrayField.html",
    "title": "AddIntArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddIntArrayField Method AddIntArrayField(String) Declaration public ClassDefinitionBuilder AddIntArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddIntField.html",
    "title": "AddIntField Method | Hazelcast .NET Documentation",
    "keywords": "AddIntField Method AddIntField(String) Declaration public ClassDefinitionBuilder AddIntField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongArrayField.html",
    "title": "AddLongArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddLongArrayField Method AddLongArrayField(String) Declaration public ClassDefinitionBuilder AddLongArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddLongField.html",
    "title": "AddLongField Method | Hazelcast .NET Documentation",
    "keywords": "AddLongField Method AddLongField(String) Declaration public ClassDefinitionBuilder AddLongField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableArrayField.html",
    "title": "AddPortableArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableArrayField Method AddPortableArrayField(String, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableArrayField(string fieldName, IClassDefinition def) Parameters String fieldName IClassDefinition def Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddPortableField.html",
    "title": "AddPortableField Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableField Method AddPortableField(String, IClassDefinition) Declaration public ClassDefinitionBuilder AddPortableField(string fieldName, IClassDefinition def) Parameters String fieldName IClassDefinition def Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortArrayField.html",
    "title": "AddShortArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddShortArrayField Method AddShortArrayField(String) Declaration public ClassDefinitionBuilder AddShortArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddShortField.html",
    "title": "AddShortField Method | Hazelcast .NET Documentation",
    "keywords": "AddShortField Method AddShortField(String) Declaration public ClassDefinitionBuilder AddShortField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringArrayField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringArrayField.html",
    "title": "AddStringArrayField Method | Hazelcast .NET Documentation",
    "keywords": "AddStringArrayField Method AddStringArrayField(String) Declaration public ClassDefinitionBuilder AddStringArrayField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.AddStringField.html",
    "title": "AddStringField Method | Hazelcast .NET Documentation",
    "keywords": "AddStringField Method AddStringField(String) Declaration public ClassDefinitionBuilder AddStringField(string fieldName) Parameters String fieldName Returns ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.Build.html",
    "title": "Build Method | Hazelcast .NET Documentation",
    "keywords": "Build Method Build() Declaration public IClassDefinition Build() Returns IClassDefinition"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration public int ClassId { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.-ctor.html",
    "title": "ClassDefinitionBuilder Constructor | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitionBuilder Constructor ClassDefinitionBuilder(Int32, Int32) Declaration public ClassDefinitionBuilder(int factoryId, int classId) Parameters Int32 factoryId Int32 classId ClassDefinitionBuilder(Int32, Int32, Int32) Declaration public ClassDefinitionBuilder(int factoryId, int classId, int version) Parameters Int32 factoryId Int32 classId Int32 version"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration public int FactoryId { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.html",
    "title": "ClassDefinitionBuilder Class | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitionBuilder Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll ClassDefinitionBuilder is used to build and register ClassDefinitions manually. public sealed class ClassDefinitionBuilder Inheritance Object ClassDefinitionBuilder Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks ClassDefinitionBuilder is used to build and register ClassDefinitions manually. Constructors ClassDefinitionBuilder(Int32, Int32) ClassDefinitionBuilder(Int32, Int32, Int32) Properties ClassId FactoryId Version Methods AddBooleanArrayField(String) AddBooleanField(String) AddByteArrayField(String) AddByteField(String) AddCharArrayField(String) AddCharField(String) AddDoubleArrayField(String) AddDoubleField(String) AddFloatArrayField(String) AddFloatField(String) AddIntArrayField(String) AddIntField(String) AddLongArrayField(String) AddLongField(String) AddPortableArrayField(String, IClassDefinition) AddPortableField(String, IClassDefinition) AddShortArrayField(String) AddShortField(String) AddStringArrayField(String) AddStringField(String) Build() See Also IClassDefinition IPortable"
  },
  "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ClassDefinitionBuilder.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration public int Version { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.-ctor.html",
    "title": "FactoryOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "FactoryOptions Constructor FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Declaration public FactoryOptions()"
  },
  "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.html",
    "title": "FactoryOptions<T> Class | Hazelcast .NET Documentation",
    "keywords": "FactoryOptions<T> Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public class FactoryOptions<T> : SingletonServiceFactory<T>, IDisposable where T : class Inheritance Object SingletonServiceFactory <T> FactoryOptions<T> Implements IDisposable Inherited Members SingletonServiceFactory<T>.Creator SingletonServiceFactory<T>.IsConfigured SingletonServiceFactory<T>.ServiceProvider SingletonServiceFactory<T>.OwnsService SingletonServiceFactory<T>.Service SingletonServiceFactory<T>.Dispose() SingletonServiceFactory<T>.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Type Parameters T Constructors FactoryOptions() Initializes a new instance of the FactoryOptions<T> class. Properties Id Gets or sets the identifier of the factory."
  },
  "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.Id.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.FactoryOptions-1.Id.html",
    "title": "Id Property | Hazelcast .NET Documentation",
    "keywords": "Id Property Id Gets or sets the identifier of the factory. Declaration public int Id { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.FieldType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.FieldType.html",
    "title": "FieldType Enum | Hazelcast .NET Documentation",
    "keywords": "FieldType Enum Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public enum FieldType Fields Boolean BooleanArray Byte ByteArray Char CharArray Double DoubleArray Float FloatArray Int IntArray Long LongArray Portable PortableArray Short ShortArray Utf UtfArray"
  },
  "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.-ctor.html",
    "title": "GlobalSerializerOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "GlobalSerializerOptions Constructor GlobalSerializerOptions() Initializes a new instance of the GlobalSerializerOptions class. Declaration public GlobalSerializerOptions()"
  },
  "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.html",
    "title": "GlobalSerializerOptions Class | Hazelcast .NET Documentation",
    "keywords": "GlobalSerializerOptions Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Configures the global serializer. public class GlobalSerializerOptions : SingletonServiceFactory<ISerializer>, IDisposable Inheritance Object SingletonServiceFactory < ISerializer > GlobalSerializerOptions Implements IDisposable Inherited Members SingletonServiceFactory<ISerializer>.Creator SingletonServiceFactory<ISerializer>.IsConfigured SingletonServiceFactory<ISerializer>.ServiceProvider SingletonServiceFactory<ISerializer>.OwnsService SingletonServiceFactory<ISerializer>.Service SingletonServiceFactory<ISerializer>.Dispose() SingletonServiceFactory<ISerializer>.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors GlobalSerializerOptions() Initializes a new instance of the GlobalSerializerOptions class. Properties OverrideClrSerialization Whether to fully override (and ignore) the native CLR serialization."
  },
  "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.OverrideClrSerialization.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.GlobalSerializerOptions.OverrideClrSerialization.html",
    "title": "OverrideClrSerialization Property | Hazelcast .NET Documentation",
    "keywords": "OverrideClrSerialization Property OverrideClrSerialization Whether to fully override (and ignore) the native CLR serialization. Declaration public bool OverrideClrSerialization { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Serialization.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.html",
    "title": "Hazelcast.Serialization Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Serialization Namespace Classes ClassDefinitionBuilder ClassDefinitionBuilder is used to build and register ClassDefinitions manually. FactoryOptions<T> GlobalSerializerOptions Configures the global serializer. JavaClass Class for serializing/deserializing Java Class types SerializationException Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. SerializationOptions Contains the serialization options SerializerOptions Configures a serializer for a type. Interfaces IByteArraySerializer<T> For sample usage custom serialization and other way of custom serialization see IStreamSerializer<T> . Note that read and write methods should be compatible IClassDefinition ClassDefinition defines a class schema for Portable classes. IDataSerializableFactory Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable . IFieldDefinition FieldDefinition defines name, type, index of a field IIdentifiedDataSerializable Defines the interface that classes of objects can implement to take control of their own serialization. IObjectDataInput Provides decoding methods for primitive and array of primitive types reading from the serialized byte array. IObjectDataOutput Provides encoding methods for primitive and array of primitive types writing to the serialized byte array. IPortable Portable provides an alternative serialization method. IPortableFactory PortableFactory is used to create Portable instances during de-serialization. IPortableReader Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. IPortableWriter Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. ISerializer Defines a custom serializer. ISerializerHook<T> IStreamSerializer<T> A base class for custom serialization. IVersionedPortable VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. Enums FieldType"
  },
  "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.html",
    "title": "IByteArraySerializer<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IByteArraySerializer<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll For sample usage custom serialization and other way of custom serialization see IStreamSerializer<T> . Note that read and write methods should be compatible public interface IByteArraySerializer<T> : ISerializer, IDisposable Inherited Members ISerializer.TypeId IDisposable.Dispose() Type Parameters T Methods Read(Byte[]) Converts given byte array to object Write(T) Converts given object to byte array"
  },
  "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.Read.html",
    "title": "Read Method | Hazelcast .NET Documentation",
    "keywords": "Read Method Read(Byte[]) Converts given byte array to object Declaration T Read(byte[] buffer) Parameters Byte [] buffer that object will be read from Returns T deserialized object Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IByteArraySerializer-1.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(T) Converts given object to byte array Declaration byte[] Write(T obj) Parameters T obj that will be serialized Returns Byte [] byte array that object is serialized into Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.ClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration int ClassId { get; } Property Value Int32 class id"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration int FactoryId { get; } Property Value Int32 factory id"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetField.html",
    "title": "GetField Method | Hazelcast .NET Documentation",
    "keywords": "GetField Method GetField(String) Declaration IFieldDefinition GetField(string name) Parameters String name name of the field Returns IFieldDefinition field definition by given name or null GetField(Int32) Declaration IFieldDefinition GetField(int fieldIndex) Parameters Int32 fieldIndex index of the field Returns IFieldDefinition field definition by given index Exceptions IndexOutOfRangeException"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldClassId.html",
    "title": "GetFieldClassId Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldClassId Method GetFieldClassId(String) Declaration int GetFieldClassId(string fieldName) Parameters String fieldName name of the field Returns Int32 class id of given field Exceptions ArgumentException"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldCount.html",
    "title": "GetFieldCount Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldCount Method GetFieldCount() Declaration int GetFieldCount() Returns Int32 total field count"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldNames.html",
    "title": "GetFieldNames Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldNames Method GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns ICollection < String > all field names contained in this class definition"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.GetFieldType.html",
    "title": "GetFieldType Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldType Method GetFieldType(String) Declaration FieldType GetFieldType(string fieldName) Parameters String fieldName name of the field Returns FieldType type of given field Exceptions ArgumentException"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.HasField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.HasField.html",
    "title": "HasField Method | Hazelcast .NET Documentation",
    "keywords": "HasField Method HasField(String) Declaration bool HasField(string fieldName) Parameters String fieldName field name Returns Boolean true if this class definition contains a field named by given name"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.html",
    "title": "IClassDefinition Interface | Hazelcast .NET Documentation",
    "keywords": "IClassDefinition Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll ClassDefinition defines a class schema for Portable classes. public interface IClassDefinition Remarks ClassDefinition defines a class schema for Portable classes. It allows to query field names, types, class id etc. It can be created manually using ClassDefinitionBuilder or ondemand during serialization phase. Properties ClassId FactoryId Version Methods GetField(Int32) GetField(String) GetFieldClassId(String) GetFieldCount() GetFieldNames() GetFieldType(String) HasField(String) See Also IPortable ClassDefinitionBuilder"
  },
  "4.1.0/api/Hazelcast.Serialization.IClassDefinition.Version.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IClassDefinition.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 version"
  },
  "4.1.0/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IDataSerializableFactory.Create.html",
    "title": "Create Method | Hazelcast .NET Documentation",
    "keywords": "Create Method Create(Int32) Creates an instance of a type. Declaration IIdentifiedDataSerializable Create(int typeId) Parameters Int32 typeId The unique identified of the type. Returns IIdentifiedDataSerializable An instance of the specified type, or null if the type identifier is not know by the factory."
  },
  "4.1.0/api/Hazelcast.Serialization.IDataSerializableFactory.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IDataSerializableFactory.html",
    "title": "IDataSerializableFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IDataSerializableFactory Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines a factory that can create instances of classes implementing IIdentifiedDataSerializable . public interface IDataSerializableFactory Methods Create(Int32) Creates an instance of a type."
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Declaration int ClassId { get; } Property Value Int32 class id of this field's class"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Declaration int FactoryId { get; } Property Value Int32 factory id of this field's class"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.FieldType.html",
    "title": "FieldType Property | Hazelcast .NET Documentation",
    "keywords": "FieldType Property FieldType Declaration FieldType FieldType { get; } Property Value FieldType field type"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.html",
    "title": "IFieldDefinition Interface | Hazelcast .NET Documentation",
    "keywords": "IFieldDefinition Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll FieldDefinition defines name, type, index of a field public interface IFieldDefinition Properties ClassId FactoryId FieldType Index Name Version"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Index.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Index.html",
    "title": "Index Property | Hazelcast .NET Documentation",
    "keywords": "Index Property Index Declaration int Index { get; } Property Value Int32 field index"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Name.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Declaration string Name { get; } Property Value String field name"
  },
  "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Version.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IFieldDefinition.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 field version"
  },
  "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Gets the identifier of the class. Declaration int ClassId { get; } Property Value Int32 The identifier of the class. Remarks The identifier is used to uniquely identify the class, i.e. the Type , so that the corresponding IDataSerializableFactory can re-create the proper instances. The identifier should therefore be unique per factory."
  },
  "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Declaration int FactoryId { get; } Property Value Int32 The identifier of the factory."
  },
  "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.html",
    "title": "IIdentifiedDataSerializable Interface | Hazelcast .NET Documentation",
    "keywords": "IIdentifiedDataSerializable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines the interface that classes of objects can implement to take control of their own serialization. public interface IIdentifiedDataSerializable Remarks Classes that implement IIdentifiedDataSerializable rely on a declared factory to create instances, and deserialize fields, thus avoiding the costs otherwise associated with reflection. Properties ClassId Gets the identifier of the class. FactoryId Gets the identifier of the IDataSerializableFactory that can create instances of the class. Methods ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput ."
  },
  "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.ReadData.html",
    "title": "ReadData Method | Hazelcast .NET Documentation",
    "keywords": "ReadData Method ReadData(IObjectDataInput) Deserializes the object by reading from an IObjectDataInput . Declaration void ReadData(IObjectDataInput input) Parameters IObjectDataInput input The input serialized data."
  },
  "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IIdentifiedDataSerializable.WriteData.html",
    "title": "WriteData Method | Hazelcast .NET Documentation",
    "keywords": "WriteData Method WriteData(IObjectDataOutput) Serializes the object by writing to an IObjectDataOutput . Declaration void WriteData(IObjectDataOutput output) Parameters IObjectDataOutput output The output serialized data."
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.Endianness.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness The configured endianness via Endianness Declaration Endianness Endianness { get; } Property Value Endianness"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.html",
    "title": "IObjectDataInput Interface | Hazelcast .NET Documentation",
    "keywords": "IObjectDataInput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides decoding methods for primitive and array of primitive types reading from the serialized byte array. public interface IObjectDataInput Properties Endianness The configured endianness via Endianness Methods Read(Byte[]) Reads into byte array bytes as much as possible to fill the provided array. Read(Byte[], Int32, Int32) Reads into byte array bytes starting from the offset value. As much as count bytes will be written if there is available content. ReadBoolean() Reads and return a bool value. ReadBooleanArray() Reads and return a bool array ReadByte() Reads and return an unsigned byte. ReadByteArray() Reads and return byte array ReadChar() Reads and return a char value ReadCharArray() Reads and return a char array ReadDouble() Reads and return double value ReadDoubleArray() Reads and return double array ReadFloat() Reads and return a float value ReadFloatArray() Reads and return a float array ReadInt() Read and return a signed integer value ReadIntArray() Reads and return an int array ReadLong() Reads and return a signed long value ReadLongArray() Reads and return long array ReadObject<T>() Reads and return the object ReadSByte() Reads and return a signed byte value ReadShort() Reads and return a signed short value. ReadShortArray() Reads and return a short array ReadString() Reads and return a UTF-8 encoded string ReadStringArray() Reads and return utf-8 encoded string array ReadUShort() Read and return am unsigned short value SkipBytes(Int32) Tries Skips count number of bytes if possible."
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.Read.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.Read.html",
    "title": "Read Method | Hazelcast .NET Documentation",
    "keywords": "Read Method Read(Byte[]) Reads into byte array bytes as much as possible to fill the provided array. Declaration int Read(byte[] bytes) Parameters Byte [] bytes byte array to be filled Returns Int32 whether the number of bytes read, or -1 if end of internal serialized buffer is reached. Read(Byte[], Int32, Int32) Reads into byte array bytes starting from the offset value. As much as count bytes will be written if there is available content. Declaration int Read(byte[] bytes, int offset, int count) Parameters Byte [] bytes byte array to be filled Int32 offset fill starting offset of the provided array Int32 count the requested number of bytes to be filled. Returns Int32 whether the number of bytes read, or -1 if end of internal serialized buffer is reached."
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadBoolean.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadBoolean.html",
    "title": "ReadBoolean Method | Hazelcast .NET Documentation",
    "keywords": "ReadBoolean Method ReadBoolean() Reads and return a bool value. Declaration bool ReadBoolean() Returns Boolean bool value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadBooleanArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadBooleanArray.html",
    "title": "ReadBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadBooleanArray Method ReadBooleanArray() Reads and return a bool array Declaration bool[] ReadBooleanArray() Returns Boolean [] bool array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte() Reads and return an unsigned byte. Declaration byte ReadByte() Returns Byte byte value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadByteArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadByteArray.html",
    "title": "ReadByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadByteArray Method ReadByteArray() Reads and return byte array Declaration byte[] ReadByteArray() Returns Byte [] byte array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadChar.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar() Reads and return a char value Declaration char ReadChar() Returns Char char value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadCharArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadCharArray.html",
    "title": "ReadCharArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadCharArray Method ReadCharArray() Reads and return a char array Declaration char[] ReadCharArray() Returns Char [] char array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadDouble.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble() Reads and return double value Declaration double ReadDouble() Returns Double double value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadDoubleArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadDoubleArray.html",
    "title": "ReadDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadDoubleArray Method ReadDoubleArray() Reads and return double array Declaration double[] ReadDoubleArray() Returns Double [] double array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadFloat.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat() Reads and return a float value Declaration float ReadFloat() Returns Single float value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadFloatArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadFloatArray.html",
    "title": "ReadFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloatArray Method ReadFloatArray() Reads and return a float array Declaration float[] ReadFloatArray() Returns Single [] flaot array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadInt.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt() Read and return a signed integer value Declaration int ReadInt() Returns Int32 int value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadIntArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadIntArray.html",
    "title": "ReadIntArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadIntArray Method ReadIntArray() Reads and return an int array Declaration int[] ReadIntArray() Returns Int32 [] int array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadLong.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong() Reads and return a signed long value Declaration long ReadLong() Returns Int64 long value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadLongArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadLongArray.html",
    "title": "ReadLongArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadLongArray Method ReadLongArray() Reads and return long array Declaration long[] ReadLongArray() Returns Int64 [] long array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadObject.html",
    "title": "ReadObject Method | Hazelcast .NET Documentation",
    "keywords": "ReadObject Method ReadObject<T>() Reads and return the object Declaration T ReadObject<T>() Returns T T instance Type Parameters T The type of the return object. The internal object is cast to this type before returning"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadSByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadSByte.html",
    "title": "ReadSByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadSByte Method ReadSByte() Reads and return a signed byte value Declaration sbyte ReadSByte() Returns SByte sbyte value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort() Reads and return a signed short value. Declaration short ReadShort() Returns Int16 short value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadShortArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadShortArray.html",
    "title": "ReadShortArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadShortArray Method ReadShortArray() Reads and return a short array Declaration short[] ReadShortArray() Returns Int16 [] short array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadString.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadString.html",
    "title": "ReadString Method | Hazelcast .NET Documentation",
    "keywords": "ReadString Method ReadString() Reads and return a UTF-8 encoded string Declaration string ReadString() Returns String"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadStringArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadStringArray.html",
    "title": "ReadStringArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadStringArray Method ReadStringArray() Reads and return utf-8 encoded string array Declaration string[] ReadStringArray() Returns String [] string array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadUShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.ReadUShort.html",
    "title": "ReadUShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadUShort Method ReadUShort() Read and return am unsigned short value Declaration ushort ReadUShort() Returns UInt16 ushort value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.SkipBytes.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataInput.SkipBytes.html",
    "title": "SkipBytes Method | Hazelcast .NET Documentation",
    "keywords": "SkipBytes Method SkipBytes(Int32) Tries Skips count number of bytes if possible. Declaration int SkipBytes(int count) Parameters Int32 count number of bytes to skip Returns Int32 The actual number of bytes skipped"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.Endianness.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness The configured endianness via Endianness Declaration Endianness Endianness { get; } Property Value Endianness"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.html",
    "title": "IObjectDataOutput Interface | Hazelcast .NET Documentation",
    "keywords": "IObjectDataOutput Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides encoding methods for primitive and array of primitive types writing to the serialized byte array. public interface IObjectDataOutput Properties Endianness The configured endianness via Endianness Methods ToByteArray(Int32) Creates a new byte array with the internal content of the serialized data. Write(Byte[]) Writes the content of the provided byte array to this serialization output Write(Byte[], Int32, Int32) Writes the content of the provided byte array to this serialization output WriteBoolean(Boolean) Writes a bool value to this serialization output WriteBooleanArray(Boolean[]) Writes the bool[] to this serialization output WriteByte(Byte) Writes a byte value to this serialization output WriteByteArray(Byte[]) Writes the byte[] to this serialization output WriteBytes(String) Writes each char of the value with WriteByte(Byte) method to this serialization output /// WriteChar(Char) Writes a char value to this serialization output WriteCharArray(Char[]) Writes the char[] to this serialization output WriteChars(String) Writes each char of the value with WriteChar(Char) method to this serialization output WriteDouble(Double) Writes a double value to this serialization output WriteDoubleArray(Double[]) Writes the double[] to this serialization output WriteFloat(Single) Writes a float value to this serialization output WriteFloatArray(Single[]) Writes the float[] to this serialization output WriteInt(Int32) Writes a int value to this serialization output WriteIntArray(Int32[]) Writes the int[] to this serialization output WriteLong(Int64) Writes a long value to this serialization output WriteLongArray(Int64[]) Writes the long[] to this serialization output WriteObject(Object) Writes an object to this serialization output using hazelcast serialization WriteSByte(SByte) Writes a sbyte value to this serialization output WriteShort(Int16) Writes a short value to this serialization output WriteShortArray(Int16[]) Writes the short[] to this serialization output WriteString(String) Writes a string value in UTF-8 encoding to this serialization output WriteStringArray(String[]) Writes the string[] to this serialization output WriteUShort(UInt16) Writes a ushort value to this serialization output"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.ToByteArray.html",
    "title": "ToByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ToByteArray Method ToByteArray(Int32) Creates a new byte array with the internal content of the serialized data. Declaration byte[] ToByteArray(int padding = 0) Parameters Int32 padding the number of zero byte(s) to add to beginning of the returned array Returns Byte [] clone of internal byte content with optional padding bytes"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.Write.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(Byte[]) Writes the content of the provided byte array to this serialization output Declaration void Write(byte[] bytes) Parameters Byte [] bytes the byte array to be written Remarks Please note that this method only writes the content of the array to the output whereas WriteByteArray(Byte[]) methods also take care of the size of the array. Write(Byte[], Int32, Int32) Writes the content of the provided byte array to this serialization output Declaration void Write(byte[] bytes, int offset, int count) Parameters Byte [] bytes the byte array to be written Int32 offset the offset of the bytes array for start reading from Int32 count total number of bytes to be written from the bytes array"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBoolean.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBoolean.html",
    "title": "WriteBoolean Method | Hazelcast .NET Documentation",
    "keywords": "WriteBoolean Method WriteBoolean(Boolean) Writes a bool value to this serialization output Declaration void WriteBoolean(bool value) Parameters Boolean value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBooleanArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBooleanArray.html",
    "title": "WriteBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteBooleanArray Method WriteBooleanArray(Boolean[]) Writes the bool[] to this serialization output Declaration void WriteBooleanArray(bool[] values) Parameters Boolean [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteByte.html",
    "title": "WriteByte Method | Hazelcast .NET Documentation",
    "keywords": "WriteByte Method WriteByte(Byte) Writes a byte value to this serialization output Declaration void WriteByte(byte value) Parameters Byte value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteByteArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteByteArray.html",
    "title": "WriteByteArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteByteArray Method WriteByteArray(Byte[]) Writes the byte[] to this serialization output Declaration void WriteByteArray(byte[] values) Parameters Byte [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBytes.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteBytes.html",
    "title": "WriteBytes Method | Hazelcast .NET Documentation",
    "keywords": "WriteBytes Method WriteBytes(String) Writes each char of the value with WriteByte(Byte) method to this serialization output /// Declaration void WriteBytes(string value) Parameters String value the value to be encoded Remarks Each char value of the string will be cast to byte then written to output."
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteChar.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteChar.html",
    "title": "WriteChar Method | Hazelcast .NET Documentation",
    "keywords": "WriteChar Method WriteChar(Char) Writes a char value to this serialization output Declaration void WriteChar(char value) Parameters Char value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteCharArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteCharArray.html",
    "title": "WriteCharArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteCharArray Method WriteCharArray(Char[]) Writes the char[] to this serialization output Declaration void WriteCharArray(char[] values) Parameters Char [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteChars.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteChars.html",
    "title": "WriteChars Method | Hazelcast .NET Documentation",
    "keywords": "WriteChars Method WriteChars(String) Writes each char of the value with WriteChar(Char) method to this serialization output Declaration void WriteChars(string value) Parameters String value the value to be encoded Remarks This method has the same effect with the following code; foreach (var ch in value) { WriteChar(ch); }"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteDouble.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteDouble.html",
    "title": "WriteDouble Method | Hazelcast .NET Documentation",
    "keywords": "WriteDouble Method WriteDouble(Double) Writes a double value to this serialization output Declaration void WriteDouble(double value) Parameters Double value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteDoubleArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteDoubleArray.html",
    "title": "WriteDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteDoubleArray Method WriteDoubleArray(Double[]) Writes the double[] to this serialization output Declaration void WriteDoubleArray(double[] values) Parameters Double [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloat.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloat.html",
    "title": "WriteFloat Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloat Method WriteFloat(Single) Writes a float value to this serialization output Declaration void WriteFloat(float value) Parameters Single value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloatArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteFloatArray.html",
    "title": "WriteFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloatArray Method WriteFloatArray(Single[]) Writes the float[] to this serialization output Declaration void WriteFloatArray(float[] values) Parameters Single [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteInt.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteInt.html",
    "title": "WriteInt Method | Hazelcast .NET Documentation",
    "keywords": "WriteInt Method WriteInt(Int32) Writes a int value to this serialization output Declaration void WriteInt(int value) Parameters Int32 value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteIntArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteIntArray.html",
    "title": "WriteIntArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteIntArray Method WriteIntArray(Int32[]) Writes the int[] to this serialization output Declaration void WriteIntArray(int[] values) Parameters Int32 [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteLong.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteLong.html",
    "title": "WriteLong Method | Hazelcast .NET Documentation",
    "keywords": "WriteLong Method WriteLong(Int64) Writes a long value to this serialization output Declaration void WriteLong(long value) Parameters Int64 value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteLongArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteLongArray.html",
    "title": "WriteLongArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteLongArray Method WriteLongArray(Int64[]) Writes the long[] to this serialization output Declaration void WriteLongArray(long[] values) Parameters Int64 [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteObject.html",
    "title": "WriteObject Method | Hazelcast .NET Documentation",
    "keywords": "WriteObject Method WriteObject(Object) Writes an object to this serialization output using hazelcast serialization Declaration void WriteObject(object value) Parameters Object value"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteSByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteSByte.html",
    "title": "WriteSByte Method | Hazelcast .NET Documentation",
    "keywords": "WriteSByte Method WriteSByte(SByte) Writes a sbyte value to this serialization output Declaration void WriteSByte(sbyte value) Parameters SByte value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteShort.html",
    "title": "WriteShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteShort Method WriteShort(Int16) Writes a short value to this serialization output Declaration void WriteShort(short value) Parameters Int16 value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteShortArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteShortArray.html",
    "title": "WriteShortArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteShortArray Method WriteShortArray(Int16[]) Writes the short[] to this serialization output Declaration void WriteShortArray(short[] values) Parameters Int16 [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteString.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteString.html",
    "title": "WriteString Method | Hazelcast .NET Documentation",
    "keywords": "WriteString Method WriteString(String) Writes a string value in UTF-8 encoding to this serialization output Declaration void WriteString(string value) Parameters String value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteStringArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteStringArray.html",
    "title": "WriteStringArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteStringArray Method WriteStringArray(String[]) Writes the string[] to this serialization output Declaration void WriteStringArray(string[] values) Parameters String [] values the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteUShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IObjectDataOutput.WriteUShort.html",
    "title": "WriteUShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteUShort Method WriteUShort(UInt16) Writes a ushort value to this serialization output Declaration void WriteUShort(ushort value) Parameters UInt16 value the value to be encoded"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortable.ClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortable.ClassId.html",
    "title": "ClassId Property | Hazelcast .NET Documentation",
    "keywords": "ClassId Property ClassId Returns class identifier for this portable class. Declaration int ClassId { get; } Property Value Int32 class id Remarks Returns class identifier for this portable class. Class id should be unique per PortableFactory."
  },
  "4.1.0/api/Hazelcast.Serialization.IPortable.FactoryId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortable.FactoryId.html",
    "title": "FactoryId Property | Hazelcast .NET Documentation",
    "keywords": "FactoryId Property FactoryId Returns PortableFactory id for this portable class Declaration int FactoryId { get; } Property Value Int32 factory id"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortable.html",
    "title": "IPortable Interface | Hazelcast .NET Documentation",
    "keywords": "IPortable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Portable provides an alternative serialization method. public interface IPortable Remarks Portable provides an alternative serialization method. Instead of relying on reflection, each Portable is created by a registere IPortableFactory . Portable serialization that have the following advantages: Support multiversion of the same object type. (See ) Fetching individual fields without having to rely on reflection. Querying and indexing support without de-serialization and/or reflection. Properties ClassId Returns class identifier for this portable class. FactoryId Returns PortableFactory id for this portable class Methods ReadPortable(IPortableReader) Read portable fields using PortableReader WritePortable(IPortableWriter) Serialize this portable object using PortableWriter See Also IPortableFactory IPortableWriter IPortableReader IClassDefinition IIdentifiedDataSerializable SerializationOptions"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortable.ReadPortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortable.ReadPortable.html",
    "title": "ReadPortable Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortable Method ReadPortable(IPortableReader) Read portable fields using PortableReader Declaration void ReadPortable(IPortableReader reader) Parameters IPortableReader reader PortableReader Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortable.WritePortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortable.WritePortable.html",
    "title": "WritePortable Method | Hazelcast .NET Documentation",
    "keywords": "WritePortable Method WritePortable(IPortableWriter) Serialize this portable object using PortableWriter Declaration void WritePortable(IPortableWriter writer) Parameters IPortableWriter writer PortableWriter Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableFactory.Create.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableFactory.Create.html",
    "title": "Create Method | Hazelcast .NET Documentation",
    "keywords": "Create Method Create(Int32) Creates a Portable instance using given class id Declaration IPortable Create(int classId) Parameters Int32 classId portable class id Returns IPortable portable instance or null if class id is not known by this factory"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableFactory.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableFactory.html",
    "title": "IPortableFactory Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableFactory Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll PortableFactory is used to create Portable instances during de-serialization. public interface IPortableFactory Remarks PortableFactory is used to create Portable instances during de-serialization. Methods Create(Int32) Creates a Portable instance using given class id See Also IPortable IVersionedPortable"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldClassId.html",
    "title": "GetFieldClassId Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldClassId Method GetFieldClassId(String) Declaration int GetFieldClassId(string fieldName) Parameters String fieldName name of the field Returns Int32 classId of given field"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldNames.html",
    "title": "GetFieldNames Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldNames Method GetFieldNames() Declaration ICollection<string> GetFieldNames() Returns ICollection < String > set of field names on this portable class"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetFieldType.html",
    "title": "GetFieldType Method | Hazelcast .NET Documentation",
    "keywords": "GetFieldType Method GetFieldType(String) Declaration FieldType GetFieldType(string fieldName) Parameters String fieldName name of the field Returns FieldType field type of given fieldName"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.GetRawDataInput.html",
    "title": "GetRawDataInput Method | Hazelcast .NET Documentation",
    "keywords": "GetRawDataInput Method GetRawDataInput() GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. Declaration IObjectDataInput GetRawDataInput() Returns IObjectDataInput rawDataInput Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.HasField.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.HasField.html",
    "title": "HasField Method | Hazelcast .NET Documentation",
    "keywords": "HasField Method HasField(String) Declaration bool HasField(string fieldName) Parameters String fieldName name of the field Returns Boolean true if field exist in this class."
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.html",
    "title": "IPortableReader Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableReader Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. public interface IPortableReader Remarks Provides a mean of reading portable fields from a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Properties Version Methods GetFieldClassId(String) GetFieldNames() GetFieldType(String) GetRawDataInput() GetRawDataOutput() . Note that portable fields can not read after GetRawDataInput() is called. In case this happens, IOException will be thrown. HasField(String) ReadBoolean(String) ReadBooleanArray(String) ReadByte(String) ReadByteArray(String) ReadChar(String) ReadCharArray(String) ReadDouble(String) ReadDoubleArray(String) ReadFloat(String) ReadFloatArray(String) ReadInt(String) ReadIntArray(String) ReadLong(String) ReadLongArray(String) ReadPortable<TPortable>(String) ReadPortableArray<TPortable>(String) ReadShort(String) ReadShortArray(String) ReadString(String) ReadStringArray(String)"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadBoolean.html",
    "title": "ReadBoolean Method | Hazelcast .NET Documentation",
    "keywords": "ReadBoolean Method ReadBoolean(String) Declaration bool ReadBoolean(string fieldName) Parameters String fieldName name of the field Returns Boolean the boolean value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadBooleanArray.html",
    "title": "ReadBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadBooleanArray Method ReadBooleanArray(String) Declaration bool[] ReadBooleanArray(string fieldName) Parameters String fieldName name of the field Returns Boolean [] the boolean array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadByte.html",
    "title": "ReadByte Method | Hazelcast .NET Documentation",
    "keywords": "ReadByte Method ReadByte(String) Declaration byte ReadByte(string fieldName) Parameters String fieldName name of the field Returns Byte the byte value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadByteArray.html",
    "title": "ReadByteArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadByteArray Method ReadByteArray(String) Declaration byte[] ReadByteArray(string fieldName) Parameters String fieldName name of the field Returns Byte [] the byte array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadChar.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadChar.html",
    "title": "ReadChar Method | Hazelcast .NET Documentation",
    "keywords": "ReadChar Method ReadChar(String) Declaration char ReadChar(string fieldName) Parameters String fieldName name of the field Returns Char the char value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadCharArray.html",
    "title": "ReadCharArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadCharArray Method ReadCharArray(String) Declaration char[] ReadCharArray(string fieldName) Parameters String fieldName name of the field Returns Char [] the char array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadDouble.html",
    "title": "ReadDouble Method | Hazelcast .NET Documentation",
    "keywords": "ReadDouble Method ReadDouble(String) Declaration double ReadDouble(string fieldName) Parameters String fieldName name of the field Returns Double the double value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadDoubleArray.html",
    "title": "ReadDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadDoubleArray Method ReadDoubleArray(String) Declaration double[] ReadDoubleArray(string fieldName) Parameters String fieldName name of the field Returns Double [] the double array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadFloat.html",
    "title": "ReadFloat Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloat Method ReadFloat(String) Declaration float ReadFloat(string fieldName) Parameters String fieldName name of the field Returns Single the float value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadFloatArray.html",
    "title": "ReadFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadFloatArray Method ReadFloatArray(String) Declaration float[] ReadFloatArray(string fieldName) Parameters String fieldName name of the field Returns Single [] the float array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadInt.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadInt.html",
    "title": "ReadInt Method | Hazelcast .NET Documentation",
    "keywords": "ReadInt Method ReadInt(String) Declaration int ReadInt(string fieldName) Parameters String fieldName name of the field Returns Int32 the int value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadIntArray.html",
    "title": "ReadIntArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadIntArray Method ReadIntArray(String) Declaration int[] ReadIntArray(string fieldName) Parameters String fieldName name of the field Returns Int32 [] the int array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadLong.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadLong.html",
    "title": "ReadLong Method | Hazelcast .NET Documentation",
    "keywords": "ReadLong Method ReadLong(String) Declaration long ReadLong(string fieldName) Parameters String fieldName name of the field Returns Int64 the long value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadLongArray.html",
    "title": "ReadLongArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadLongArray Method ReadLongArray(String) Declaration long[] ReadLongArray(string fieldName) Parameters String fieldName name of the field Returns Int64 [] the long array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadPortable.html",
    "title": "ReadPortable Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortable Method ReadPortable<TPortable>(String) Declaration TPortable ReadPortable<TPortable>(string fieldName) where TPortable : IPortable Parameters String fieldName name of the field Returns TPortable the portable value read Type Parameters TPortable Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadPortableArray.html",
    "title": "ReadPortableArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadPortableArray Method ReadPortableArray<TPortable>(String) Declaration TPortable[] ReadPortableArray<TPortable>(string fieldName) where TPortable : IPortable Parameters String fieldName name of the field Returns TPortable[] the portabke value read Type Parameters TPortable Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadShort.html",
    "title": "ReadShort Method | Hazelcast .NET Documentation",
    "keywords": "ReadShort Method ReadShort(String) Declaration short ReadShort(string fieldName) Parameters String fieldName name of the field Returns Int16 the short value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadShortArray.html",
    "title": "ReadShortArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadShortArray Method ReadShortArray(String) Declaration short[] ReadShortArray(string fieldName) Parameters String fieldName name of the field Returns Int16 [] the short array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadString.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadString.html",
    "title": "ReadString Method | Hazelcast .NET Documentation",
    "keywords": "ReadString Method ReadString(String) Declaration string ReadString(string fieldName) Parameters String fieldName name of the field Returns String the utf string value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadStringArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.ReadStringArray.html",
    "title": "ReadStringArray Method | Hazelcast .NET Documentation",
    "keywords": "ReadStringArray Method ReadStringArray(String) Declaration string[] ReadStringArray(string fieldName) Parameters String fieldName name of the field Returns String [] the string array value read Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableReader.Version.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableReader.Version.html",
    "title": "Version Property | Hazelcast .NET Documentation",
    "keywords": "Version Property Version Declaration int Version { get; } Property Value Int32 version global version of portable classes"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.GetRawDataOutput.html",
    "title": "GetRawDataOutput Method | Hazelcast .NET Documentation",
    "keywords": "GetRawDataOutput Method GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. Declaration IObjectDataOutput GetRawDataOutput() Returns IObjectDataOutput ObjectDataOutput Remarks After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. User should not that after getting raw dataoutput trying to write portable fields will result in IOException Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.html",
    "title": "IPortableWriter Interface | Hazelcast .NET Documentation",
    "keywords": "IPortableWriter Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. public interface IPortableWriter Remarks Provides a mean of writing portable fields to a binary in form of primitives, arrays of primitives , nested portable fields and array of portable fields. Methods GetRawDataOutput() After writing portable fields, one can write remaining fields in old fashioned way consecutively at the end of stream. WriteBoolean(String, Boolean) Writes a primitive boolean. WriteBooleanArray(String, Boolean[]) Writes a primitive boolean-array. WriteByte(String, Byte) Writes a primitive byte. WriteByteArray(String, Byte[]) Writes a primitive byte-array. WriteChar(String, Char) Writes a primitive char. WriteCharArray(String, Char[]) Writes a primitive char-array. WriteDouble(String, Double) Writes a primitive double. WriteDoubleArray(String, Double[]) Writes a primitive double array. WriteFloat(String, Single) Writes a primitive float. WriteFloatArray(String, Single[]) Writes a primitive float array. WriteInt(String, Int32) Writes a primitive int. WriteIntArray(String, Int32[]) Writes a primitive int-array. WriteLong(String, Int64) Writes a primitive long. WriteLongArray(String, Int64[]) Writes a primitive long-array. WriteNullPortable(String, Int32, Int32) To write a null portable value, user needs to provide class and factoryIds of related class. WritePortable(String, IPortable) Writes a Portable. WritePortableArray<TPortable>(String, TPortable[]) Writes a an array of Portables. WriteShort(String, Int16) Writes a primitive short. WriteShortArray(String, Int16[]) Writes a primitive short-array. WriteString(String, String) Writes an UTF string. WriteStringArray(String, String[]) Writes a primitive string-array."
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteBoolean.html",
    "title": "WriteBoolean Method | Hazelcast .NET Documentation",
    "keywords": "WriteBoolean Method WriteBoolean(String, Boolean) Writes a primitive boolean. Declaration void WriteBoolean(string fieldName, bool value) Parameters String fieldName name of the field Boolean value int value to be written Remarks Writes a primitive boolean. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteBooleanArray.html",
    "title": "WriteBooleanArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteBooleanArray Method WriteBooleanArray(String, Boolean[]) Writes a primitive boolean-array. Declaration void WriteBooleanArray(string fieldName, bool[] bools) Parameters String fieldName name of the field Boolean [] bools boolean array to be written Remarks Writes a primitive boolean-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteByte.html",
    "title": "WriteByte Method | Hazelcast .NET Documentation",
    "keywords": "WriteByte Method WriteByte(String, Byte) Writes a primitive byte. Declaration void WriteByte(string fieldName, byte value) Parameters String fieldName name of the field Byte value int value to be written Remarks Writes a primitive byte. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteByteArray.html",
    "title": "WriteByteArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteByteArray Method WriteByteArray(String, Byte[]) Writes a primitive byte-array. Declaration void WriteByteArray(string fieldName, byte[] bytes) Parameters String fieldName name of the field Byte [] bytes byte array to be written Remarks Writes a primitive byte-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteChar.html",
    "title": "WriteChar Method | Hazelcast .NET Documentation",
    "keywords": "WriteChar Method WriteChar(String, Char) Writes a primitive char. Declaration void WriteChar(string fieldName, char value) Parameters String fieldName name of the field Char value int value to be written Remarks Writes a primitive char. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteCharArray.html",
    "title": "WriteCharArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteCharArray Method WriteCharArray(String, Char[]) Writes a primitive char-array. Declaration void WriteCharArray(string fieldName, char[] chars) Parameters String fieldName name of the field Char [] chars char array to be written Remarks Writes a primitive char-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteDouble.html",
    "title": "WriteDouble Method | Hazelcast .NET Documentation",
    "keywords": "WriteDouble Method WriteDouble(String, Double) Writes a primitive double. Declaration void WriteDouble(string fieldName, double value) Parameters String fieldName name of the field Double value int value to be written Remarks Writes a primitive double. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteDoubleArray.html",
    "title": "WriteDoubleArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteDoubleArray Method WriteDoubleArray(String, Double[]) Writes a primitive double array. Declaration void WriteDoubleArray(string fieldName, double[] values) Parameters String fieldName name of the field Double [] values double array to be written Remarks Writes a primitive double array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteFloat.html",
    "title": "WriteFloat Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloat Method WriteFloat(String, Single) Writes a primitive float. Declaration void WriteFloat(string fieldName, float value) Parameters String fieldName name of the field Single value int value to be written Remarks Writes a primitive float. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteFloatArray.html",
    "title": "WriteFloatArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteFloatArray Method WriteFloatArray(String, Single[]) Writes a primitive float array. Declaration void WriteFloatArray(string fieldName, float[] values) Parameters String fieldName name of the field Single [] values float array to be written Remarks Writes a primitive float array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteInt.html",
    "title": "WriteInt Method | Hazelcast .NET Documentation",
    "keywords": "WriteInt Method WriteInt(String, Int32) Writes a primitive int. Declaration void WriteInt(string fieldName, int value) Parameters String fieldName name of the field Int32 value int value to be written Remarks Writes a primitive int. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteIntArray.html",
    "title": "WriteIntArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteIntArray Method WriteIntArray(String, Int32[]) Writes a primitive int-array. Declaration void WriteIntArray(string fieldName, int[] ints) Parameters String fieldName name of the field Int32 [] ints int array to be written Remarks Writes a primitive int-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteLong.html",
    "title": "WriteLong Method | Hazelcast .NET Documentation",
    "keywords": "WriteLong Method WriteLong(String, Int64) Writes a primitive long. Declaration void WriteLong(string fieldName, long value) Parameters String fieldName name of the field Int64 value long value to be written Remarks Writes a primitive long. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteLongArray.html",
    "title": "WriteLongArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteLongArray Method WriteLongArray(String, Int64[]) Writes a primitive long-array. Declaration void WriteLongArray(string fieldName, long[] longs) Parameters String fieldName name of the field Int64 [] longs long array to be written Remarks Writes a primitive long-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteNullPortable.html",
    "title": "WriteNullPortable Method | Hazelcast .NET Documentation",
    "keywords": "WriteNullPortable Method WriteNullPortable(String, Int32, Int32) To write a null portable value, user needs to provide class and factoryIds of related class. Declaration void WriteNullPortable(string fieldName, int factoryId, int classId) Parameters String fieldName name of the field Int32 factoryId factory id of related portable class Int32 classId class id of related portable class Remarks To write a null portable value, user needs to provide class and factoryIds of related class. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WritePortable.html",
    "title": "WritePortable Method | Hazelcast .NET Documentation",
    "keywords": "WritePortable Method WritePortable(String, IPortable) Writes a Portable. Declaration void WritePortable(string fieldName, IPortable portable) Parameters String fieldName name of the field IPortable portable Portable to be written Remarks Writes a Portable. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WritePortableArray.html",
    "title": "WritePortableArray Method | Hazelcast .NET Documentation",
    "keywords": "WritePortableArray Method WritePortableArray<TPortable>(String, TPortable[]) Writes a an array of Portables. Declaration void WritePortableArray<TPortable>(string fieldName, TPortable[] portables) where TPortable : IPortable Parameters String fieldName name of the field TPortable[] portables portable array to be written Type Parameters TPortable Remarks Writes a an array of Portables. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteShort.html",
    "title": "WriteShort Method | Hazelcast .NET Documentation",
    "keywords": "WriteShort Method WriteShort(String, Int16) Writes a primitive short. Declaration void WriteShort(string fieldName, short value) Parameters String fieldName name of the field Int16 value int value to be written Remarks Writes a primitive short. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteShortArray.html",
    "title": "WriteShortArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteShortArray Method WriteShortArray(String, Int16[]) Writes a primitive short-array. Declaration void WriteShortArray(string fieldName, short[] values) Parameters String fieldName name of the field Int16 [] values short array to be written Remarks Writes a primitive short-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteString.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteString.html",
    "title": "WriteString Method | Hazelcast .NET Documentation",
    "keywords": "WriteString Method WriteString(String, String) Writes an UTF string. Declaration void WriteString(string fieldName, string value) Parameters String fieldName name of the field String value utf string value to be written Remarks Writes an UTF string. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteStringArray.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IPortableWriter.WriteStringArray.html",
    "title": "WriteStringArray Method | Hazelcast .NET Documentation",
    "keywords": "WriteStringArray Method WriteStringArray(String, String[]) Writes a primitive string-array. Declaration void WriteStringArray(string fieldName, string[] strings) Parameters String fieldName name of the field String [] strings string array to be written Remarks Writes a primitive string-array. Exceptions IOException System.IO.IOException"
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializer.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializer.html",
    "title": "ISerializer Interface | Hazelcast .NET Documentation",
    "keywords": "ISerializer Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Defines a custom serializer. public interface ISerializer : IDisposable Inherited Members IDisposable.Dispose() Properties TypeId Gets the identifier of the serialized type."
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializer.TypeId.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializer.TypeId.html",
    "title": "TypeId Property | Hazelcast .NET Documentation",
    "keywords": "TypeId Property TypeId Gets the identifier of the serialized type. Declaration int TypeId { get; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.CreateSerializer.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.CreateSerializer.html",
    "title": "CreateSerializer Method | Hazelcast .NET Documentation",
    "keywords": "CreateSerializer Method CreateSerializer() Creates a new serializer for the serialization type Declaration ISerializer CreateSerializer() Returns ISerializer a new serializer instance"
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.GetSerializationType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.GetSerializationType.html",
    "title": "GetSerializationType Method | Hazelcast .NET Documentation",
    "keywords": "GetSerializationType Method GetSerializationType() Returns the actual class type of the serialized object Declaration Type GetSerializationType() Returns Type the serialized object type"
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.html",
    "title": "ISerializerHook<T> Interface | Hazelcast .NET Documentation",
    "keywords": "ISerializerHook<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll public interface ISerializerHook<T> Type Parameters T Methods CreateSerializer() Creates a new serializer for the serialization type GetSerializationType() Returns the actual class type of the serialized object IsOverwritable() Defines if this serializer can be overridden by defining a custom serializer in the configurations (codebase or configuration file)"
  },
  "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.IsOverwritable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.ISerializerHook-1.IsOverwritable.html",
    "title": "IsOverwritable Method | Hazelcast .NET Documentation",
    "keywords": "IsOverwritable Method IsOverwritable() Defines if this serializer can be overridden by defining a custom serializer in the configurations (codebase or configuration file) Declaration bool IsOverwritable() Returns Boolean if the serializer is overwritable"
  },
  "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.html",
    "title": "IStreamSerializer<T> Interface | Hazelcast .NET Documentation",
    "keywords": "IStreamSerializer<T> Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll A base class for custom serialization. public interface IStreamSerializer<T> : ISerializer, IDisposable Inherited Members ISerializer.TypeId IDisposable.Dispose() Type Parameters T Remarks A base class for custom serialization. User can register custom serializer. Methods Read(IObjectDataInput) Reads object from objectDataInputStream Write(IObjectDataOutput, T) This method writes object to ObjectDataOutput"
  },
  "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.Read.html",
    "title": "Read Method | Hazelcast .NET Documentation",
    "keywords": "Read Method Read(IObjectDataInput) Reads object from objectDataInputStream Declaration T Read(IObjectDataInput input) Parameters IObjectDataInput input ObjectDataInput stream that object will read from Returns T read object Exceptions IOException in case of failure to read"
  },
  "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IStreamSerializer-1.Write.html",
    "title": "Write Method | Hazelcast .NET Documentation",
    "keywords": "Write Method Write(IObjectDataOutput, T) This method writes object to ObjectDataOutput Declaration void Write(IObjectDataOutput output, T obj) Parameters IObjectDataOutput output ObjectDataOutput stream that object will be written to T obj that will be written to out Exceptions IOException in case of failure to write"
  },
  "4.1.0/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IVersionedPortable.ClassVersion.html",
    "title": "ClassVersion Property | Hazelcast .NET Documentation",
    "keywords": "ClassVersion Property ClassVersion Returns version for this Portable class Declaration int ClassVersion { get; } Property Value Int32 class version"
  },
  "4.1.0/api/Hazelcast.Serialization.IVersionedPortable.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.IVersionedPortable.html",
    "title": "IVersionedPortable Interface | Hazelcast .NET Documentation",
    "keywords": "IVersionedPortable Interface Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll VersionedPortable is an extension to IPortable to support per class version instead of a global serialization version. public interface IVersionedPortable : IPortable Inherited Members IPortable.ClassId IPortable.FactoryId IPortable.ReadPortable(IPortableReader) IPortable.WritePortable(IPortableWriter) Properties ClassVersion Returns version for this Portable class See Also IPortable IPortableFactory"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.-ctor.html",
    "title": "JavaClass Constructor | Hazelcast .NET Documentation",
    "keywords": "JavaClass Constructor JavaClass(String) Declaration public JavaClass(string name) Parameters String name"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.Equals.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.Equals.html",
    "title": "Equals Method | Hazelcast .NET Documentation",
    "keywords": "Equals Method Equals(Object) Declaration public override bool Equals(object obj) Parameters Object obj Returns Boolean Overrides Object.Equals(Object) Equals(JavaClass) Declaration protected bool Equals(JavaClass other) Parameters JavaClass other Returns Boolean Equals(JavaClass, JavaClass) Declaration public static bool Equals(JavaClass left, JavaClass right) Parameters JavaClass left JavaClass right Returns Boolean"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.GetHashCode.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.GetHashCode.html",
    "title": "GetHashCode Method | Hazelcast .NET Documentation",
    "keywords": "GetHashCode Method GetHashCode() Declaration public override int GetHashCode() Returns Int32 Overrides Object.GetHashCode()"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.html",
    "title": "JavaClass Class | Hazelcast .NET Documentation",
    "keywords": "JavaClass Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Class for serializing/deserializing Java Class types public class JavaClass Inheritance Object JavaClass Inherited Members Object.Equals(Object, Object) Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors JavaClass(String) Properties Name Methods Equals(JavaClass) Equals(JavaClass, JavaClass) Equals(Object) GetHashCode() ToString()"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.Name.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.Name.html",
    "title": "Name Property | Hazelcast .NET Documentation",
    "keywords": "Name Property Name Declaration public string Name { get; } Property Value String"
  },
  "4.1.0/api/Hazelcast.Serialization.JavaClass.ToString.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.JavaClass.ToString.html",
    "title": "ToString Method | Hazelcast .NET Documentation",
    "keywords": "ToString Method ToString() Declaration public override string ToString() Returns String Overrides Object.ToString()"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationException.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationException.-ctor.html",
    "title": "SerializationException Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializationException Constructor SerializationException() Initializes a new instance of the SerializationException class. Declaration public SerializationException() SerializationException(String) Initializes a new instance of the SerializationException class with a specified error message. Declaration public SerializationException(string message) Parameters String message The message that describes the error. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(Exception innerException) Parameters Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified. SerializationException(String, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception. Declaration public SerializationException(string message, Exception innerException) Parameters String message The message that describes the error. Exception innerException The exception that is the cause of the current exception, or a null reference if no inner exception is specified."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationException.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationException.html",
    "title": "SerializationException Class | Hazelcast .NET Documentation",
    "keywords": "SerializationException Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Represents an exception that is thrown when an error occurs while serializing or de-serializing objects. [Serializable] public sealed class SerializationException : HazelcastException, ISerializable Inheritance Object Exception HazelcastException SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Constructors SerializationException() Initializes a new instance of the SerializationException class. SerializationException(Exception) Initializes a new instance of the SerializationException class with a reference to the inner exception that is the cause of this exception. SerializationException(String) Initializes a new instance of the SerializationException class with a specified error message. SerializationException(String, Exception) Initializes a new instance of the SerializationException class with a specified error message and a reference to the inner exception that is the cause of this exception."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactory.html",
    "title": "AddDataSerializableFactory Method | Hazelcast .NET Documentation",
    "keywords": "AddDataSerializableFactory Method AddDataSerializableFactory(Int32, IDataSerializableFactory) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactory(int factoryId, IDataSerializableFactory factory) Parameters Int32 factoryId The identifier of the factory. IDataSerializableFactory factory The factory. Returns SerializationOptions The SerializationOptions ."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddDataSerializableFactoryClass.html",
    "title": "AddDataSerializableFactoryClass Method | Hazelcast .NET Documentation",
    "keywords": "AddDataSerializableFactoryClass Method AddDataSerializableFactoryClass(Int32, String) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, string factoryTypeName) Parameters Int32 factoryId The identifier of the factory. String factoryTypeName The type name of the factory Returns SerializationOptions The SerializationOptions . AddDataSerializableFactoryClass(Int32, Type) Adds an IDataSerializableFactory . Declaration public SerializationOptions AddDataSerializableFactoryClass(int factoryId, Type factoryType) Parameters Int32 factoryId The identifier of the factory. Type factoryType The type of the factory Returns SerializationOptions The SerializationOptions ."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.AddPortableFactory.html",
    "title": "AddPortableFactory Method | Hazelcast .NET Documentation",
    "keywords": "AddPortableFactory Method AddPortableFactory(Int32, IPortableFactory) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, IPortableFactory factory) Parameters Int32 factoryId The identifier of the factory. IPortableFactory factory The factory. Returns SerializationOptions The SerializationOptions . AddPortableFactory(Int32, Type) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, Type factoryType) Parameters Int32 factoryId The identifier of the factory. Type factoryType The type of the factory Returns SerializationOptions The SerializationOptions . AddPortableFactory(Int32, String) Adds an IPortableFactory . Declaration public SerializationOptions AddPortableFactory(int factoryId, string factoryTypeName) Parameters Int32 factoryId The identifier of the factory. String factoryTypeName The type name of the factory Returns SerializationOptions The SerializationOptions ."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.ClassDefinitions.html",
    "title": "ClassDefinitions Property | Hazelcast .NET Documentation",
    "keywords": "ClassDefinitions Property ClassDefinitions Gets the collection of IClassDefinition . Declaration public ICollection<IClassDefinition> ClassDefinitions { get; } Property Value ICollection < IClassDefinition > Remarks This can only be done programmatically."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.-ctor.html",
    "title": "SerializationOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializationOptions Constructor SerializationOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializationOptions()"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.DataSerializableFactories.html",
    "title": "DataSerializableFactories Property | Hazelcast .NET Documentation",
    "keywords": "DataSerializableFactories Property DataSerializableFactories Gets the collection of FactoryOptions<T> of IDataSerializableFactory . Declaration public ICollection<FactoryOptions<IDataSerializableFactory>> DataSerializableFactories { get; } Property Value ICollection < FactoryOptions < IDataSerializableFactory >>"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.Endianness.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.Endianness.html",
    "title": "Endianness Property | Hazelcast .NET Documentation",
    "keywords": "Endianness Property Endianness Gets or sets the Endianness . This value should match the server configuration. Declaration public Endianness Endianness { get; set; } Property Value Endianness"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.GlobalSerializer.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.GlobalSerializer.html",
    "title": "GlobalSerializer Property | Hazelcast .NET Documentation",
    "keywords": "GlobalSerializer Property GlobalSerializer Gets the GlobalSerializerOptions . Declaration public GlobalSerializerOptions GlobalSerializer { get; set; } Property Value GlobalSerializerOptions Remarks When defined in a configuration file, it is defined as an injected type, for instance: \"globalSerializer\": { \"typeName\": \"My.Serializer\", \"args\": { \"foo\": 42 }, \"overrideClrSerialization\": true } with the additional overrideClrSerialization property."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.html",
    "title": "SerializationOptions Class | Hazelcast .NET Documentation",
    "keywords": "SerializationOptions Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Contains the serialization options public sealed class SerializationOptions Inheritance Object SerializationOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Remarks IIdentifiedDataSerializable , IPortable , custom serializers, and global serializer can be configured using this config. Constructors SerializationOptions() Initializes a new instance of the SerializationOptions class. Properties ClassDefinitions Gets the collection of IClassDefinition . DataSerializableFactories Gets the collection of FactoryOptions<T> of IDataSerializableFactory . Endianness Gets or sets the Endianness . This value should match the server configuration. GlobalSerializer Gets the GlobalSerializerOptions . PortableFactories Gets the collection of FactoryOptions<T> of IPortableFactory . PortableVersion Gets or sets the portable version. Serializers Gets the collection of SerializerOptions . ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Methods AddDataSerializableFactory(Int32, IDataSerializableFactory) Adds an IDataSerializableFactory . AddDataSerializableFactoryClass(Int32, String) Adds an IDataSerializableFactory . AddDataSerializableFactoryClass(Int32, Type) Adds an IDataSerializableFactory . AddPortableFactory(Int32, IPortableFactory) Adds an IPortableFactory . AddPortableFactory(Int32, String) Adds an IPortableFactory . AddPortableFactory(Int32, Type) Adds an IPortableFactory ."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.PortableFactories.html",
    "title": "PortableFactories Property | Hazelcast .NET Documentation",
    "keywords": "PortableFactories Property PortableFactories Gets the collection of FactoryOptions<T> of IPortableFactory . Declaration public ICollection<FactoryOptions<IPortableFactory>> PortableFactories { get; } Property Value ICollection < FactoryOptions < IPortableFactory >>"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.PortableVersion.html",
    "title": "PortableVersion Property | Hazelcast .NET Documentation",
    "keywords": "PortableVersion Property PortableVersion Gets or sets the portable version. Declaration public int PortableVersion { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.Serializers.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.Serializers.html",
    "title": "Serializers Property | Hazelcast .NET Documentation",
    "keywords": "Serializers Property Serializers Gets the collection of SerializerOptions . Declaration public ICollection<SerializerOptions> Serializers { get; } Property Value ICollection < SerializerOptions > Remarks"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializationOptions.ValidateClassDefinitions.html",
    "title": "ValidateClassDefinitions Property | Hazelcast .NET Documentation",
    "keywords": "ValidateClassDefinitions Property ValidateClassDefinitions Whether to check for class definition errors at start, and throw an Serialization Exception with error definition. Declaration public bool ValidateClassDefinitions { get; set; } Property Value Boolean"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializerOptions.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializerOptions.-ctor.html",
    "title": "SerializerOptions Constructor | Hazelcast .NET Documentation",
    "keywords": "SerializerOptions Constructor SerializerOptions() Initializes a new instance of the SerializationOptions class. Declaration public SerializerOptions() SerializerOptions(SerializerOptions, Boolean) Initializes a new instance of the SerializationOptions class. Declaration protected SerializerOptions(SerializerOptions other, bool shallow) Parameters SerializerOptions other Boolean shallow"
  },
  "4.1.0/api/Hazelcast.Serialization.SerializerOptions.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializerOptions.html",
    "title": "SerializerOptions Class | Hazelcast .NET Documentation",
    "keywords": "SerializerOptions Class Namespace: Hazelcast.Serialization Assembly: Hazelcast.Net.dll Configures a serializer for a type. public class SerializerOptions : SingletonServiceFactory<ISerializer>, IDisposable Inheritance Object SingletonServiceFactory < ISerializer > SerializerOptions Implements IDisposable Inherited Members SingletonServiceFactory<ISerializer>.Creator SingletonServiceFactory<ISerializer>.IsConfigured SingletonServiceFactory<ISerializer>.ServiceProvider SingletonServiceFactory<ISerializer>.OwnsService SingletonServiceFactory<ISerializer>.Service SingletonServiceFactory<ISerializer>.Dispose() SingletonServiceFactory<ISerializer>.Dispose(Boolean) Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors SerializerOptions() Initializes a new instance of the SerializationOptions class. SerializerOptions(SerializerOptions, Boolean) Initializes a new instance of the SerializationOptions class. Properties SerializedType Gets or sets the type being serialized."
  },
  "4.1.0/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html": {
    "href": "4.1.0/api/Hazelcast.Serialization.SerializerOptions.SerializedType.html",
    "title": "SerializedType Property | Hazelcast .NET Documentation",
    "keywords": "SerializedType Property SerializedType Gets or sets the type being serialized. Declaration public Type SerializedType { get; set; } Property Value Type"
  },
  "4.1.0/api/Hazelcast.StateChangedEventArgs.-ctor.html": {
    "href": "4.1.0/api/Hazelcast.StateChangedEventArgs.-ctor.html",
    "title": "StateChangedEventArgs Constructor | Hazelcast .NET Documentation",
    "keywords": "StateChangedEventArgs Constructor StateChangedEventArgs(ClientState) Initializes a new instance of the StateChangedEventArgs class. Declaration public StateChangedEventArgs(ClientState state) Parameters ClientState state"
  },
  "4.1.0/api/Hazelcast.StateChangedEventArgs.html": {
    "href": "4.1.0/api/Hazelcast.StateChangedEventArgs.html",
    "title": "StateChangedEventArgs Class | Hazelcast .NET Documentation",
    "keywords": "StateChangedEventArgs Class Namespace: Hazelcast Assembly: Hazelcast.Net.dll Represents event data for the state changed event. public class StateChangedEventArgs Inheritance Object StateChangedEventArgs Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Constructors StateChangedEventArgs(ClientState) Initializes a new instance of the StateChangedEventArgs class. Properties State Gets the new client state."
  },
  "4.1.0/api/Hazelcast.StateChangedEventArgs.State.html": {
    "href": "4.1.0/api/Hazelcast.StateChangedEventArgs.State.html",
    "title": "State Property | Hazelcast .NET Documentation",
    "keywords": "State Property State Gets the new client state. Declaration public ClientState State { get; } Property Value ClientState"
  },
  "4.1.0/api/Hazelcast.Transactions.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.html",
    "title": "Hazelcast.Transactions Namespace | Hazelcast .NET Documentation",
    "keywords": "Hazelcast.Transactions Namespace Classes TransactionOptions Contains the configuration for a transaction Interfaces ITransactionContext Represents a transaction context. Enums TransactionOptions.TransactionType"
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.CommitAsync.html",
    "title": "CommitAsync Method | Hazelcast .NET Documentation",
    "keywords": "CommitAsync Method CommitAsync() Commits the transaction. Declaration Task CommitAsync() Returns Task"
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.Complete.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.Complete.html",
    "title": "Complete Method | Hazelcast .NET Documentation",
    "keywords": "Complete Method Complete() Completes the transaction. Declaration void Complete() Remarks If the transaction has neither been committed nor rolled back when the ITransactionContext is disposed, it will be committed if it has been completed, else it will be rolled back."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetListAsync.html",
    "title": "GetListAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetListAsync Method GetListAsync<TItem>(String) Gets a IHTxList<TItem> transactional distributed object. Declaration Task<IHTxList<TItem>> GetListAsync<TItem>(string name) Parameters String name The unique name of the list. Returns Task < IHTxList <TItem>> The transactional list that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetMapAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetMapAsync.html",
    "title": "GetMapAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMapAsync Method GetMapAsync<TKey, TValue>(String) Gets a IHTxMap<TKey, TValue> transactional distributed object. Declaration Task<IHTxMap<TKey, TValue>> GetMapAsync<TKey, TValue>(string name) Parameters String name The unique name of the v. Returns Task < IHTxMap <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetMultiMapAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetMultiMapAsync.html",
    "title": "GetMultiMapAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetMultiMapAsync Method GetMultiMapAsync<TKey, TValue>(String) Gets a IHTxMultiMap<TKey, TValue> transactional distributed object. Declaration Task<IHTxMultiMap<TKey, TValue>> GetMultiMapAsync<TKey, TValue>(string name) Parameters String name The unique name of the v. Returns Task < IHTxMultiMap <TKey, TValue>> The transactional map that was retrieved or created. Type Parameters TKey The type of the keys. TValue The type of the values."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetQueueAsync.html",
    "title": "GetQueueAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetQueueAsync Method GetQueueAsync<TItem>(String) Gets a IHTxQueue<TItem> transactional distributed object. Declaration Task<IHTxQueue<TItem>> GetQueueAsync<TItem>(string name) Parameters String name The unique name of the v. Returns Task < IHTxQueue <TItem>> The transactional queue that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.GetSetAsync.html",
    "title": "GetSetAsync Method | Hazelcast .NET Documentation",
    "keywords": "GetSetAsync Method GetSetAsync<TItem>(String) Gets a IHTxSet<TItem> transactional distributed object. Declaration Task<IHTxSet<TItem>> GetSetAsync<TItem>(string name) Parameters String name The unique name of the set. Returns Task < IHTxSet <TItem>> The transactional set that was retrieved or created. Type Parameters TItem The type of the items."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.html",
    "title": "ITransactionContext Interface | Hazelcast .NET Documentation",
    "keywords": "ITransactionContext Interface Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Represents a transaction context. public interface ITransactionContext : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Properties TransactionId Gets the unique identifier of the transaction. Methods CommitAsync() Commits the transaction. Complete() Completes the transaction. GetListAsync<TItem>(String) Gets a IHTxList<TItem> transactional distributed object. GetMapAsync<TKey, TValue>(String) Gets a IHTxMap<TKey, TValue> transactional distributed object. GetMultiMapAsync<TKey, TValue>(String) Gets a IHTxMultiMap<TKey, TValue> transactional distributed object. GetQueueAsync<TItem>(String) Gets a IHTxQueue<TItem> transactional distributed object. GetSetAsync<TItem>(String) Gets a IHTxSet<TItem> transactional distributed object. RollbackAsync() Rolls the transaction back."
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.RollbackAsync.html",
    "title": "RollbackAsync Method | Hazelcast .NET Documentation",
    "keywords": "RollbackAsync Method RollbackAsync() Rolls the transaction back. Declaration Task RollbackAsync() Returns Task"
  },
  "4.1.0/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.ITransactionContext.TransactionId.html",
    "title": "TransactionId Property | Hazelcast .NET Documentation",
    "keywords": "TransactionId Property TransactionId Gets the unique identifier of the transaction. Declaration Guid TransactionId { get; } Property Value Guid"
  },
  "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Durability.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Durability.html",
    "title": "Durability Property | Hazelcast .NET Documentation",
    "keywords": "Durability Property Durability Gets or sets the transaction durability. Declaration public int Durability { get; set; } Property Value Int32"
  },
  "4.1.0/api/Hazelcast.Transactions.TransactionOptions.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.TransactionOptions.html",
    "title": "TransactionOptions Class | Hazelcast .NET Documentation",
    "keywords": "TransactionOptions Class Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll Contains the configuration for a transaction public sealed class TransactionOptions Inheritance Object TransactionOptions Inherited Members Object.Equals(Object) Object.Equals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Object.ReferenceEquals(Object, Object) Object.ToString() Properties Durability Gets or sets the transaction durability. Timeout Gets or sets the transaction timeout. Type Gets or sets the type of the transaction."
  },
  "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Timeout.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Timeout.html",
    "title": "Timeout Property | Hazelcast .NET Documentation",
    "keywords": "Timeout Property Timeout Gets or sets the transaction timeout. Declaration public TimeSpan Timeout { get; set; } Property Value TimeSpan"
  },
  "4.1.0/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.TransactionOptions.TransactionType.html",
    "title": "TransactionOptions.TransactionType Enum | Hazelcast .NET Documentation",
    "keywords": "TransactionOptions.TransactionType Enum Namespace: Hazelcast.Transactions Assembly: Hazelcast.Net.dll public enum TransactionType Fields OnePhase Commits the transaction in one single final phase. TwoPhase Commits the transaction in two distinct phases."
  },
  "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Type.html": {
    "href": "4.1.0/api/Hazelcast.Transactions.TransactionOptions.Type.html",
    "title": "Type Property | Hazelcast .NET Documentation",
    "keywords": "Type Property Type Gets or sets the type of the transaction. Declaration public TransactionOptions.TransactionType Type { get; set; } Property Value TransactionOptions.TransactionType"
  },
  "4.1.0/api/index.html": {
    "href": "4.1.0/api/index.html",
    "title": "API Reference | Hazelcast .NET Documentation",
    "keywords": "API Reference This section contains the full public API reference documentation, generated from source-code-level comments, and completed with DocFX additional content. Use the navigation to the left to browse namespaces and members. For extra details, including all code comments, browse the source code itself."
  },
  "4.1.0/doc/about.html": {
    "href": "4.1.0/doc/about.html",
    "title": "About | Hazelcast .NET Documentation",
    "keywords": "About"
  },
  "4.1.0/doc/atomiclong.html": {
    "href": "4.1.0/doc/atomiclong.html",
    "title": "AtomicLong | Hazelcast .NET Documentation",
    "keywords": "AtomicLong Note IAtomicLong is a member of CP Subsystem API. For detailed information, see the CP SubSystem documentation . Hazelcast IAtomicLong is the distributed implementation of java.util.concurrent.atomic.AtomicLong and offers most of its operations such as Get, Set, GetAndSet, CompareAndSet and IncrementAndGet. You can also think of it as implementing most of @System.Interlocked methods for long ( System.Int64 ) distributed values. Since IAtomicLong is a distributed implementation, these operations involve remote calls and thus their performances differ from local, in-memory, atomic longs. The following example code creates an instance, increments it by a million and prints the count. await using var client = await HazelcastClientFactory.StartNewClientAsync(); await using var counter = await client.CPSubSystem.GetAtomicLongAsync(\"counter-unique-name\"); for (int i = 0; i < 1000 * 1000; i++ ) { if (i % 500000 == 0) Console.WriteLine($\"At: {i}\"); await counter.IncrementAndGetAsync(); } Console.WriteLine($\"Count is {await counter.GetAsync()}\"); When you start other instances with the code above, you will see the count as member count times a million. Note that sending functions to, and executing functions on, AtomicLong as documented for the Java client (see this page ) are not supported by the C# client."
  },
  "4.1.0/doc/atomicref.html": {
    "href": "4.1.0/doc/atomicref.html",
    "title": "AtomicReference | Hazelcast .NET Documentation",
    "keywords": "AtomicReference Note IAtomicReference is a member of CP Subsystem API. For detailed information, see the CP SubSystem documentation . Hazelcast @Hazelcast.CP.IAtomicReference is the distributed implementation of java.util.concurrent.atomic.AtomicReference and offers most of its operations such as Get, Set, GetAndSet and CompareAndSet. You can also think of GetAndSet, CompareAndSet as @System.Interlocked Exchange and CompareExchange methods for distributed values. Since @Hazelcast.CP.IAtomicReference is a distributed implementation, these operations involve remote calls and thus their performances differ from local, in-memory, references. The following example code adds a dot the end of any string added to the shared reference: var cancellationSource = new CancellationTokenSource(); var cancellationToken = cancellationSource.Token; await using var client = await HazelcastClientFactory.StartNewClientAsync(options); await using var sentence = await client.CPSubsystem.GetAtomicReferenceAsync<string>(\"sentence-unique-key\"); while (!cancellationToken.IsCancellationRequested) { var value = await sentence.GetAsync(); if (value != null && !value.EndsWith(\".\")) { var newValue = value + \".\"; if (!await sentence.CompareAndSetAsync(value, newValue)) continue; } await Task.Delay(100, cancellationToken); } await sentence.DestroyAsync(); Note that sending functions to, and executing functions on, AtomicReference as documented for the Java client (see this page ) are not supported by the C# client."
  },
  "4.1.0/doc/configuration.html": {
    "href": "4.1.0/doc/configuration.html",
    "title": "Configuration | Hazelcast .NET Documentation",
    "keywords": "Configuration Configuration follows the Microsoft.Extensions.Configuration patterns. The Hazelcast client configuration is represented by the HazelcastOptions class. When simply instantiated, this class contains the default options (i.e. it does not even read the options file): var options = new HazelcastOptions(); For anything more realistic though, different approaches are available, as detailed below. To get an overview of all the different configuration options, refer to the Options page. Simple Environment In a simple, non-hosted environment without dependency injection, options need to be built using the @Hazelcast.HazelcastOptions.Build methods. public class Program { public static void Main(string[] args) { var options = HazelcastOptions.Build(args); // ... use options ... } } Alternatively, a fluent builder is available: public class Program { public static void Main(string[] args) { var options = new HazelcastOptionsBuilder.With(args).Build(); } } This will determine the application environment ( <env> ) from the DOTNET_ENVIRONMENT and ASPNETCORE_ENVIRONMENT variables (or, if not specified, default to Production ), and then gather configuration keys from the following ordered sources: appsettings.json file appsettings.<env>.json file Environment variables (using double-underscore separator, e.g. hazelcast__clientName ) Command line arguments (using colon separator, e.g. hazelcast:clientName ) hazelcast.json file hazelcast.<env>.json file Hazelcast-specific environment variables (using dot separator, e.g. hazelcast.clientName ) Hazelcast-specific command line arguments (using dot separator, e.g. hazelcast.clientName ) Optional in-memory key/values The Hazelcast-specific sources for environment variables and command line arguments only exist to support the non-standard dot separator, and complement the original sources. The @Hazelcast.HazelcastOptions.Build method supports overriding the name and location of the hazelcast.json and hazelcast.<env>.json files, overriding the <env> environment name, and providing optional in-memory key/values. This can also be achived, in a more fluent way, with the @HazelcastOptionsBuilder. Every Hazelcast option can therefore be specified via the traditional .NET Core methods. For instance, specifying one cluster server address can be done via the following Json fragment in any of the Json files: { \"hazelcast\": { \"networking\": { \"addresses\": [ \"server:port\" ] } } } It can alternatively be specified by setting an environment variable (note that the dotted format may not be supported on every platform): hazelcast__networking__addresses__0=server:port hazelcast.networking.addresses.0=server:port It can alternatively be specified with command line arguments: $ myApp hazelcast:networking:addresses:0=server:port $ myApp hazelcast.networking.addresses.0=server:port All the .NET Core supported formats are supported (i.e. /arg value , /arg=value , -arg value , etc.). See the documentation for details. Finally, the method supports direct, in-memory key/values, where values can use either the dot or colon separator: var options = HazelcastOptions.Build(args, new[] { new KeyValuePair<string, string>(\"hazelcast.networking.addresses.0\", \"server:port\"), }); This is where the fluent @HazelcastOptionsBuilder may be more convenient: var options = new HazelcastOptionsBuilder.With(\"hazelcast.networking.addresses.0\", \"server:port\").Build(); Container Environment In a container environment, one can rely on dependency injection to manage configuration. An IConfiguration must be created, in order to add Hazelcast to the services: var configuration = new ConfigurationBuilder() // add default configuration (appsettings.json, etc) .AddDefaults(args) // add Hazelcast-specific configuration .AddHazelcast(args) .Build(); // create the service collection var services = new ServiceCollection(); // add Hazelcast-specific services services.AddHazelcast(configuration); Configuration keys will be gathered from the same sources and in the same order as before, and options will be registered in the service container, and available via dependency injection: public class MyService { private readonly HazelcastOptions _options; public MyService(IOptions<HazelcastOptions> ioptions) { _options = ioptions.Value; } public async Task DoSomethingAsync() { await using var client = HazelcastClientFactory.StartNewClientAsync(options); // ... } } Also, the traditional Microsoft Dependency Injection patterns are supported: services.Configure<HazelcastOptions>(options => { options.Networking.Addresses.Add(\"server:port\"); }); Note: The required extension methods are not part of the Hazelcast.Net NuGet packages, but are provided as part of the Hazelcast.Net.DependencyInjection project which is only provided in source form . Hosted Environment In a .NET Core hosted environment (see .NET Generic Host ), the host supplies the IConfiguration instance, and manages dependency injection. All that is needed is to tell the host how to handle the Hazelcast-specific configuration (e.g. hazelcast.json ), and to add Hazelcast to services. For example: Host.CreateDefaultBuilder(args) .ConfigureAppConfiguration((hostingContext, builder) => { builder.AddHazelcast(args); }) .ConfigureServices((hostingContext, services) => { services.AddHazelcast(hostingContext.Configuration); }); Just as with the previous container environment, configuration keys will be gathered from the same sources and in the same order as before, and options will be registered in the service container, and available via dependency injection Note: The required extension methods are not part of the Hazelcast.Net NuGet packages, but are provided as part of the Hazelcast.Net.DependencyInjection project which is only provided in source form ."
  },
  "4.1.0/doc/contrib.html": {
    "href": "4.1.0/doc/contrib.html",
    "title": "Contributing | Hazelcast .NET Documentation",
    "keywords": "Contributing The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This documentation also details how to obtain the source code, build the solution, interact with the community, and contribute."
  },
  "4.1.0/doc/contrib-actions.html": {
    "href": "4.1.0/doc/contrib-actions.html",
    "title": "GitHub Actions | Hazelcast .NET Documentation",
    "keywords": "GitHub Actions The Hazelcast .NET Client relies on GitHub Actions for CI. Workflows live in YAML files in .github/workflows and are described below. Build Branch This workflow is defined in build-branch.yml and triggers on every push to a branch (except release/* branches). It runs one single job with the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET ( actions/setup-dotnet ) Install JDK ( actions/setup-java ) Checkout our code ( actions/checkout ) Build and test ( hz.ps1 ) Report the test results to the workflow log ( dorny/test-reporter ) Report the test coverage to the workflow log ( dotcover-report ) Upload the test coverage reports as an artifact, ( actions/upload-artifact ) Publish the test coverage report to Codecov.io ( codecov/codecov-action ) Build PR This workflow is defined in build-pr.yml and triggers on every push to a PR. It runs one single job with the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET ( actions/setup-dotnet ) Install JDK ( actions/setup-java ) Checkout our code ( actions/checkout ) Build and test ( hz.ps1 ) Upload the test results as an artifact ( actions/upload-artifact ) Upload the test coverage reports as an artifact ( actions/upload-artifact ) Note that this workflow does not report nor publish anything, as it executes against a user's PR and thus has no permission to write to our repository. Therefore, a second workflow, defined in report-pr.yml , triggers after every run of build-pr.yml , and runs one single job with the following steps: Prepare the environment (bash script) Download the test results and coverage reports artifacts ( actions/github-script + custom script) Unzip the downloaded artifacts, (bash script) Report the test results to the workflow log ( dorny/test-reporter ) Report the test coverage to the workflow log ( dotcover-report ) Publish the test coverage report to Codecov.io ( codecov/codecov-action ) In addition, this worklow is registered as a required status check for all protected branches ( master , 4.0.z ...). These branches require that both the Build PR for Linux and Windows checks have passed before merging any PR. Build Release This workflow is defined in build-release.yml and triggers on every push to a release/* branch, and every push of a v* tag. It runs a combination of four jobs: Analyze The Analyze job runs the following steps: Checkout our code ( actions/checkout ) Analyze the situation (bash script) and determine whether it has been triggered by a branch or a tag, and a few other things Build The Build job runs if the Analyze job has validated the situation. It runs the following steps: Install some utilities (e.g. PowerShell...) latest versions, for Linux (bash script) Install .NET ( actions/setup-dotnet ) Install JDK ( actions/setup-java ) Checkout our code ( actions/checkout ) Verify that the branch or tag version matches the code version ( hz.ps1 ) Obtains the assemblies signature key from GitHub Secrets (bash script) Build signed assemblies and test ( hz.ps1 ) Report the test results to the workflow log ( dorny/test-reporter ) Report the test coverage to the workflow log ( dotcover-report ) Upload the test coverage reports as an artifact ( actions/upload-artifact ) Publish the test coverage report to Codecov.io ( codecov/codecov-action ) Pack the NuGet packages ( hz.ps1 ) Upload the NuGet packages as an artifact ( actions/upload-artifact ) Publish the examples ( hz.ps1 ) Uploads the examples as an artifact ( actions/upload-artifact ) Creates a documentation patch ( hz.ps1 + git commands) Uploads the documentation patch as an artifact ( actions/upload-artifact ) Publish The Publish job runs if the Build job was successful, and is in fact two jobs, that run different steps, depending on whether the workflow handles a branch build (preparing for a release) or a tag build (releasing). These steps are detailed below: actions in bold impact publicly visible resources such as NuGet or the documentation. For branch builds , the job runs the following steps: Download the test coverage reports and doc patch artifacts ( actions/github-script + custom script) Checkout the documentation (i.e. the gh-pages branch), apply the patch, and push documentation back to GitHub ( actions/checkout + bash script) Publish the test coverage report to Codecov.io ( codecov/codecov-action ) As this is a branch build and not an official release, only the \"dev\" part of the documentation is updated. For tag builds , the job runs the following steps: Checkout our code ( actions/checkout ) Checkout devops extensions for the hz.ps1 script from the DevOps private repository, into the build/devops directory ( actions/checkout ) Download the NuGet packages and doc patch artifacts ( actions/github-script + custom script) Upload the NuGet packages to NuGet ( hz.ps1 script devops extensions, and API key provided by GitHub Secrets) Checkout the documentation (i.e. the gh-pages branch), apply the patch, and push documentation back to GitHub ( actions/checkout + bash script) Delete the release branch (bash script) Notes In order to ensure that the actions only run on our repository, and not on forks, each worfklow's job contains if: github.repository == 'hazelcast/hazelcast-csharp-client' For building and testing, our workflows use a strategy to ensure we test both on Linux and Windows: strategy: matrix: os: [ ubuntu-latest, windows-latest ] Actions dotcover-report The dotcover-report custom action lives in the .github/actions/dotcover-report directory. It is implemented as a Node script, and accepts the following inputs: token is the GitHub token name is the name of the action, re-used when creating the check run path is the path to the coverage reports version is the client version The action scans the path for JSON coverage reports (one per target, e.g. net462 , netcoreapp3.1 ...) and retrieves the global coverage percentage for each target. It then attaches a new check run to the commit SHA, containing these percentages, so that they become visible directly in GitHub. The .github/actions.txt file contains more details about that action."
  },
  "4.1.0/doc/contrib-build.html": {
    "href": "4.1.0/doc/contrib-build.html",
    "title": "Building | Hazelcast .NET Documentation",
    "keywords": "Building Requirements For day to day development, the solution builds in Visual Studio or Rider. However, it is possible to build it entirely via our custom PowerShell script. The minimal requires are: PowerShell 6.2+ .NET 2.1, 3.1 and 5.0 SDKs Java runtime, if you want to run tests Visual Studio 2019, or at least the Visual Studio Build Tools 2019, can be downloaded from the Visual Studio site. .NET can be downloaded from the Download .NET page. You can verify whether .NET Core is installed, and which versions are supported, by running dotnet --info in a command window. PowerShell can be installed on Windows through the Windows Store ; the PowerShell documentation describes other means of installation for Windows and the various flavours of Linux. The OpenJDK provides open Java JDKs for Windows and Linux. Building On Windows For a complete build, start a Powershell console and build using the hz.ps1 script: PS> ./hs.ps1 build See the build script section below for details and arguments. Building On Linux For a complete build, from a shell console, use the hz.sh script: $ ./hz.sh build See the build script section below for details and arguments. Note that hs.sh is just a proxy to hz.ps1 : the actual build actions are always performed by hz.ps1 , which is common to Windows and Linux. It is not possible to build the .NET Framework version of the Hazelcast .NET client on Linux, as the .NET Framework is not supported on Linux. All other targets build on Linux. At the moment it is not possible to build the documentation on Linux, as DocFX does not run on .NET Core yet (see this issue for details). The upcoming v3 of DocFX will run on .NET Core. Build Script The hz.[hs|ps1] script accepts options, commands, and command arguments. PS> ./hz.[sh|ps1] [<options>] [<commands>] [<commargs>] [--- <rawargs>] To list all options and command, run ./hz.[sh|ps1] help . Examples of valid usages: ./hz.ps1 build # builds the code ./hz.ps1 build,test # builds the code and run the tests ./hz.ps1 -cover test # runs the tests with test coverage ./hz.ps1 test -cover # same ./hz.ps1 set-version -version 1.2.3 # updates the version ./hz.ps1 run-remote-controller # runs a remote controller for tests ./hz.ps1 run-server -server 4.2 # runs version 4.2 of the server ./hz.ps1 run-example ~Soak1 --- --hazelcast. # runs an example SDK Selection The global.json file at the root of the project contains: { \"sdk\": { \"allowPrerelease\": false } } This ensures that any use of the dotnet command actuallys use the lastest stable release installed on the machine, and avoids any pre-release versions, as these may break the build. Should you want to experiment with pre-releases of the .NET SDK, change false to true (but do not commit the change!). For more details, see the Select the .NET Core version to use and global.json overview articles from Microsoft."
  },
  "4.1.0/doc/contrib-faq.html": {
    "href": "4.1.0/doc/contrib-faq.html",
    "title": "FAQ | Hazelcast .NET Documentation",
    "keywords": "FAQ Could we drop the Async suffix from all asynchronous methods? No. See this post on StackOverflow, or this issue on GitHub. Or this tweet by Nick Craver. We use the Async suffix whenever a function returns an async behavior (e.g. Task or ValueTask ) like .NET itself does. The reason for this being that it removes ambiguity and helps stop subtle bugs. For example, say a PR changes this: public string MyFunc() { ... } To this: public Task<string>MyFunc() { ... } If, elsewhere, someone uses the function: var result = MyFunc(); Console.WriteLine(result); ... that will still work. But instead of writing a string , it will write a Task . And it is hard to see it. Contrast that with changing to: public Task<string>MyFuncAsync() { ... } Now, the name change forced a name change at the call site, so the impact will show in a code review. It is a safer, unambiguous version of the change. Can we provide synchronous version of the asynchronous methods? No. Async-to-Sync such as client.StartAsync().Wait() can cause issues such as blocking, dead-locking, starving the ThreadPool etc. This is tricky, and there is no way we can provide a stable implementation of synchronous methods. We'd rather have them happen in user code."
  },
  "4.1.0/doc/contrib-sources.html": {
    "href": "4.1.0/doc/contrib-sources.html",
    "title": "Sources | Hazelcast .NET Documentation",
    "keywords": "Sources The source code for Hazelcast .NET is published on GitHub at Hazelcast .NET . Clone the repository to get the development branch: git clone --recurse-submodules https://github.com/hazelcast/hazelcast-csharp-client.git Note that the repository relies on Git submodules , and therefore the --recurse-submodules is required. Development of new features takes place in the master branch. Maintenance of released versions take place in X.Y.z branches, e.g. version 4.1 is maintained in the 4.1.z branch. The code uses C# version 8.0 (as per the src/Directory.Build.props file) though we plan to migrate to 9.0. The Hazelcast.Net package targets netstandard 2.0 and 2.1, and is supported on .NET Framework 4.6.2 and later, .NET Core 2.1 (LTS), .NET Core 3.1 (LTS). The solution can be opened with Microsoft Visual Studio 2019 or JetBrain Rider , but can also be fully built via our custom PowerShell script (see the Building page). The main Hazelcast.Net project (which builds the library) is covered by Microsoft's Roslyn analyzers (installed via the Microsoft.CodeAnalysis.FxCopAnalyzers NuGet package) which can detect and warn about many code issues. The whole solution is also regularly analyzed with the NDepend tool, which detects all sorts of anti-patterns (circular dependencies, naming inconsistencies...). Tests rely on the NUnit solution, and test coverage is provided by JetBrains dotCover . Benchmarks are powered by BenchmarkDotNet , documentation is built with Microsoft's DocFX tool. The client uses the Hazelcast Open Binary Client Protocol . The protocol repository is included in the client repository as a Git submodule in order to keep track of which exact version of the protocol was used to build the codec files in the client."
  },
  "4.1.0/doc/cpsubsystem.html": {
    "href": "4.1.0/doc/cpsubsystem.html",
    "title": "CP SubSystem | Hazelcast .NET Documentation",
    "keywords": "CP SubSystem Warning The CP SubSystem operates in the unsafe mode by default without the strong consistency guarantee. See the CP Subsystem Unsafe Mode section for more information. You should set a positive number to the CP member count configuration to enable CP Subsystem and use it with the strong consistency guarantee. See the CP Subsystem Configuration section for details. Note See the original Java client CP SubSystem documentation for more details. The CP SubSystem is a component of a Hazelcast cluster that builds a strongly consistent layer for a set of distributed data structures. Its APIs can be used for implementing distributed coordination use cases, such as leader election, distributed locking, synchronization, and metadata management. It is accessed via the IHazelcastClient.CPSubSystem property. Its data structures are CP with respect to the CAP principle , i.e., they always maintain linearizability and prefer consistency over availability during network partitions. Besides network partitions, the CP SubSystem withstands server and client failures. Currently, the C# client CP SubSystem implements the following services: AtomicLong AtomicRef"
  },
  "4.1.0/doc/distributedObjects.html": {
    "href": "4.1.0/doc/distributedObjects.html",
    "title": "Distributed Objects | Hazelcast .NET Documentation",
    "keywords": "Distributed Objects Distributed objects are managed by an Hazelcast cluster, and accessed via the Hazelcast .NET client. Currently, the client supports the following distributed objects: HMap - a distributed key/value store corresponding to a cluster-side Map HMultiMap - a distributed key/value store corresponding to a cluster-side MultiMap HReplicatedMap - a distributed key/value store corresponding to a cluster-side ReplicatedMap HList - a distributed list store corresponding to a cluster-side List HQueue - a distributed queue store corresponding to a cluster-side Queue HRingBuffer - a distributed ring-buffer corresponding to a cluster-side Map HSet - a distributed set store corresponding to a cluster-side Set HTopic - a distributed message-publishing store corresponding to a cluster-side Topic Distributed objects are obtained from the Hazelcast .NET Client and are fully identified by their unique name. If an object of the specified type and with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var map = await client.GetMapAsync<string, string>(\"my-map\"); Distributed objects should be disposed when not used, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe a distributed object entirely from the cluster, the object needs to be destroyed: await map.DestroyAsync(); Transactions In a transaction context, transactional versions of some distributed objects can be retrieved: HTxList - a transactional version of an HList object HTxMap - a transactional version of an HMap object HTxMultiMap - a transactional version of an HMultiMap object HTxQueue - a transactional version of an HQueue object HTxSet - a transactional version of an HSet object For instance: using (var tx = await client.BeginTransactionAsync()) { using (var txmap = await tx.GetMapAsync<string, string>(\"my-map\")) { // ... } tx.Complete(); } Transactional objects expose a subset of the methods of the original object, which are performed in a transactional way and are either commited (if the transaction is completed) or rolled back. Refer to the Transactions page for more details. Object Names and Types The name of a distributed object is unique accross its type: there can only be one HMap object named \"my_map\" , but there can also be an HList object named \"my-map\" . \"Type\", here, means the generic definition of the type, e.g. HMap<,> or HList<> and not the complete type (e.g. HList<string> ). This means that there is, in reality, one unique HMap<,> object named \"my-map\" , and that client.GetMapAsync<string, string>(\"my-map\") would refer to the exact same object as client.GetMap<int, int>(\"my-map\") . The consequences of refering to an object with different types are not specified: it may work if types can be implicitly casted, and will not work if they cannot. This is not recommended."
  },
  "4.1.0/doc/events.html": {
    "href": "4.1.0/doc/events.html",
    "title": "Events | Hazelcast .NET Documentation",
    "keywords": "Events Events in the Hazelcast .NET Client rely on a handler-based model close to the C# event model, though with a different syntax for adding and removing handlers, due to the asynchronous nature of these operations. Indeed, the following code has limitations: thing.Updated += OnThingUpdated; thing.Deleted += OnThingDeleted; Here, The two operations are distinct, whereas Hazelcast supports subscriptions that handle multiple events at once; The subscription ( += operation) is synchronous, whereas Hazelcast needs to notify the members of the subscription; The handlers (e.g. OnThingUpdated ) are synchronous. To overcome these limitations, the Hazelcast .NET Client uses the following syntax: var id = await thing.SubscribeAsync(events => events .Updated(OnThingUpdated) .Deleted(OnThingDeleted)); Here, the handlers can be synchronous, for instance: private void OnThingUpdated(Thing sender, ThingUpdatedEventArgs args) { ... } But they can also be asynchronous, for instance: private async ValueTask OnThingUpdated(Thing sender, ThingUpdatedEventArgs args) { await ... } In the example, the two events are subscribed at once and that subscription is represented by the returned id , which is a Guid . The two events can only be unsubscribed at once too, by passing this id : await thing.UnsubscribeAsync(id); Client Events The IHazelcastClient exposes the following events: StateChanged triggers when the client state changes (TODO: link to client lifecycle doc) PartitionLost triggers when (TODO: complete) PartitionsUpdated triggers when the partitions table is updated MembersUpdated triggers when the members list is updated ObjectCreated triggers when a distributed object is created ObjectDestroyed triggers when a distributed object is destroyed TODO: detail each event args Distributed Objects Events TODO: complete"
  },
  "4.1.0/doc/examples.html": {
    "href": "4.1.0/doc/examples.html",
    "title": "Examples | Hazelcast .NET Documentation",
    "keywords": "Examples The Hazelcast.Net.Examples project (only provided in source form) provides a range of examples that demonstrate how to use the Hazelcast.Net client. Building the complete Hazelcast.Net solution builds the example project. Running Examples Examples can then be executed through the hz.[sh|ps1] script: PS> ./hz.ps1 run-example Client.SimpleExample By default, this runs the netcoreapp3.1 Release version of the example. The hz.[sh|ps1] script provides options (see the Building page for details) that can be used to change these. For instance, the following command runs the net462 Debug version of the example: PS> ./hz.ps1 run-example -c Debug -f net462 Client.SimpleExample The example name (here, Client.SimpleExample ) is the short name of the class: if the full class name is Hazelcast.Examples.Namespace.SomeExample then the short name is Namespace.SomeExample . The Example suffix can be ommited, so Client.Simple would work too. And, it is possible to use a tilde character to run examples with name matching the argument. For instance ~Client would run all examples with a short name containing Client . Additional arguments are passed to the example as command-line arguments, and therefore can be used to configure Hazelcast. For instance, if the server runs on 192.168.42.42:5757 , the example above can be launched with: PS> ./hz.ps1 run-example Client.SimpleExample --- --hazelcast.networking.addresses.0=192.168.42.42:5757 Note: the --- separator tells the hz.[sh|ps] script that the trailing arguments are not arguments for the script, but for the example. Reusing Examples Each example is proposed as a standalone class that implements a static Main method. Therefore, each example can be copied and executed directly in a new project. Note that the HazelcastOptionsBuilderExtensions may also need to be copied."
  },
  "4.1.0/doc/gettingStarted.html": {
    "href": "4.1.0/doc/gettingStarted.html",
    "title": "Getting Started | Hazelcast .NET Documentation",
    "keywords": "Getting Started Hazelcast client The Hazelcast client is the entry point to all interactions with an Hazelcast cluster. A client is created by the static HazelcastClientFactory . After it has been used, it needs to be disposed in order to properly close all connections to servers, and release resources. For example: var client = await HazelcastClientFactory.StartNewClientAsync(); // ... use the client ... await client.DisposeAsync(); A client is a heavy enough, multi-threaded object. Although a factory can create several, independent clients, it is recommended to store and reuse the client instance, as much as possible. Here, the client is configured by default, which means by configuration files and environment variables. For more control, the client can be initialized with an HazelcastOptions instance, which represents the complete set of options of the Hazelcast client. In fact, the above example is equivalent to: var options = HazelcastOptions.Build(); var client = await HazelcastClientFactory.StartNewClientAsync(options); // ... Refer to the Configuration page for details on the various ways to build an HazelcastOptions instance, including handling command-line parameters, and to the HazelcastOptions reference for a list of all the configurable elements. Logging The Hazelcast .NET client uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. By default, the client supports the abstractions, but does not come with any actual implementation. This means that, by default, the client will not output any log information. To actually log, an implementation must be added to the project. See the Logging documentation for details. Distributed Objects The client can be used to obtain distributed objects that are managed by the cluster. For instance, the cluster can manage IHMap<TKey, TValue> objects, which are an asynchronous equivalent of .NET IDictionary<TKey,TValue> . Each object is identified by a unique name, which is used to retrieve the object. Finally, distributed objects need to be disposed after usage, to ensure they release their resources. For example: var map = await client.GetMapAsync<string, string>(\"map-name\"); await map.SetAsync(\"key\", \"value\"); var value = await map.GetAsync(\"key\"); await map.DisposeAsync(); The GetMapAsync method returns the existing object with the specified name, or creates a new object with that name on the cluster. That object will continue to live on the cluster after the IHMap<TKey, TValue> has been disposed. In order to remove the object from the cluster, one must destroy the object. For example: var map = await client.GetMapAsync<string, string>(\"dict-name\"); await map.DestroyAsync(); or var map = await client.GetMapAsync<string, string>(\"dict-name\"); await client.DestroyAsync(map); Transactions The client is responsible for creating transactions. Transactions by default follow the Microsoft's transaction pattern: they must be disposed, and commit or roll back depending on whether they have been completed. For example: await using (var transaction = await client.BeginTransactionAsync()) { // ... do transaction work ... transaction.Complete(); } Here, the transaction will commit when transaction is disposed, because it has been completed. Had it not been completed, it would have rolled back. Note that the explicit pattern is also supported, although less recommended: var transaction = await client.BeginTransactionAsync(); // ... do transaction work ... await transactionContext.CommitAsync(); // commmit, or... await transactionContext.DisposeAsync(); // roll back await transaction.DisposeAsync(); Refer to the Transactions page for details. Events The client exposes client-level events. For example: var subscriptionId = await client.SubscribeAsync(events => events .StateChanged((sender, args) => { Console.WriteLine($\"Client state changed to: {args.State}.\") }) ); // ... handle events ... var success = await client.UnsubscribeAsync(subscriptionId); The (sender, args) pattern is used to remain consistent with C# events. Here, sender is the object that triggered the event, i.e. client , and args contains the event data. Note: pure C# events ( client.StateChanged += ... ) cannot be used here, as subscribing, un-subscribing and handling events all need to support being asynchronous. Each distributed object also exposes events in the same way. For example: var subscriptionId = await dict.SubscribeAsync(events => events .EntryAdded((sender, args) => { // ... }) .EntryRemoved((sender, args) => { // ... }) ); // ... handle events ... var success = await dict.UnsubscribeAsync(subscriptionId); Refer to the Events page for details."
  },
  "4.1.0/doc/hlist.html": {
    "href": "4.1.0/doc/hlist.html",
    "title": "HList | Hazelcast .NET Documentation",
    "keywords": "HList A HList list is a distributed list corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# IList<T> . A HList is a specialized IHCollection . The list behavior can be configured on the server: see the general List documentation for complete details about lists. Defining Lists Maps are fully identified by their type and unique name, regardless of the types specified for list items. In other words, an HList<string> and an HList<int> named with the same name are backed by the same cluster structure. Obviously, refering to a list with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Lists A list is obtained from the Hazelcast .NET Client, and is created on-demand: if a list with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var list = await client.GetListAsync<string>(\"my-list\"); Lists should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the list and its data entirely from the cluster, it needs to be destroyed: await list.DestroyAsync(); Using Lists The HList structure is completely documented in the associated IHList<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the list GetAsync(index) retrieves the item in the specified position GetAllAsync() retrieve the items GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the map is empty RemoveAsync(index) remove an item The HList structure exposes events (see events general documentation ) at list level. A complete list of events is provided in the @Hazelcast.DistributedObjects.CollectionEventHandlers`1 documentation. The following example illustrates how to subscribe, and unsubscribe, to list events: var id = await list.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await list.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "4.1.0/doc/hmap.html": {
    "href": "4.1.0/doc/hmap.html",
    "title": "HMap, HMultiMap, HReplicatedMap | Hazelcast .NET Documentation",
    "keywords": "HMap, HMultiMap, HReplicatedMap A HMap map is a distributed key/value store corresponding to a cluster-side Map which can be considered as a distributed implementation of the well-known C# IDictionary<K,V> , with data being partitioned over members of the cluster, thus providing horizontal scalability. It is one of the most important Hazelcast data structures. Additionally, Hazelcast provides the following map-related data structures: A HMultiMap map is a distributed key/value store corresponding to a cluster-side MultiMap : a specialized map that supports storing multiple values under a single key. A HReplicatedMap map is a distributed key/value store corresponding to a cluster-side ReplicatedMap : a specialized map where data is replicated to all members of the cluster, instead of being partitioned, thus providing faster read/write accesses at the cost of higher server memory consumption. The maps behavior can be configured on the server: see the general Map documentation for complete details about maps. Defining Maps Maps are fully identified by their type ( HMap , HReplicatedMap or HMultiMap ) and unique name, regardless of the types specified for keys and values. In other words, an HMap<string, string> and an HMap<int, int> named with the same name are backed by the same cluster structure. Obviously, refering to a map with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. Key and value types can be just about any valid .NET type, provided that they can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). They do not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves (for instance, if in-memory format is configured as OBJECT , or if entries are processed by entry processors), the types must also be (de)serializable by the cluster. Because keys may never be de-serialized on the cluster, the cluster always treat them as binary blobs, for comparison purposes. That is to say, two keys are considered identical by the cluster if their serialized representations are identical. Creating & Destroying Maps A map is obtained from the Hazelcast .NET Client, and is created on-demand: if a map with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var map = await client.GetMapAsync<string, string>(\"my-map\"); Maps should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the map and its data entirely from the cluster, it needs to be destroyed: await map.DestroyAsync(); Using Maps The HMap structure is completely documented in the associated IHMap<TKey, TValue> reference documentation. It provides methods to manipulate entries, such as: SetAsync(key, value) and PutAsync(key, value) add an entry to the map GetAsync(key) retrieves the value associated with a key GetKeysAsync() , GetValuesAsync() retrieve the keys and values ContainsKeyAsync(key) , ContainsValueAsync(value) determines whether the map contains a key or a value GetSizeAsync() gets the number of entries, and IsEmptyAsync() determines whether the map is empty RemoveAsync(key) and DeleteAsync(key) remove an entry The HMap structure also supports locks at entry level via methods such as: LockAsync(key) locks the entry associated with the key UnlockAsync(key) unlocks an entry that was previously locked IsLockedAsync(key) determines whether an entry is locked Note Note that locks, due to the asynchronous aspect of the API, are not thread-based but context-based. Refer to the locking documentation for complete details. The HMap structure exposes events (see events general documentation ) both at map level and at entry level. A complete list of events is provided in the MapEventHandlers<TKey, TValue> documentation. The following example illustrates how to subscribe, and unsubscribe, to map events: var id = await map.SubscribeAsync(events => events .EntryRemoved((sender, args) => { logger.LogInformation($\"Key={args.Key} / value={args.Value} removed.\") }) .Cleared((sender, args) => { logger.LogInformation(\"The map has been cleared.\"); })); // ... await map.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too. (to be completed)"
  },
  "4.1.0/doc/hqueue.html": {
    "href": "4.1.0/doc/hqueue.html",
    "title": "HQueue | Hazelcast .NET Documentation",
    "keywords": "HQueue A HQueue list is a distributed queue corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# Queue<T> . A HQueue is a specialized IHCollection . The queue behavior can be configured on the server: see the general Queue documentation for complete details about queues. Defining Queues Queues are fully identified by their type and unique name, regardless of the types specified for queue items. In other words, an HQueue<string> and an HQueue<int> named with the same name are backed by the same cluster structure. Obviously, refering to a queue with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Queues A queue is obtained from the Hazelcast .NET Client, and is created on-demand: if a queue with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var queue = await client.GetQueueAsync<string>(\"my-queue\"); Queues should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the queue and its data entirely from the cluster, it needs to be destroyed: await queue.DestroyAsync(); Using Queue The HQueue structure is completely documented in the associated IHQueue<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the queue OfferAsync(item) tries to add an item to the queue, if possible GetElementAsync() retrieves (but does not remove) an item from the queue TakeAsync() removes and returns the head item from the queue GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the queue is empty The HQueue structure exposes events (see events general documentation ) at queue level. A complete list of events is provided in the @Hazelcast.DistributedObjects.CollectionEventHandlers`1 documentation. The following example illustrates how to subscribe, and unsubscribe, to queue events: var id = await queue.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await queue.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "4.1.0/doc/hringbuffer.html": {
    "href": "4.1.0/doc/hringbuffer.html",
    "title": "HRingBuffer | Hazelcast .NET Documentation",
    "keywords": "HRingBuffer A HRingBuffer list is a distributed ring-buffer corresponding to a cluster-side List . Content in a ring-buffer is stored in a ring-like structure. A ringbuffer has a capacity so it won't grow beyond that capacity and endanger the stability of the system. If that capacity is exceeded, than the oldest item in the ringbuffer is overwritten. The ring-buffer behavior can be configured on the server: see the general Queue documentation for complete details about ring-buffers. Defining Ring-Buffers Ring-buffers are fully identified by their type and unique name, regardless of the types specified for bufferered items. In other words, an HRingBuffer<string> and an HRingBuffer<int> named with the same name are backed by the same cluster structure. Obviously, refering to a ring-buffer with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Ring-Buffers A ring-buffer is obtained from the Hazelcast .NET Client, and is created on-demand: if a ring-buffer with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var ringbuffer = await client.GetRingBufferAsync<string>(\"my-ring-buffer\"); Ring-buffers should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the ring-buffer and its data entirely from the cluster, it needs to be destroyed: await ringbuffer.DestroyAsync(); Using Ring-Buffers The HRingBuffer structure is completely documented in the associated IHRingBuffer<TItem> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the ring-buffer GetCapacityAsync() gets the total capacity of the ring-buffer GetRemainingCapacityAsync() gets the remaining capacity of the ring-buffer ReadOneAsync() reads one item from the ring-buffer"
  },
  "4.1.0/doc/hset.html": {
    "href": "4.1.0/doc/hset.html",
    "title": "HSet | Hazelcast .NET Documentation",
    "keywords": "HSet A HSet list is a distributed list corresponding to a cluster-side List which can be considered as a distributed implementation of the well-known C# IHashSet<T> . A HSet is a specialized IHCollection . The set behavior can be configured on the server: see the general List documentation for complete details about sets. Defining Sets Sets are fully identified by their type and unique name, regardless of the types specified for set items. In other words, an HSet<string> and an HSet<int> named with the same name are backed by the same cluster structure. Obviously, refering to a set with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The items type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Sets A set is obtained from the Hazelcast .NET Client, and is created on-demand: if a set with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var set = await client.GetSetAsync<string>(\"my-set\"); Sets should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the set and its data entirely from the cluster, it needs to be destroyed: await set.DestroyAsync(); Using Sets The HSet structure is completely documented in the associated IHSet<T> reference documentation. It provides methods to manipulate entries, such as: AddAsync(item) adds an item to the set GetAllAsync() retrieves the items ContainsAsync(item) determines whether the set contains an item GetSizeAsync() gets the number of items, and IsEmptyAsync() determines whether the map is empty RemoveAsync(item) remove an item The HSet structure exposes events (see events general documentation ) at set level. A complete list of events is provided in the @Hazelcast.DistributedObjects.CollectionEventHandlers`1 documentation. The following example illustrates how to subscribe, and unsubscribe, to set events: var id = await set.SubscribeAsync(events => events .ItemAdded((sender, args) => { logger.LogInformation($\"Item {args.Item} was added.\") })); // ... await set.UnsubscribeAsync(id); Note that the handler methods passed to e.g. EntryRemoved or Cleared can be asynchronous, too."
  },
  "4.1.0/doc/htopic.html": {
    "href": "4.1.0/doc/htopic.html",
    "title": "HTopic | Hazelcast .NET Documentation",
    "keywords": "HTopic A HTopic topic is a distributed topic corresponding to a cluster-side List . The topic behavior can be configured on the server: see the general List documentation for complete details about topics. Defining Topics Topics are fully identified by their type and unique name, regardless of the types specified for topic messages. In other words, an HTopic<string> and an HTopic<int> named with the same name are backed by the same cluster structure. Obviously, refering to a topic with types other than the expected types can have unspecified consequences (probably, serialization errors) and is not recommended. The messages type can be just about any valid .NET type, provided that it can be (de)serialized by the Hazelcast .NET Client (see the Serialization documentation). It does not necessarily need to be (de)serializable by the cluster, as long as the cluster does not need to handle them as objects, and can treat them as plain binary blobs. As soon as the cluster needs to handle the objects themselves, the types must also be (de)serializable by the cluster. Creating & Destroying Topics A topic is obtained from the Hazelcast .NET Client, and is created on-demand: if a topic with the specified name already exists on the cluster, it is returned, otherwise it is created on the cluster. For instance: var optic = await client.GetTopicAsync<string>(\"my-topic\"); Topics should be disposed after usage, in order to release their resources. Note that this only releases client-side resources, but the actual data remain available on the cluster for further usage. In order to wipe the topic and its data entirely from the cluster, it needs to be destroyed: await topic.DestroyAsync(); Using Topics The HTopic structure is completely documented in the associated IHTopic<T> reference documentation. It provides a method to publish messages: PublishAsync(message) publishes a message The HTopic structure exposes events (see events general documentation ) at topic level. A complete list of events is provided in the @Hazelcast.DistributedObjects.CollectionEventHandlers`1 documentation. The following example illustrates how to subscribe, and unsubscribe, to topic events: var id = await topic.SubscribeAsync(events => events .Message((sender, args) => { logger.LogInformation($\"Got message {args.Payload} at {args.PublishTime}.\") })); // ... await topic.UnsubscribeAsync(id); Note that the handler methods passed to e.g. Message can be asynchronous, too."
  },
  "4.1.0/doc/index.html": {
    "href": "4.1.0/doc/index.html",
    "title": "Documentation | Hazelcast .NET Documentation",
    "keywords": "Documentation This section contains the complete documentation for the Hazelcast .NET solution, with examples, guides and FAQ. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Hazelcast IMDG Reference Manual for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. This section also documents how to obtain the source code, build the solution, interact with the community, and contribute. It also documents the internals of the solution, which can be useful for contributors."
  },
  "4.1.0/doc/kerberos.html": {
    "href": "4.1.0/doc/kerberos.html",
    "title": "Kerberos | Hazelcast .NET Documentation",
    "keywords": "Kerberos The Hazelcast .NET client supports Kerberos as an authentication mechanism, on the Windows platform. Kerberos is not supported by the Hazelcast .NET Client on other platforms at the moment. The Hazelcast .NET Client must connect to a server that supports Kerberos authentication: Kerberos is supported by Hazelcast servers starting with version 4.1, as an Enterprise feature. Kerberos authentication allows Windows clients to transparently authenticate, with permissions being managed through server-level integration to LDAP-based authorization. Client Configuration Kerberos support for the Hazelcast .NET Client is provided in a separate Hazelcast.Net.Win32 NuGet package, which needs to be installed alongside the main Hazelcast.Net package. Kerberos authentication can be activated via the configuration file, or via code. In both cases, you will need to know the Service Principal Name (a.k.a. spn - \" hz/cluster1234 \" in the examples below) corresponding to the Hazelcast cluster. Configuration file: \"hazelcast\": { \"authentication\": { \"kerberos\": { \"spn\": \"hz/cluster1234\" } } } Code: HazelcastOptions options; options.Authentication.ConfigureKerberosCredentials(\"hz/cluster1234\"); In both cases, the Hazelcast .NET Client transparently negociates authentication with the server. Server Configuration Server security configuration (starting with 4.1) is documented in the Security section of the main Hazelcast documentation, and Kerberos authentication is documented in the Security Reams sub-section. The Kerberos support in Hazelcast has 2 configuration parts: identity and authentication. The identity part is responsible for retrieving the service ticket from Kerberos KDC (Key Distribution Center). The authentication part verifies the service tickets. The following XML fragment can be used as an example of a working server configuration. However, it is recommended to read the completed documentation in order to fully understand the security aspects of Kerberos. <realm name=\"kerberosRealm\"> <authentication> <kerberos> <security-realm>krb5Acceptor</security-realm> <!-- relax flags check because .NET tokens have too many things --> <relax-flags-check>true</relax-flags-check> <!-- permissions via LDAP --> <ldap> <!-- LDAP server --> <url>ldap://server19.hz.local/</url> <!-- LDAP auth --> <system-user-dn>CN=Administrateur,CN=Users,DC=hz,DC=local</system-user-dn> <system-user-password>******</system-user-password> <!-- no need to auth the user, it's been done already by Kerberos --> <skip-authentication>true</skip-authentication> <!-- find the user in AD (ensure UPN is set in AD!) --> <user-context>CN=Users,DC=hz,DC=local</user-context> <user-search-scope>subtree</user-search-scope> <user-filter>(userPrincipalName={login})</user-filter> <!-- map one attribute to a role --> <!-- <role-mapping-mode>attribute</role-mapping-mode> <role-mapping-attribute>cn</role-mapping-attribute> --> <!-- map roles via groups --> <role-mapping-mode>reverse</role-mapping-mode> <role-context>CN=Users,DC=hz,DC=local</role-context> <role-search-scope>subtree</role-search-scope> <role-filter>(member={memberDN})</role-filter> <role-recursion-max-depth>4</role-recursion-max-depth> <role-name-attribute>cn</role-name-attribute> </ldap> </kerberos> </authentication> </realm> <realm name=\"krb5Acceptor\"> <authentication> <jaas> <login-module class-name=\"com.sun.security.auth.module.Krb5LoginModule\" usage=\"REQUIRED\"> <properties> <property name=\"isInitiator\">false</property> <property name=\"useTicketCache\">false</property> <property name=\"doNotPrompt\">true</property> <property name=\"useKeyTab\">true</property> <property name=\"storeKey\">true</property> <!-- the service principal --> <property name=\"principal\">hz/cluster1234@HZ.LOCAL</property> <!-- on Windows, be sure to use the proper Windows paths with backslashes, not slashes! --> <property name=\"keyTab\">path\\to\\hzcluster1234.keytab</property> </properties> </login-module> </jaas> </authentication> </realm>"
  },
  "4.1.0/doc/locking.html": {
    "href": "4.1.0/doc/locking.html",
    "title": "Locking | Hazelcast .NET Documentation",
    "keywords": "Locking On the server (member) side, Hazelcast uses a unique number to identify the owner of locks, and historically that number has always been the thread unique identifier. As a consequence, the locking model in previous versions of the Hazelcast client closely match the thread-based model that .NET provides with, for instance, the lock statement. Due to the systematic usage of async / await asynchronous patterns, the code for one operation can be executed by many different threads (basically, each time an operation is put on hold by an await statement, it can resume its execution on any other thread). Therefore, using the actual thread identifier as a \"lock owner\" identifier is not possible anymore. In the current versions of the client, the \"lock owner\" is represented by an AsyncContext , a class which relies upon the .NET built-in AsyncLocal<T> type to maintain values that flow with the asynchronous operation, i.e. are transferred to the new thread when an operation resumes after awaiting. Therefore, when an operation acquires a lock, it owns the lock until it releases it, no matter what thread executes the operation. The AsyncContext uses a sequential number to ensure the uniqueness of the identifier. In order to execute work in a new context (which would correspond to executing work on a different thread for previous versions), one has to use a new context: // executes in the same, current context await DoSomethingAsync(...); using (AsyncContext.New()) { // executes in a new context await DoSomethingAsync(...); } Due to the way AsyncLocal<T> variables work, any task started from within the using block executes in the new context, even if it continues to execute after the using block has exited: Task task; using (AsyncContext.New()) { // starts in a new context var task = DoSomethingAsync(...); } // the entire task executes in the new context await task; Essentially, when the using block is exited, the previous AsyncContext is restored, but the new one that was created remains attached to the tasks that were started."
  },
  "4.1.0/doc/logging.html": {
    "href": "4.1.0/doc/logging.html",
    "title": "Logging | Hazelcast .NET Documentation",
    "keywords": "Logging The Hazelcast .NET client uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. By default, the client supports the abstractions, but does not come with any actual implementation. This means that, by default, the client will not output any log information. To actually log, an implementation must be added to the project. Microsoft provides a range of providers to log to various destinations. In addition, a variety of third-party products such as Serilog support complex logging patterns and more destinations (to the filesystem, the Cloud, etc). Example: logging to console For instance, to enable logging to console, a reference to the Microsoft.Extensions.Logging.Console NuGet package must be added, and then the Hazelcast client needs to be configured to use that implementation: var hazelcastOptions = HazelcastOptions.Build(configure: (configuration, options) => LoggerFactory.Create(builder => builder .AddConfiguration(configuration.GetSection(\"logging\")) .AddConsole()); ); Configuration Logging is configured as per Microsoft.Extensions.Logging conventions. In a configuration file, one would need a logging section distinct from the hazelcast section: { \"hazelcast\": { ... }, \"logging\": { \"logLevel\": { \"Default\": \"Debug\", \"System\": \"Information\", \"Microsoft\": \"Information\", \"Hazelcast.Examples.MyApp\", \"Information\" } } } Refer to Microsoft's documentation for more details. Re-using the logging system The logging system is available for the user to log in their application, too. At the moment, the best way to access the logging system is: var loggerFactory = hazelcastOptions.LoggerFactory.Service; var logger = loggerFactory.CreateLogger<MyClass>(); logger.LogInformation(\"hello!\"): NOTE: in the future, the logging system will be more directly exposed by the client. NOTE: in DI-based applications, things work a bit differently (to be documented)."
  },
  "4.1.0/doc/migratingFrom3.html": {
    "href": "4.1.0/doc/migratingFrom3.html",
    "title": "Migrating from v3 | Hazelcast .NET Documentation",
    "keywords": "Migrating from v3 Version 4 of the Hazelcast .NET client has been massively refactored in order to benefit from the asynchronous features of the C# language. For instance, its low-level networking stack relies on Microsoft's System.IO.Pipelines library. This is the high-performance library that is used, for instance, to power the Kestrel web server. It is constantly improved, as it is the foundation of all high-performance networking in .NET Core 3.x (and the upcoming .NET Core 5.x). The concepts however have not changed much. Threading, Async and Tasks Threading has been greatly simplified and now entirely relies on the async/await pattern. In the current version of the code, all tasks run on the default task scheduler, and there is no limit on, for instance, the amount of concurrent tasks. All tasks run on the default .NET ThreadPool and the default Task scheduler. Depending on feedback, we could consider using custom Task schedulers and/or thread pools. Configuration In previous versions, the Hazelcast .NET client used to rely on a custom configuration solution based upon an XML file. The Hazelcast .NET client now uses the configuration abstractions proposed by the Microsoft.Extensions.Configuration namespace. These abstractions provide built-in support for command-line arguments, environment variables, configuration files or in-memory configuration. For instance, they automatically support one configuration value being supplied via the configuration file, and/or a command-line argument, and/or an environment variable. They automatically parse configuration files into their strongly-typed (classes) counterpart. This also means that the same configuration mechanism can be used by the various libraries used in users' applications. The most important consequence for users is that the current XML configuration file is replaced with a very similar JSON file. Refer to the Configuration page for details on configuration. Logging In previous versions, the Hazelcast .NET client used to rely on a custom logging solution. The Hazelcast .NET client now uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. These abstractions come with a range of providers to log to the console, and other various destinations. In addition, a variety of third-party products (such as Serilog ) support complex logging patterns and more destinations (to the filesystem, the Cloud, etc). This also means that the same logging mechanism can be used by the various libraries used in users' applications. Locking Previous versions of the Hazelcast .NET Client attached locks to threads, in a way similar to the thread-based model that .NET provides with, for instance, the lock statement. Due to the systematic usage of async / await asynchronous patterns, this is not applicable anymore, and is replaced with a new model based upon an AsyncContext class. In order to execute work in a new context (which would correspond to executing work on a different thread for previous versions), one has to use a new context: // executes in the same, current context await DoSomethingAsync(...); using (AsyncContext.New()) { // executes in a new context await DoSomethingAsync(...); } Refer to the Locking page for details. Events In previous versions, the Hazelcast .NET Client use listeners to handle events. Current versions move to a handler-based model closer to the C# event model, though with a different syntax for adding and removing handlers, due to the asynchronous nature of these operations. For instance: // subscribe var id = await client.SubscribeAsync(events => events .MembersUpdated((sender, args) => HandleMembersUpdated(sender, args))); // handle private void HandleMembersUpdated(IHazelcastClient client, MembersUpdatedEventArgs args) { ... } // unsubscribe await client.UnsubscribeAsync(id); Refer to the Events page for details. Dependency Injection Dependency injection is becoming more and more common in large .NET applications. The Hazelcast .NET client includes support (via a separate assembly and NuGet package) for the dependency injection abstractions proposed by the Microsoft.Extensions.DependencyInjection namespace. This allows users to register Hazelcast objects in a dependency injection container."
  },
  "4.1.0/doc/obtaining.html": {
    "href": "4.1.0/doc/obtaining.html",
    "title": "Obtaining Hazelcast .NET | Hazelcast .NET Documentation",
    "keywords": "Obtaining Hazelcast .NET Hazelcast is composed of two parts: the server, and the client. Browse to Hazelcast IMDG to find out how to obtain and run the server part. Requirements The Hazelcast .NET client is distributed as a NuGet package which targets .NET Standard versions 2.0 and 2.1. It can therefore be used in any application targetting .NET versions that support these .NET Standard versions: .NET Framework 4.6.2 and above, on Windows .NET Core 2.1 and 3.1, on Windows, Linux and MacOS The upcoming .NET 5 version supports .NET Standard 2.1, and therefore should execute the Hazelcast .NET client without issues, but that is not supported yet. Getting the client The .NET client is distributed via NuGet as a package named Hazelcast.NET . It can be installed like any other NuGet package, either via the Visual Studio GUI, or via the package manager: PM> Install-Package Hazelcast.NET Or via the .NET CLI: > dotnet add package Hazelcast.NET Or manually added to the project as a package reference: <PackageReference Include=\"Hazelcast.NET\" Version=\"4.0.0\" /> Notes The Hazelcast .NET client uses the logging abstractions proposed by the Microsoft.Extensions.Logging namespace. By default, the client supports the abstractions, but does not come with any actual implementation. This means that, by default, the client will not output any log information. To actually log, an implementation must be added to the project. See the Logging documentation for details."
  },
  "4.1.0/doc/options.html": {
    "href": "4.1.0/doc/options.html",
    "title": "Hazelcast Options | Hazelcast .NET Documentation",
    "keywords": "Hazelcast Options This page lists the complete set of options available to configure the Hazelcast .NET client. For more details regarding configuration itself, please refer to the Configuration page. See HazelcastOptions for full documentation of the class."
  },
  "4.1.0/doc/quickStart.html": {
    "href": "4.1.0/doc/quickStart.html",
    "title": "Quick Start | Hazelcast .NET Documentation",
    "keywords": "Quick Start Let's do a quick start!"
  },
  "404.html": {
    "href": "404.html",
    "title": "Page Not Found | Hazelcast .NET Documentation",
    "keywords": "Page Not Found Unfortunately, we cannot locate that page."
  },
  "api-index.html": {
    "href": "api-index.html",
    "title": "API | Hazelcast .NET Documentation",
    "keywords": "API This section contains the full public API reference documentation, generated from source-code-level comments, and complemented with additional content. Use the navigation to the left to browse namespaces and members. For extra details, including all code comments, you may want to browse the source code itself. Current version 4.1.0 <!--DEVDOC_API--> Previous versions 4.0.2 4.0.1 4.0.0 3.12.3 3.12.2"
  },
  "doc-index.html": {
    "href": "doc-index.html",
    "title": "Documentation | Hazelcast .NET Documentation",
    "keywords": "Documentation This section contains the complete documentation for the Hazelcast .NET solution, with examples, guides and FAQ. Hazelcast .NET only provides a client-side implementation, and needs to connect to a fully configured Hazelcast cluster. Refer to the Hazelcast IMDG Reference Manual for a complete documentation of the server side of Hazelcast. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This section also documents how to obtain the source code, build the solution, interact with the community, and contribute. It also documents the internals of the solution, which can be useful for contributors. Current version 4.1.0 <!--DEVDOC_DOC--> Previous versions 4.0.2 4.0.1 4.0.0"
  },
  "index.html": {
    "href": "index.html",
    "title": "Welcome! | Hazelcast .NET Documentation",
    "keywords": "Welcome! Hazelcast .NET brings the full power of the Hazelcast high-performance, in-memory computing platform to the Microsoft .NET ecosystem. The Hazelcast .NET Client allows you to elastically scale your .NET caches at high read speeds, to access all of Hazelcast data structures such as distributed maps, queues, topics and more. All, with enterprise level security through SSL and mutual authentication. This site provides a complete documentation with examples, guides and FAQs. It also provides a complete reference documentation for the public API, generated from source-code-level comments, and complemented with additional content. The Hazelcast .NET solution is Open Source, released under the Apache License 2.0 , and welcomes contributions. The project lives on GitHub . This documentation also details how to obtain the source code, build the solution, interact with the community, and contribute. Oh, and a documentation documentation site is, usually, a never-ending work-in-progress. Documentation itself is open to contributions, too. Find anything that you think could be improved? Reach out to us!"
  }
}